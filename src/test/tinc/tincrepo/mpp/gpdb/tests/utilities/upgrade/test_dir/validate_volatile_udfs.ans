DROP TABLE IF EXISTS newfoo;
psql:/path/sql_file:1: NOTICE:  table "newfoo" does not exist, skipping
DROP TABLE
DROP TABLE IF EXISTS newbar;
psql:/path/sql_file:1: NOTICE:  table "newbar" does not exist, skipping
DROP TABLE
CREATE TABLE newfoo (a int, b int);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
CREATE TABLE newbar (c int, d int);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'c' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
INSERT INTO newfoo select i, i+1 from generate_series(1,10) i;
INSERT 0 10
INSERT INTO newbar select i, i+1 from generate_series(1,10) i;
INSERT 0 10
DROP FUNCTION IF EXISTS udf_mod_int_vol(x int);
psql:/path/sql_file:1: NOTICE:  function udf_mod_int_vol(pg_catalog.int4) does not exist, skipping
DROP FUNCTION
CREATE FUNCTION udf_mod_int_vol(x int) RETURNS int AS $$
BEGIN
UPDATE newbar SET d = d+1 WHERE c = $1;
RETURN $1 + 1;
END
$$ LANGUAGE plpgsql VOLATILE;
CREATE FUNCTION
SELECT d FROM newbar WHERE c = 1;
 d 
---
 2
(1 row)

SELECT udf_mod_int_vol(1);
 udf_mod_int_vol 
-----------------
               2
(1 row)

SELECT d FROM newbar WHERE c = 1;
 d 
---
 3
(1 row)

