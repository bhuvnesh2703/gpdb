*Disclaimer- The type of upgrade tests and the content will be left up to the discretion of the scrum team* 
Please see upgrade testing overview: https://confluence.greenplum.com/display/QA/Upgrade+Testing+in+TINC

1) You can either add a new test case by adding a test to the file test_upgrade.py OR you can add sql files to the existing test folders
    - Reason to add a new test-case: when doing feature related upgrade tests
    - Reason to add a new sql file: when doing testing for changed catalog tables (test_catalog)
2) Upgrade framework functions:
    - download_and_install_gpdb(old_version, new_version, old_gpdb_download_link=None, new_gpdb_download_link=None) // download and install the upgrade to and from version
    - setup_upgrade(old_gpdb_path=None, new_gpdb_path=None, old_version=None, new_version=None, mirror_enabled = False) //run gpinitsystem against the old version
    - run_workload(workload_dir, prefix="load_", output_to_file=False, ext=".ans") // run load_*.sql files to populate the cluster with test data
    - validate_workload(workload_dir, use_diff_ans_file=False) //Run all validate_*.sql files, generate .out files and compare to .ans files to verify correctness of data pre-post-upgrade
    - run_migrator(expected_error_string=None, enable_perfmon=False, upgrade_hdfs = False, migrator_option=None) // Runs gpmigrator to upgrade
    - validate_upgrade_correctness() // Sanity check on upgraded cluster
    - run_swap(expected_error_string=None, enable_perfmon=False) // Do binary swap instead of upgrade
    - cleanup_upgrade(delete_binaries = True, gpstop_only=False) // Cleanup all the directories and data that was created for a test case
3) For more samples see test_upgrade.py
4) For more details on the framework and parameters for functions, please see gpdb_upgrade.py or go through the slides above

How to run an upgrade test-case:

Using CI to run upgrade tests:
1) All upgrade testing specific files are in tinc/tincrepo/main/mpp/gpdb/tests/utilities/upgrade.
2) You should also modify the project properties to match the UPGRADE_FROM and BINARY_SWAP_FROM version as per your requirement (it is by default set to 4.2.6.0 2 sp for UPGRADE_FROM and therefore it will use 4.2.6.0 from artifacts server)
3) Once you have done all of the above, you can trigger your project. 

Running in your private environment:
1) Make changes as per requirement to test_upgrade.py to add either tests or sql files to test_catalog or test_dir. Please go over the Upgrade Framework slides to figure out the naming conventions of test sql and ans files.
2) source $GPHOME/greenplum_path.sh; source tinc_env.sh;
3)
Optional env variables to set: 
- UPGRADE_FROM (The version you want to upgrade from, if not set, it is defaulted to 1.0)
- BINARY_SWAP_FROM (The version you want to binary swap from)
4) Use tinc.py to run upgrade tests (e.g. running from upgrade dir: export export UPGRADE_FROM="4.2.6.0 2 sp"; tinc.py discover;)

- Keep in mind that all tests are cleaned up post execution as part of tearDown(). If you would like to debug, please comment out the cleanup
- Make sure port 10300 is not being utilized because the cluster gets initialized on this port. It is best if you do not have any postgres processes running when running the upgrade tests
- Make sure you have enough disk and memory on your environment as we do our own hdfs install and initialization

Sample testcases:
1) Upgrading from or to a private build on a local machine:
def test_upgrade_42_43_existing_binaries(self):
        # path is relative to tincrepo/main
        self.setup_upgrade(old_gpdb_path='gpdb_4.2.2.4', -- dir name
                           new_gpdb_path='gpdb_4.3',     -- dir name
                           old_version='4.2.2.4',
                           new_version='4.3',
                           mirror_enabled=True)
        self.run_workload("test_dir")
        self.validate_workload("test_dir")
        self.run_migrator()
        self.validate_upgrade_correctness()

2) Doing a multinode upgrade (not possible via CI yet):
def test_upgrade_42_43_mirror_nodes(self):
        self.install_GPDB("4.2.6.0 2 sp", "4.3.4.1 2 sp")
        self.setup_upgrade(seg_num = 2, seg_hosts=['host1'])
        self.run_migrator()
        self.validate_upgrade_correctness()

3) Binary swap:
def test_upgrade_422_42_binary_swap(self):
        """
        @product_version gpdb: [4.2.0.0- 4.2.99.99]
        """
        self.install_GPDB("4.2.6.0 2 rc","4.2.7.0 2 rc")
        self.setup_upgrade()
        self.run_workload("test_dir")
        self.validate_workload("test_dir")
        self.run_swap()

4) Feature upgrade test:
def test_upgrade_42_43_mirror(self):
        self.install_GPDB("4.2.6.0 2 sp", "4.3.4.1 2 sp")
        self.setup_upgrade(mirror_enabled=True)
        self.run_workload("test_dir")
        self.validate_workload("test_dir")
        self.run_migrator()
        self.validate_upgrade_correctness()
        self.validate_workload("test_dir", use_diff_ans_file=True) 
