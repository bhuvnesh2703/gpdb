-- weighted moving functions
drop table if exists sale; create table sale (pn int);
psql:/path/sql_file:1: NOTICE:  table "sale" does not exist, skipping
DROP TABLE
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'pn' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
insert into sale (pn) values (100);
INSERT 0 1
insert into sale (pn) values (100);
INSERT 0 1
insert into sale (pn) values (200);
INSERT 0 1
insert into sale (pn) values (200);
INSERT 0 1
insert into sale (pn) values (300);
INSERT 0 1
insert into sale (pn) values (400);
INSERT 0 1
insert into sale (pn) values (400);
INSERT 0 1
insert into sale (pn) values (500);
INSERT 0 1
insert into sale (pn) values (500);
INSERT 0 1
insert into sale (pn) values (600);
INSERT 0 1
insert into sale (pn) values (700);
INSERT 0 1
insert into sale (pn) values (800);
INSERT 0 1
select pn,
       wm_avg(pn, array[0.1, 0.2, 0.7], 0) over(order by pn),
       wm_avg(pn::float, array[0.1, 0.2, 0.7], 0) over(order by pn)
from sale;
psql:/path/sql_file:1: ERROR:  function wm_avg(integer, numeric[], integer) does not exist
LINE 2:        wm_avg(pn, array[0.1, 0.2, 0.7], 0) over(order by pn)...
               ^
HINT:  No function matches the given name and argument types. You may need to add explicit type casts.
select pn,
       wm_avg(pn::float, array[0.2, 0.4], -2) over(order by pn),
       wm_avg(pn::float, array[0.2, 0.4], -1) over(order by pn),
       wm_avg(pn::float, array[0.2, 0.4], +1) over(order by pn),
       wm_avg(pn::float, array[0.2, 0.4], +2) over(order by pn)
from sale;
psql:/path/sql_file:1: ERROR:  function wm_avg(double precision, numeric[], integer) does not exist
LINE 2:        wm_avg(pn::float, array[0.2, 0.4], -2) over(order by ...
               ^
HINT:  No function matches the given name and argument types. You may need to add explicit type casts.
select pn,
       wm_var_pop(pn, array[0.1, 0.2, 0.7], 0) over (order by pn),
       wm_var_samp(pn, array[0.1, 0.2, 0.7], 0) over(order by pn),
       wm_var_pop(pn::float, array[0.1, 0.2, 0.7], 0) over (order by pn),
       wm_var_samp(pn::float, array[0.1, 0.2, 0.7], 0) over(order by pn)
from sale;
psql:/path/sql_file:1: ERROR:  function wm_var_pop(integer, numeric[], integer) does not exist
LINE 2:        wm_var_pop(pn, array[0.1, 0.2, 0.7], 0) over (order b...
               ^
HINT:  No function matches the given name and argument types. You may need to add explicit type casts.
select pn,
       wm_stddev_pop(pn::float, array[0.2, 0.4], -2) over(order by pn),
       wm_stddev_pop(pn::float, array[0.2, 0.4], -1) over(order by pn),
       wm_stddev_pop(pn::float, array[0.2, 0.4], +1) over(order by pn),
       wm_stddev_pop(pn::float, array[0.2, 0.4], +2) over(order by pn)
from sale;
psql:/path/sql_file:1: ERROR:  function wm_stddev_pop(double precision, numeric[], integer) does not exist
LINE 2:        wm_stddev_pop(pn::float, array[0.2, 0.4], -2) over(or...
               ^
HINT:  No function matches the given name and argument types. You may need to add explicit type casts.
select wm_avg(a, '{0.2}'::numeric[], 0) over (order by a)
from (values('NaN'::numeric),(0.1)) s(a);
psql:/path/sql_file:1: ERROR:  function wm_avg(numeric, numeric[], integer) does not exist
LINE 1: select wm_avg(a, '{0.2}'::numeric[], 0) over (order by a)
               ^
HINT:  No function matches the given name and argument types. You may need to add explicit type casts.
select wm_avg(a, '{0.2, 0.3}'::numeric[], 0) over (order by a)
from (values(NULL::numeric),(0.1)) s(a);
psql:/path/sql_file:1: ERROR:  function wm_avg(numeric, numeric[], integer) does not exist
LINE 1: select wm_avg(a, '{0.2, 0.3}'::numeric[], 0) over (order by ...
               ^
HINT:  No function matches the given name and argument types. You may need to add explicit type casts.
select wm_avg(pn, ary, 3) over (order by pn)
from sale, (values('{0.1, 0.2}'::float[])) s(ary);
psql:/path/sql_file:1: ERROR:  function wm_avg(integer, double precision[], integer) does not exist
LINE 1: select wm_avg(pn, ary, 3) over (order by pn)
               ^
HINT:  No function matches the given name and argument types. You may need to add explicit type casts.
select wm_avg(pn, '{0.1,0.2}'::float[], ofs) over (order by pn)
from sale, (values(3)) s(ofs);
psql:/path/sql_file:1: ERROR:  function wm_avg(integer, double precision[], integer) does not exist
LINE 1: select wm_avg(pn, '{0.1,0.2}'::float[], ofs) over (order by ...
               ^
HINT:  No function matches the given name and argument types. You may need to add explicit type casts.
select wm_var_pop(pn, array[0.1, 0.9], 0) over
    (order by pn rows between 1 preceding and current row) from sale;
psql:/path/sql_file:1: ERROR:  function wm_var_pop(integer, numeric[], integer) does not exist
LINE 1: select wm_var_pop(pn, array[0.1, 0.9], 0) over
               ^
HINT:  No function matches the given name and argument types. You may need to add explicit type casts.
drop table if exists gapinput cascade; -- ignore
psql:/path/sql_file:1: NOTICE:  table "gapinput" does not exist, skipping
DROP TABLE
create table gapinput
(
	a int,
	b int,
	pk1 int,
	pk2 int,
	sk bigint
)
distributed randomly;
CREATE TABLE
-- NULL partitioning key
delete from gapinput; -- ignore
DELETE 0
insert into gapinput values
     (0, 0, NULL, NULL, 7);
INSERT 0 1
select pk1, pk2, qk, sk, b
from gapinput
sequence q as (
        partition by pk1, pk2
        order by sk
        key qk every 2 between 4 and 8 )
order by pk1, pk2, qk, sk, b;
psql:/path/sql_file:1: ERROR:  syntax error at or near "q"
LINE 3: sequence q as (
                 ^
delete from gapinput; -- ignore
DELETE 1
insert into gapinput values
     (0, 0, -1, -1, 1),
     (1, 0, -1, -1, 3),
     (2, 0, -1, -1, 5),
     (3, 0, -1, -1, 6),
     (4, 0, -1, -1, 9),
     (5, 0, -1, -1, 11),
     (6, 0, -1, -1, 13),
     (7, 0, -1, -2, 2),
     (8, 0, -1, -2, 4),
     (9, 0, -1, -3, 7),
     (10, 0, -1, -3, 10),
     (11, 0, -1, -3, 12),
     (12, 0, -1, -4, 14);
INSERT 0 13
-- Sub-query
select sum((select si from gapinput
	sequence q as (order by sk key si every 3 between 2 and 8)
	order by si limit 1));
psql:/path/sql_file:1: ERROR:  syntax error at or near "q"
LINE 2:  sequence q as (order by sk key si every 3 between 2 and 8)
                  ^
-- CSQ
select a, 1 + (select qk + t.a from gapinput
	sequence q as (order by sk key qk every 3 between 2 and 8)
	order by qk limit 1)
from gapinput t order by a;
psql:/path/sql_file:1: ERROR:  syntax error at or near "q"
LINE 2:  sequence q as (order by sk key qk every 3 between 2 and 8)
                  ^
select a, 1 + (select qk from gapinput
	where a = t.a sequence q as (order by sk key qk every 2 between 4 and 8)
	order by qk limit 1)
from gapinput t order by a;
psql:/path/sql_file:1: ERROR:  syntax error at or near "sequence"
LINE 2:  where a = t.a sequence q as (order by sk key qk every 2 bet...
                       ^
select a, 1 + (select qk from gapinput
	sequence q as (order by sk key qk every t.a + 1 between 4 and 8)
	order by qk limit 1)
from gapinput t order by a;
psql:/path/sql_file:1: ERROR:  syntax error at or near "q"
LINE 2:  sequence q as (order by sk key qk every t.a + 1 between 4 a...
                  ^
select a, 1 + (select qk from gapinput
	sequence q as (order by sk key qk every 2 between t.a and 4)
	order by qk limit 1)
from gapinput t order by a;
psql:/path/sql_file:1: ERROR:  syntax error at or near "q"
LINE 2:  sequence q as (order by sk key qk every 2 between t.a and 4...
                  ^
select a, 1 + (select qk from gapinput
	sequence q as (order by sk key qk every 2 between 0 and t.a)
	order by qk limit 1)
from gapinput t order by a;
psql:/path/sql_file:1: ERROR:  syntax error at or near "q"
LINE 2:  sequence q as (order by sk key qk every 2 between 0 and t.a...
                  ^
-- lead/lag/first_value/last_value
select pk1, a, b, sk, qk, lead(qk) over (q), lag(qk) over (q),
	first_value(si) over(q), last_value(qk) over (q)
from gapinput
sequence q as (partition by pk1 order by sk key qk every 3 between 2 and 6);
psql:/path/sql_file:1: ERROR:  syntax error at or near "q"
LINE 4: sequence q as (partition by pk1 order by sk key qk every 3 b...
                 ^
-- CTAS
create temp table tempgap as
select t1.sk, rank() over(q), qk
from gapinput t1 inner join gapinput t2 on t1.a = t2.b
sequence q as (order by t1.sk key qk every 1 between 4 and 8);
psql:/path/sql_file:1: ERROR:  syntax error at or near "sequence"
LINE 4: sequence q as (order by t1.sk key qk every 1 between 4 and 8...
        ^
select * from tempgap;
psql:/path/sql_file:1: ERROR:  relation "tempgap" does not exist
LINE 1: select * from tempgap;
                      ^
drop table tempgap;
psql:/path/sql_file:1: ERROR:  table "tempgap" does not exist
-- distinct
select distinct a, b, sk, qk from gapinput
sequence q as (order by sk key qk every 2 between 4 and 8);
psql:/path/sql_file:1: ERROR:  syntax error at or near "q"
LINE 2: sequence q as (order by sk key qk every 2 between 4 and 8);
                 ^
select distinct on (qk) a, b, qk from gapinput
sequence q as (order by sk key qk every 2 between 4 and 8);
psql:/path/sql_file:1: ERROR:  syntax error at or near "q"
LINE 2: sequence q as (order by sk key qk every 2 between 4 and 8);
                 ^
-- prepare
prepare x (int) as
select a, b, sk, qk from gapinput
sequence q as (order by sk key qk every $1 between 4 and 8);
psql:/path/sql_file:1: ERROR:  syntax error at or near "q"
LINE 3: sequence q as (order by sk key qk every $1 between 4 and 8);
                 ^
execute x(2);
psql:/path/sql_file:1: ERROR:  prepared statement "x" does not exist
execute x(-1);
psql:/path/sql_file:1: ERROR:  prepared statement "x" does not exist
deallocate x;
psql:/path/sql_file:1: ERROR:  prepared statement "x" does not exist
prepare x (int) as
select a, b, sk, qk from gapinput
sequence q as (order by sk key qk every 1 between $1 and 8);
psql:/path/sql_file:1: ERROR:  syntax error at or near "q"
LINE 3: sequence q as (order by sk key qk every 1 between $1 and 8);
                 ^
execute x(4);
psql:/path/sql_file:1: ERROR:  prepared statement "x" does not exist
deallocate x;
psql:/path/sql_file:1: ERROR:  prepared statement "x" does not exist
prepare x (int, int) as
select a, b, sk, qk from gapinput
sequence q as (order by sk key qk every 1 between $1 and $2);
psql:/path/sql_file:1: ERROR:  syntax error at or near "q"
LINE 3: sequence q as (order by sk key qk every 1 between $1 and $2)...
                 ^
execute x(4, 8);
psql:/path/sql_file:1: ERROR:  prepared statement "x" does not exist
execute x(8, 4);
psql:/path/sql_file:1: ERROR:  prepared statement "x" does not exist
deallocate x;
psql:/path/sql_file:1: ERROR:  prepared statement "x" does not exist
-- on view
create view gapinputview as select pk1, pk2, a, b, sk from gapinput where a  < 5;
CREATE VIEW
select a, b, sk, qk from gapinputview
sequence q as (order by sk key qk every 1 between 4 and 8);
psql:/path/sql_file:1: ERROR:  syntax error at or near "q"
LINE 2: sequence q as (order by sk key qk every 1 between 4 and 8);
                 ^
-- null order by
select a, b, sk, qk
from(values(2, 20, null::int))as foo (a, b, sk)
sequence q as (order by sk key qk every 1 between 4 and 8);
psql:/path/sql_file:1: ERROR:  syntax error at or near "sequence"
LINE 3: sequence q as (order by sk key qk every 1 between 4 and 8);
        ^
-- functions
CREATE OR REPLACE FUNCTION mygapfunc (evry int,s int, e int)
RETURNS SETOF record AS $$
  	select t1.sk, rank() over(q), qk
	from gapinput t1 inner join gapinput t2 on t1.a = t2.b
	sequence q as (order by t1.sk key qk every $1 between $2 and $3);
$$ LANGUAGE SQL;
psql:/path/sql_file:1: ERROR:  syntax error at or near "sequence"
LINE 5:  sequence q as (order by t1.sk key qk every $1 between $2 an...
         ^
select mygapfunc(1,4,8);
psql:/path/sql_file:1: ERROR:  function mygapfunc(integer, integer, integer) does not exist
LINE 1: select mygapfunc(1,4,8);
               ^
HINT:  No function matches the given name and argument types. You may need to add explicit type casts.
drop function mygapfunc(evry integer, s integer, e integer);
psql:/path/sql_file:1: ERROR:  function mygapfunc(integer, integer, integer) does not exist
    
-- partition
create table gapinput_partition 
( like gapinput ) partition by range(a) ( start (0) end (20) every (2));
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'distributed by' clause, defaulting to distribution columns from LIKE table
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "gapinput_partition_1_prt_1" for table "gapinput_partition"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "gapinput_partition_1_prt_2" for table "gapinput_partition"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "gapinput_partition_1_prt_3" for table "gapinput_partition"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "gapinput_partition_1_prt_4" for table "gapinput_partition"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "gapinput_partition_1_prt_5" for table "gapinput_partition"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "gapinput_partition_1_prt_6" for table "gapinput_partition"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "gapinput_partition_1_prt_7" for table "gapinput_partition"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "gapinput_partition_1_prt_8" for table "gapinput_partition"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "gapinput_partition_1_prt_9" for table "gapinput_partition"
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "gapinput_partition_1_prt_10" for table "gapinput_partition"
CREATE TABLE
insert into gapinput_partition select * from gapinput;
INSERT 0 13
select pk1, a, b, sk, qk lead(sk) over (q), lag(qk) over (q),
	first_value(sk) over(q), last_value(qk) over (q)
from gapinput_partition
sequence q as (partition by pk1 order by sk key qk every 3 between 2 and 6);
psql:/path/sql_file:1: ERROR:  syntax error at or near "("
LINE 1: select pk1, a, b, sk, qk lead(sk) over (q), lag(qk) over (q)...
                                     ^
drop table gapinput_partition;
DROP TABLE
-- index
set enable_seqscan=off;
SET
set enable_bitmapscan=off;
SET
set enable_indexscan=on;
SET
create index gapinput_index on gapinput (a);
CREATE INDEX
select t1.sk, rank() over(q), qk
from gapinput t1 inner join gapinput t2 on t1.a = t2.b
sequence q as (order by t1.sk key qk every 1 between 4 and 8);
psql:/path/sql_file:1: ERROR:  syntax error at or near "sequence"
LINE 3: sequence q as (order by t1.sk key qk every 1 between 4 and 8...
        ^
drop index gapinput_index;
DROP INDEX
-- IGNORE NULLS for lead and lag
create table ignull(i numeric, j numeric, k numeric) distributed by(i);
CREATE TABLE
copy ignull from stdin;
select i, j, lead(j) ignore nulls over (order by i) as f1,
	lead(j, 0) ignore nulls over (order by i) as f2,
	lead(j, 2) ignore nulls over (order by i) as f3,
	lead(j, 0, -1) ignore nulls over (order by i) as f4,
	lead(j, i::bigint) ignore nulls over (order by i) as f5
	from ignull;
psql:/path/sql_file:1: ERROR:  syntax error at or near "ignore"
LINE 1: select i, j, lead(j) ignore nulls over (order by i) as f1,
                             ^
select i, j, lag(j) ignore nulls over (order by i) as l1,
	lag(j, 0) ignore nulls over (order by i) as l2,
	lag(j, 2) ignore nulls over (order by i) as l3,
	lag(j, 0, -1) ignore nulls over (order by i) as l4,
	lag(j, 10-i::bigint) ignore nulls over (order by i) as l5
	from ignull;
psql:/path/sql_file:1: ERROR:  syntax error at or near "ignore"
LINE 1: select i, j, lag(j) ignore nulls over (order by i) as l1,
                            ^
select k, i, j, lead(j) ignore nulls over (partition by k order by i) as f10,
	lag(j) ignore nulls over (partition by k order by i) as l10
	from ignull order by k, i;
psql:/path/sql_file:1: ERROR:  syntax error at or near "ignore"
LINE 1: select k, i, j, lead(j) ignore nulls over (partition by k or...
                                ^
