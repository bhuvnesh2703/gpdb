-- Test to validate that AWAITING_DROP segment files are never chosen
-- for inserts.

-- start_matchsubs
-- m/\s+\(.*\.[ch]:\d+\)/
-- s/\s+\(.*\.[ch]:\d+\)/ (SOMEFILE:SOMEFUNC)/
-- m/relid \d+/
-- s/relid \d+/relid /
-- end_matchsubs
!gpfaultinjector -f all -y reset -s 1;
20181001:15:21:30:080397 gpfaultinjector:Adams-MBP:adamberlin-[INFO]:-Starting gpfaultinjector with args: -f all -y reset -s 1
20181001:15:21:30:080397 gpfaultinjector:Adams-MBP:adamberlin-[INFO]:-Injecting fault on content=-1:dbid=1:mode=s:status=u
20181001:15:21:30:080397 gpfaultinjector:Adams-MBP:adamberlin-[INFO]:-DONE


-- Given an append only table that is ready to be compacted

drop table if exists test_table_@orientation@;
DROP
create table test_table_@orientation@ (a int, b int) with(appendonly=true);
CREATE
insert into test_table_@orientation@ select i,i from generate_series(1,12)i;
INSERT 12
update test_table_@orientation@ set b = -b;
UPDATE 12

select gp_toolkit.__gp_remove_ao_entry_from_cache('test_table_@orientation@'::regclass::oid);
__gp_remove_ao_entry_from_cache
-------------------------------
                               
(1 row)

4: !gpfaultinjector -f before_set_segno_for_write_on_dispatch -y suspend -s 1;
20181001:15:21:31:080418 gpfaultinjector:Adams-MBP:adamberlin-[INFO]:-Starting gpfaultinjector with args: -f before_set_segno_for_write_on_dispatch -y suspend -s 1
20181001:15:21:31:080418 gpfaultinjector:Adams-MBP:adamberlin-[INFO]:-Injecting fault on content=-1:dbid=1:mode=s:status=u
20181001:15:21:31:080418 gpfaultinjector:Adams-MBP:adamberlin-[INFO]:-DONE


-- And an insert transaction is blocked before assigning a segment
-- file for insertion
1&: INSERT INTO test_table_@orientation@ VALUES (1,1);  <waiting ...>
4: select wait_for_trigger_fault('before_set_segno_for_write_on_dispatch', 1);
wait_for_trigger_fault
----------------------
t                     
(1 row)

4: !gpfaultinjector -f vacuum_relation_open_relation_during_drop_phase -y suspend -s 1;
20181001:15:21:33:080449 gpfaultinjector:Adams-MBP:adamberlin-[INFO]:-Starting gpfaultinjector with args: -f vacuum_relation_open_relation_during_drop_phase -y suspend -s 1
20181001:15:21:33:080449 gpfaultinjector:Adams-MBP:adamberlin-[INFO]:-Injecting fault on content=-1:dbid=1:mode=s:status=u
20181001:15:21:33:080449 gpfaultinjector:Adams-MBP:adamberlin-[INFO]:-DONE

2&: VACUUM test_table_@orientation@;  <waiting ...>
4: select wait_for_trigger_fault('vacuum_relation_open_relation_during_drop_phase', 1);
wait_for_trigger_fault
----------------------
t                     
(1 row)

-- Then vacuum should have completed compaction leaving segment file 1
-- in default state on QD but in awaiting drop state on QEs
select segno, state from gp_ao_or_aocs_seg_name('test_table_@orientation@');
segno|state
-----+-----
1    |1    
2    |1    
(2 rows)
3U: select segno, state from gp_ao_or_aocs_seg_name('test_table_@orientation@');
segno|state
-----+-----
1    |2    
2    |1    
(2 rows)

-- And the entry in append only hash table for segno 1 is in awaiting drop state
select segno, state from gp_toolkit.__gp_get_ao_entry_from_cache('test_table_@orientation@'::regclass::oid) where segno <= 2;
segno|state
-----+-----
0    |1    
1    |6    
2    |1    
(3 rows)

-- And the entry for test_table is removed from append only hash table
select gp_toolkit.__gp_remove_ao_entry_from_cache('test_table_@orientation@'::regclass::oid);
__gp_remove_ao_entry_from_cache
-------------------------------
                               
(1 row)

-- And the insert succeeds
!gpfaultinjector -f before_set_segno_for_write_on_dispatch -y reset -s 1;
20181001:15:21:35:080484 gpfaultinjector:Adams-MBP:adamberlin-[INFO]:-Starting gpfaultinjector with args: -f before_set_segno_for_write_on_dispatch -y reset -s 1
20181001:15:21:35:080484 gpfaultinjector:Adams-MBP:adamberlin-[INFO]:-Injecting fault on content=-1:dbid=1:mode=s:status=u
20181001:15:21:35:080484 gpfaultinjector:Adams-MBP:adamberlin-[INFO]:-DONE

1<:  <... completed>
INSERT 1

-- The insert recreates the entry in append only hash with segno 1 in
-- awaiting drop state
select segno, state from gp_toolkit.__gp_get_ao_entry_from_cache('test_table_@orientation@'::regclass::oid) where segno <= 2;
segno|state
-----+-----
0    |1    
1    |2    
2    |1    
(3 rows)

-- And the vacuum completes
!gpfaultinjector -f vacuum_relation_open_relation_during_drop_phase -y reset -s 1;
20181001:15:21:36:080500 gpfaultinjector:Adams-MBP:adamberlin-[INFO]:-Starting gpfaultinjector with args: -f vacuum_relation_open_relation_during_drop_phase -y reset -s 1
20181001:15:21:36:080500 gpfaultinjector:Adams-MBP:adamberlin-[INFO]:-Injecting fault on content=-1:dbid=1:mode=s:status=u
20181001:15:21:36:080500 gpfaultinjector:Adams-MBP:adamberlin-[INFO]:-DONE

2<:  <... completed>
VACUUM

-- Then inserts into test table should be visible
select count(1) from test_table_@orientation@;
count
-----
13   
(1 row)

-- And additional inserts should continue to succeed
insert into test_table_@orientation@ values (1,1);
INSERT 1

-- When the appendonly hash entry is removed
select gp_toolkit.__gp_remove_ao_entry_from_cache('test_table_@orientation@'::regclass::oid);
__gp_remove_ao_entry_from_cache
-------------------------------
                               
(1 row)

-- Then inserts should continue to succeed
insert into test_table_@orientation@ values (1,1);
INSERT 1

-- And inserted data should be visible
select count(1) from test_table_@orientation@;
count
-----
15   
(1 row)
