-- Test to validate that AWAITING_DROP segment files are never chosen
-- for inserts.

-- start_matchsubs
-- m/\s+\(.*\.[ch]:\d+\)/
-- s/\s+\(.*\.[ch]:\d+\)/ (SOMEFILE:SOMEFUNC)/
-- m/relid \d+/
-- s/relid \d+/relid /
-- end_matchsubs
!gpfaultinjector -f all -y reset -s 1;

create or replace function remove_ao_entry_from_hash_table(oid)
returns void as '@abs_builddir@/isolation2_regress@DLSUFFIX@'
language c immutable strict no sql;

-- Given an append only table that is ready to be compacted

drop table if exists test_table_@orientation@;
create table test_table_@orientation@ (a int, b int) with(appendonly=true);
insert into test_table_@orientation@ select i,i from generate_series(1,12)i;
update test_table_@orientation@ set b = -b;

select remove_ao_entry_from_hash_table('test_table_@orientation@'::regclass::oid);

4: !gpfaultinjector -f before_set_segno_for_write_on_dispatch -y suspend -s 1;

-- And an insert transaction is blocked before assigning a segment
-- file for insertion
1&: INSERT INTO test_table_@orientation@ VALUES (1,1);
4: select wait_for_trigger_fault('before_set_segno_for_write_on_dispatch', 1);

4: !gpfaultinjector -f vacuum_relation_open_relation_during_drop_phase -y suspend -s 1;
2&: VACUUM test_table_@orientation@;
4: select wait_for_trigger_fault('vacuum_relation_open_relation_during_drop_phase', 1);

-- Then vacuum should have completed compaction leaving segment file 1
-- in default state on QD but in awaiting drop state on QEs
select segno, state from gp_ao_or_aocs_seg_name('test_table_@orientation@');
3U: select segno, state from gp_ao_or_aocs_seg_name('test_table_@orientation@');

-- And the append only hash table no longer holds a record for test_table_@orientation@
select remove_ao_entry_from_hash_table('test_table_@orientation@'::regclass::oid);

-- And the insert succeeds
!gpfaultinjector -f before_set_segno_for_write_on_dispatch -y reset -s 1;
1<:

-- And the vacuum completes
!gpfaultinjector -f vacuum_relation_open_relation_during_drop_phase -y reset -s 1;
2<:

-- Then inserts into test table should be visible
select count(1) from test_table_@orientation@;

-- And additional inserts should continue to succeed
insert into test_table_@orientation@ values (1,1);

-- When the appendonly hash entry is removed
select remove_ao_entry_from_hash_table('test_table_@orientation@'::regclass::oid);

-- Then inserts should continue to succeed
insert into test_table_@orientation@ values (1,1);

-- And inserted data should be visible
select count(1) from test_table_@orientation@;
