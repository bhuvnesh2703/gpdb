--
-- Test queries that can lead to deadlock on the gp_segment_configuration table
-- between the QD backend and FTS. The queries could be gp_add_segment_mirror()
-- and gp_remove_segment_mirror(), both are called during gprecoverseg.
--
-- The tests does not directly call the above functions but mimics them by
-- locking gp_segment_configuration with ExclusiveLock from the same session
-- that requests FTS probe.
--
CREATE OR REPLACE FUNCTION cleanupAllGangs() RETURNS BOOL
AS '@abs_builddir@/regress@DLSUFFIX@', 'cleanupAllGangs' LANGUAGE C;
begin;
lock gp_segment_configuration in exclusive mode;
-- destroy current gang
select cleanupAllGangs();
 cleanupallgangs 
-----------------
 t
(1 row)

-- error out when creating a gang, that should trigger FTS probe
\! gpfaultinjector -f create_gang_in_progress -m async -y skip -o 0 -s 1;
20190715:14:01:31:039225 gpfaultinjector:seale:pivotal-[INFO]:-Starting gpfaultinjector with args: -f create_gang_in_progress -m async -y skip -o 0 -s 1
20190715:14:01:31:039225 gpfaultinjector:seale:pivotal-[INFO]:-Injecting fault on content=-1:dbid=1:mode=s:status=u
20190715:14:01:31:039225 gpfaultinjector:seale:pivotal-[INFO]:-DONE
-- trigger the fault by executing a MPP command
create table dummy();
NOTICE:  Table has no attributes to distribute on.
ERROR:  Unexpected internal error (cdbgang.c:1684)
-- the previous command should not block because of deadlock
-- between FTS and the QD backend serving this session
end;
\! gpfaultinjector -f create_gang_in_progress -m async -y reset -o 0 -s 1;
20190715:14:01:32:039241 gpfaultinjector:seale:pivotal-[INFO]:-Starting gpfaultinjector with args: -f create_gang_in_progress -m async -y reset -o 0 -s 1
20190715:14:01:32:039241 gpfaultinjector:seale:pivotal-[INFO]:-Injecting fault on content=-1:dbid=1:mode=s:status=u
20190715:14:01:32:039241 gpfaultinjector:seale:pivotal-[INFO]:-DONE
