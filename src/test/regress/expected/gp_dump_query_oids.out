-- Test the built-in gp_dump_query function.
SELECT gp_dump_query_oids('SELECT 123');
      gp_dump_query_oids       
-------------------------------
 {"relids": "", "funcids": ""}
(1 row)

SELECT gp_dump_query_oids('SELECT * FROM pg_proc');
        gp_dump_query_oids         
-----------------------------------
 {"relids": "1255", "funcids": ""}
(1 row)

SELECT gp_dump_query_oids('SELECT length(proname) FROM pg_proc');
            gp_dump_query_oids             
-------------------------------------------
 {"relids": "1255", "funcids": "1317,406"}
(1 row)

-- with EXPLAIN
SELECT gp_dump_query_oids('explain SELECT length(proname) FROM pg_proc');
            gp_dump_query_oids             
-------------------------------------------
 {"relids": "1255", "funcids": "1317,406"}
(1 row)

-- with a multi-query statement
SELECT gp_dump_query_oids('SELECT length(proname) FROM pg_proc; SELECT abs(relpages) FROM pg_class');
                 gp_dump_query_oids                  
-----------------------------------------------------
 {"relids": "1255,1259", "funcids": "1317,406,1397"}
(1 row)

-- Test error reporting on an invalid query.
SELECT gp_dump_query_oids('SELECT * FROM nonexistent_table');
ERROR:  relation "nonexistent_table" does not exist
LINE 1: SELECT * FROM nonexistent_table
                      ^
QUERY:  SELECT * FROM nonexistent_table
SELECT gp_dump_query_oids('SELECT with syntax error');
ERROR:  syntax error at or near "with syntax"
LINE 1: SELECT with syntax error
               ^
QUERY:  SELECT with syntax error

-- Test partition and inherited tables
CREATE TABLE minirepro_partition_test (id int, info json);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'id' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE foo (id int, year int, a int, b int, c int, d int, region text)
 DISTRIBUTED BY (id)
 PARTITION BY RANGE (year)
     SUBPARTITION BY RANGE (a)
        SUBPARTITION TEMPLATE (
         START (1) END (2) EVERY (1),
         DEFAULT SUBPARTITION other_a )
            SUBPARTITION BY RANGE (b)
               SUBPARTITION TEMPLATE (
               START (1) END (2) EVERY (1),
               DEFAULT SUBPARTITION other_b )
( START (2002) END (2003) EVERY (1),
   DEFAULT PARTITION outlying_years );
NOTICE:  CREATE TABLE will create partition "foo_1_prt_outlying_years" for table "foo"
NOTICE:  CREATE TABLE will create partition "foo_1_prt_outlying_years_2_prt_other_a" for table "foo_1_prt_outlying_years"
NOTICE:  CREATE TABLE will create partition "foo_1_prt_outlying_years_2_prt_other_a_3_prt_other_b" for table "foo_1_prt_outlying_years_2_prt_other_a"
NOTICE:  CREATE TABLE will create partition "foo_1_prt_outlying_years_2_prt_other_a_3_prt_2" for table "foo_1_prt_outlying_years_2_prt_other_a"
NOTICE:  CREATE TABLE will create partition "foo_1_prt_outlying_years_2_prt_2" for table "foo_1_prt_outlying_years"
NOTICE:  CREATE TABLE will create partition "foo_1_prt_outlying_years_2_prt_2_3_prt_other_b" for table "foo_1_prt_outlying_years_2_prt_2"
NOTICE:  CREATE TABLE will create partition "foo_1_prt_outlying_years_2_prt_2_3_prt_2" for table "foo_1_prt_outlying_years_2_prt_2"
NOTICE:  CREATE TABLE will create partition "foo_1_prt_2" for table "foo"
NOTICE:  CREATE TABLE will create partition "foo_1_prt_2_2_prt_other_a" for table "foo_1_prt_2"
NOTICE:  CREATE TABLE will create partition "foo_1_prt_2_2_prt_other_a_3_prt_other_b" for table "foo_1_prt_2_2_prt_other_a"
NOTICE:  CREATE TABLE will create partition "foo_1_prt_2_2_prt_other_a_3_prt_2" for table "foo_1_prt_2_2_prt_other_a"
NOTICE:  CREATE TABLE will create partition "foo_1_prt_2_2_prt_2" for table "foo_1_prt_2"
NOTICE:  CREATE TABLE will create partition "foo_1_prt_2_2_prt_2_3_prt_other_b" for table "foo_1_prt_2_2_prt_2"
NOTICE:  CREATE TABLE will create partition "foo_1_prt_2_2_prt_2_3_prt_2" for table "foo_1_prt_2_2_prt_2"
CREATE TABLE ptable (c1 text, c2 float);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'c1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE ctable (c3 char(2)) INHERITS (ptable);
NOTICE:  Table has parent, setting distribution columns to match parent table
CREATE TABLE cctable (c4 char(2)) INHERITS (ctable);
NOTICE:  Table has parent, setting distribution columns to match parent table
