CREATE TABLE delete_test (
    id SERIAL PRIMARY KEY,
    a INT
) DISTRIBUTED BY (id);
NOTICE:  CREATE TABLE will create implicit sequence "delete_test_id_seq" for serial column "delete_test.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "delete_test_pkey" for table "delete_test"
INSERT INTO delete_test (a) VALUES (10);
INSERT INTO delete_test (a) VALUES (50);
INSERT INTO delete_test (a) VALUES (100);
-- allow an alias to be specified for DELETE's target table
DELETE FROM delete_test AS dt WHERE dt.a > 75;
-- if an alias is specified, don't allow the original table name
-- to be referenced
BEGIN;
SET LOCAL add_missing_from = false;
DELETE FROM delete_test dt WHERE delete_test.a > 25;
ERROR:  invalid reference to FROM-clause entry for table "delete_test"
LINE 1: DELETE FROM delete_test dt WHERE delete_test.a > 25;
                                         ^
HINT:  Perhaps you meant to reference the table alias "dt".
ROLLBACK;
SELECT * FROM delete_test;
 id | a  
----+----
  1 | 10
  2 | 50
(2 rows)

DROP TABLE delete_test;
--
-- MPP-28949: Fixup target lists of plans in appendplans of Append node
--
SET gp_autostats_mode = none;
CREATE TABLE foo_fixup (mrkt_id integer NOT NULL, acct_key bigint NOT NULL,
seq_nr numeric(10,0) NOT NULL)
DISTRIBUTED BY (mrkt_id ,acct_key) PARTITION BY LIST(mrkt_id)
(PARTITION it VALUES(50) WITH (tablename='foo_prt_it', appendonly=false ),
PARTITION pt VALUES(64) WITH (tablename='foo_prt_pt', appendonly=false ));
NOTICE:  CREATE TABLE will create partition "foo_prt_it" for table "foo_fixup"
NOTICE:  CREATE TABLE will create partition "foo_prt_pt" for table "foo_fixup"
INSERT INTO foo_fixup VALUES(50,6419293312,10);
INSERT INTO foo_fixup VALUES(50,6419293312,11);
INSERT INTO foo_fixup VALUES(50,6419293313,12);
INSERT INTO foo_fixup VALUES(64,6419293313,12);
CREATE TABLE bar_fixup (mrkt_id int, acct_key bigint, tran_dt_key int, misc_tran_typ_id int, lcl_bus_id int, seq_nr numeric(10,0));
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'mrkt_id' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO bar_fixup VALUES(50,6419293312,20170609,19961,423,10);
INSERT INTO bar_fixup VALUES(50,1483120867,20170609,19961,423,11);
INSERT INTO bar_fixup VALUES(50,1483120867,20170609,19961,423,12);
INSERT INTO bar_fixup VALUES(64,1483120867,20170609,19961,423,12);
EXPLAIN DELETE FROM foo_fixup f WHERE f.mrkt_id = 50 AND (f.mrkt_id,  f.seq_nr) IN (SELECT t.mrkt_id, t.seq_nr FROM bar_fixup t WHERE t.mrkt_id = 50);
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Delete (slice0; segments: 1)  (rows=12 width=15)
   ->  Append  (cost=710.46..2264.68 rows=12 width=15)
         ->  Explicit Redistribute Motion 1:1  (slice2; segments: 1)  (cost=710.46..1554.42 rows=6 width=10)
               ->  Hash Join  (cost=710.46..1554.42 rows=6 width=10)
                     Hash Cond: f.seq_nr = t.seq_nr
                     ->  Seq Scan on foo_prt_it f  (cost=0.00..843.75 rows=60 width=27)
                           Filter: mrkt_id = 50
                     ->  Hash  (cost=710.39..710.39 rows=5 width=17)
                           ->  Broadcast Motion 1:1  (slice1; segments: 1)  (cost=710.24..710.39 rows=5 width=17)
                                 ->  HashAggregate  (cost=710.24..710.29 rows=5 width=17)
                                       Group By: t.mrkt_id, t.seq_nr
                                       ->  Seq Scan on bar_fixup t  (cost=0.00..710.00 rows=49 width=17)
                                             Filter: mrkt_id = 50
         ->  HashAggregate  (cost=710.21..710.26 rows=6 width=20)
               Group By: f.ctid::bigint, f.gp_subplan_id
               ->  Hash Join  (cost=0.00..710.18 rows=6 width=20)
                     Hash Cond: t.seq_nr = f.seq_nr
                     ->  Seq Scan on bar_fixup t  (cost=0.00..710.00 rows=49 width=17)
                           Filter: mrkt_id = 50
                     ->  Hash  (cost=0.01..0.01 rows=1 width=0)
                           ->  Result  (cost=0.00..0.01 rows=1 width=0)
                                 One-Time Filter: false
 Optimizer status: legacy query optimizer
(23 rows)

DELETE FROM foo_fixup f WHERE f.mrkt_id = 50 AND (f.mrkt_id,  f.seq_nr) IN (SELECT t.mrkt_id, t.seq_nr FROM bar_fixup t WHERE t.mrkt_id = 50);
SELECT * FROM foo_fixup;
 mrkt_id |  acct_key  | seq_nr 
---------+------------+--------
      64 | 6419293313 |     12
(1 row)

DROP TABLE foo_fixup;
DROP TABLE bar_fixup;
RESET gp_autostats_mode;
