create table t_freegang_initplan(c int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'c' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
create or replace function f_freegang_initplan() returns int as
$$
begin
  insert into t_freegang_initplan select * from generate_series(1, 10);
  return 1;
end;
$$
language plpgsql;
\! gpfaultinjector -f free_gang_initplan -y reset -s 1
20190730:07:31:20:016413 gpfaultinjector:zlv:gpadmin-[INFO]:-Starting gpfaultinjector with args: -f free_gang_initplan -y reset -s 1
20190730:07:31:20:016413 gpfaultinjector:zlv:gpadmin-[INFO]:-Injecting fault on content=-1:dbid=1:mode=s:status=u
20190730:07:31:20:016413 gpfaultinjector:zlv:gpadmin-[INFO]:-DONE
\! gpfaultinjector -f free_gang_initplan -y skip -s 1
20190730:07:31:20:016426 gpfaultinjector:zlv:gpadmin-[INFO]:-Starting gpfaultinjector with args: -f free_gang_initplan -y skip -s 1
20190730:07:31:21:016426 gpfaultinjector:zlv:gpadmin-[INFO]:-Injecting fault on content=-1:dbid=1:mode=s:status=u
20190730:07:31:21:016426 gpfaultinjector:zlv:gpadmin-[INFO]:-DONE
-- the following query will generate initplan, and initplan should not
-- cleanup gang allocated to parent plan.
create table t_freegang_initplan_test as select f_freegang_initplan();
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'f_freegang_initplan' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
select * from t_freegang_initplan_test;
 f_freegang_initplan 
---------------------
                   1
(1 row)

drop function f_freegang_initplan();
drop table t_freegang_initplan;
drop table t_freegang_initplan_test;
