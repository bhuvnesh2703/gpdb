--
-- Nested loop join with index scan on CO table, test for MPP-17658
--
create schema co_nestloop_idxscan;
create table co_nestloop_idxscan.foo (id bigint, data text) with (appendonly=true, orientation=column)
distributed by (id);
create table co_nestloop_idxscan.bar (id bigint) distributed by (id);
-- Changing the text to be smaller doesn't repro the issue
insert into co_nestloop_idxscan.foo select 1, repeat('xxxxxxxxxx', 100000) from generate_series(1,5);
insert into co_nestloop_idxscan.bar values (1);
create index foo_id_idx on co_nestloop_idxscan.foo(id);
-- test with hash join
explain select f.id from co_nestloop_idxscan.foo f, co_nestloop_idxscan.bar b where f.id = b.id;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=1.02..154.15 rows=5 width=8)
   ->  Hash Join  (cost=1.02..154.15 rows=2 width=8)
         Hash Cond: f.id = b.id
         ->  Append-only Columnar Scan on foo f  (cost=0.00..153.05 rows=2 width=8)
         ->  Hash  (cost=1.01..1.01 rows=1 width=8)
               ->  Seq Scan on bar b  (cost=0.00..1.01 rows=1 width=8)
 Settings:  optimizer=off
 Optimizer status: legacy query optimizer
(8 rows)

select f.id from co_nestloop_idxscan.foo f, co_nestloop_idxscan.bar b where f.id = b.id;
 id 
----
  1
  1
  1
  1
  1
(5 rows)

-- test with nested loop join
set optimizer_enable_hashjoin = off;
set enable_hashjoin=off;
explain select f.id from co_nestloop_idxscan.foo f, co_nestloop_idxscan.bar b where f.id = b.id;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..154.12 rows=5 width=8)
   ->  Nested Loop  (cost=0.00..154.12 rows=2 width=8)
         Join Filter: f.id = b.id
         ->  Seq Scan on bar b  (cost=0.00..1.01 rows=1 width=8)
         ->  Append-only Columnar Scan on foo f  (cost=0.00..153.05 rows=2 width=8)
 Settings:  enable_hashjoin=off; optimizer=off
 Optimizer status: legacy query optimizer
(7 rows)

select f.id from co_nestloop_idxscan.foo f, co_nestloop_idxscan.bar b where f.id = b.id;
 id 
----
  1
  1
  1
  1
  1
(5 rows)

-- test with nested loop join and index scan
set enable_seqscan = off;
-- start_ignore
-- Known_opt_diff: OPT-929
-- end_ignore
explain select f.id from co_nestloop_idxscan.foo f, co_nestloop_idxscan.bar b where f.id = b.id;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=10000.38..10412.01 rows=5 width=8)
   ->  Nested Loop  (cost=10000.38..10412.01 rows=2 width=8)
         Join Filter: f.id = b.id
         ->  Seq Scan on bar b  (cost=0.00..1.01 rows=1 width=8)
         ->  Bitmap Append-Only Column-Oriented Scan on foo f  (cost=10000.38..10410.94 rows=2 width=8)
               ->  Bitmap Index Scan on foo_id_idx  (cost=0.00..10000.38 rows=2 width=0)
 Settings:  enable_hashjoin=off; enable_seqscan=off; optimizer=off
 Optimizer status: legacy query optimizer
(8 rows)

select f.id from co_nestloop_idxscan.foo f, co_nestloop_idxscan.bar b where f.id = b.id;
 id 
----
  1
  1
  1
  1
  1
(5 rows)

set optimizer_enable_hashjoin = on;
drop schema co_nestloop_idxscan cascade;
NOTICE:  drop cascades to table co_nestloop_idxscan.bar
NOTICE:  drop cascades to append only columnar table co_nestloop_idxscan.foo
