-- start query 1 in stream 0 using template query68.tpl
explain
select  c_last_name
       ,c_first_name
       ,ca_city
       ,bought_city
       ,ss_ticket_number
       ,extended_price
       ,extended_tax
       ,list_price
 from (select ss_ticket_number
             ,ss_customer_sk
             ,ca_city bought_city
             ,sum(ss_ext_sales_price) extended_price 
             ,sum(ss_ext_list_price) list_price
             ,sum(ss_ext_tax) extended_tax 
       from store_sales
           ,date_dim
           ,store
           ,household_demographics
           ,customer_address 
       where store_sales.ss_sold_date_sk = date_dim.d_date_sk
         and store_sales.ss_store_sk = store.s_store_sk  
        and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
        and store_sales.ss_addr_sk = customer_address.ca_address_sk
        and date_dim.d_dom between 1 and 2 
        and (household_demographics.hd_dep_count = 3 or
             household_demographics.hd_vehicle_count= -1)
        and date_dim.d_year in (2000,2000+1,2000+2)
        and store.s_city in ('Pine Grove','Oak Ridge')
       group by ss_ticket_number
               ,ss_customer_sk
               ,ss_addr_sk,ca_city) dn
      ,customer
      ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
   and customer.c_current_addr_sk = current_addr.ca_address_sk
   and current_addr.ca_city <> bought_city
 order by c_last_name
         ,ss_ticket_number
 limit 100;
                                                                                                   QUERY PLAN                                                                                                   
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.00..372751.44 rows=34 width=63)
   ->  Gather Motion 3:1  (slice7; segments: 3)  (cost=0.00..372751.43 rows=100 width=63)
         Merge Key: customer.c_last_name, store_sales.ss_ticket_number
         ->  Limit  (cost=0.00..372751.41 rows=34 width=63)
               ->  Sort  (cost=0.00..372751.41 rows=597149 width=63)
                     Sort Key: customer.c_last_name, store_sales.ss_ticket_number
                     ->  Hash Join  (cost=0.00..368658.52 rows=597149 width=63)
                           Hash Cond: (customer.c_current_addr_sk = customer_address_1.ca_address_sk)
                           Join Filter: ((customer_address_1.ca_city)::text <> (customer_address.ca_city)::text)
                           ->  Redistribute Motion 3:3  (slice6; segments: 3)  (cost=0.00..366677.61 rows=597149 width=58)
                                 Hash Key: customer.c_current_addr_sk
                                 ->  Hash Join  (cost=0.00..366569.21 rows=597149 width=58)
                                       Hash Cond: (customer.c_customer_sk = store_sales.ss_customer_sk)
                                       ->  Table Scan on customer  (cost=0.00..754.40 rows=3999967 width=21)
                                       ->  Hash  (cost=364121.30..364121.30 rows=597149 width=45)
                                             ->  Redistribute Motion 3:3  (slice5; segments: 3)  (cost=0.00..364121.30 rows=597149 width=45)
                                                   Hash Key: store_sales.ss_customer_sk
                                                   ->  Result  (cost=0.00..364037.19 rows=597149 width=45)
                                                         ->  HashAggregate  (cost=0.00..364037.19 rows=597149 width=45)
                                                               Group Key: store_sales.ss_ticket_number, store_sales.ss_customer_sk, store_sales.ss_addr_sk, customer_address.ca_city
                                                               ->  Hash Join  (cost=0.00..363723.44 rows=597149 width=44)
                                                                     Hash Cond: (customer_address.ca_address_sk = store_sales.ss_addr_sk)
                                                                     ->  Table Scan on customer_address  (cost=0.00..581.74 rows=2000530 width=13)
                                                                     ->  Hash  (cost=362103.69..362103.69 rows=597149 width=35)
                                                                           ->  Redistribute Motion 3:3  (slice4; segments: 3)  (cost=0.00..362103.69 rows=597149 width=35)
                                                                                 Hash Key: store_sales.ss_addr_sk
                                                                                 ->  Hash Join  (cost=0.00..362038.27 rows=597149 width=35)
                                                                                       Hash Cond: (store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk)
                                                                                       ->  Hash Join  (cost=0.00..361003.77 rows=2681297 width=39)
                                                                                             Hash Cond: (store_sales.ss_sold_date_sk = date_dim.d_date_sk)
                                                                                             ->  Hash Join  (cost=0.00..352796.23 rows=37037122 width=43)
                                                                                                   Hash Cond: (store_sales.ss_store_sk = store.s_store_sk)
                                                                                                   ->  Dynamic Table Scan on store_sales (dynamic scan id: 1)  (cost=0.00..68542.76 rows=959996672 width=47)
                                                                                                   ->  Hash  (cost=431.07..431.07 rows=20 width=4)
                                                                                                         ->  Broadcast Motion 3:3  (slice1; segments: 3)  (cost=0.00..431.07 rows=20 width=4)
                                                                                                               ->  Table Scan on store  (cost=0.00..431.06 rows=7 width=4)
                                                                                                                     Filter: ((s_city)::text = ANY ('{"Pine Grove","Oak Ridge"}'::text[]))
                                                                                             ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                                                   ->  Partition Selector for store_sales (dynamic scan id: 1)  (cost=10.00..100.00 rows=34 width=4)
                                                                                                         ->  Broadcast Motion 3:3  (slice2; segments: 3)  (cost=0.00..434.57 rows=132 width=4)
                                                                                                               ->  Table Scan on date_dim  (cost=0.00..434.56 rows=44 width=4)
                                                                                                                     Filter: ((d_dom >= 1) AND (d_dom <= 2) AND (d_year = ANY ('{2000,2001,2002}'::integer[])))
                                                                                       ->  Hash  (cost=431.36..431.36 rows=1605 width=4)
                                                                                             ->  Broadcast Motion 3:3  (slice3; segments: 3)  (cost=0.00..431.36 rows=1605 width=4)
                                                                                                   ->  Table Scan on household_demographics  (cost=0.00..431.24 rows=535 width=4)
                                                                                                         Filter: ((hd_dep_count = 3) OR (hd_vehicle_count = (-1)))
                           ->  Hash  (cost=581.74..581.74 rows=2000530 width=13)
                                 ->  Table Scan on customer_address customer_address_1  (cost=0.00..581.74 rows=2000530 width=13)
 Planning time: 1125.626 ms
 Optimizer: PQO version 3.8.0
(50 rows)

-- end query 1 in stream 0 using template query68.tpl
