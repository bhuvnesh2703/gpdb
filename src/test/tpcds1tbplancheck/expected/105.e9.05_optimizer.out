-- start query 1 in stream 0 using template query5.tpl
explain
with ssr as
 (select s_store_id,
        sum(sales_price) as sales,
        sum(profit) as profit,
        sum(return_amt) as returns,
        sum(net_loss) as profit_loss
 from
  ( select  ss_store_sk as store_sk,
            ss_sold_date_sk  as date_sk,
            ss_ext_sales_price as sales_price,
            ss_net_profit as profit,
            cast(0 as decimal(7,2)) as return_amt,
            cast(0 as decimal(7,2)) as net_loss
    from store_sales
    union all
    select sr_store_sk as store_sk,
           sr_returned_date_sk as date_sk,
           cast(0 as decimal(7,2)) as sales_price,
           cast(0 as decimal(7,2)) as profit,
           sr_return_amt as return_amt,
           sr_net_loss as net_loss
    from store_returns
   ) salesreturns,
     date_dim,
     store
 where date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date) 
                  and (cast('1998-08-04' as date) +  14 )
       and store_sk = s_store_sk
 group by s_store_id)
 ,
 csr as
 (select cp_catalog_page_id,
        sum(sales_price) as sales,
        sum(profit) as profit,
        sum(return_amt) as returns,
        sum(net_loss) as profit_loss
 from
  ( select  cs_catalog_page_sk as page_sk,
            cs_sold_date_sk  as date_sk,
            cs_ext_sales_price as sales_price,
            cs_net_profit as profit,
            cast(0 as decimal(7,2)) as return_amt,
            cast(0 as decimal(7,2)) as net_loss
    from catalog_sales
    union all
    select cr_catalog_page_sk as page_sk,
           cr_returned_date_sk as date_sk,
           cast(0 as decimal(7,2)) as sales_price,
           cast(0 as decimal(7,2)) as profit,
           cr_return_amount as return_amt,
           cr_net_loss as net_loss
    from catalog_returns
   ) salesreturns,
     date_dim,
     catalog_page
 where date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  14 )
       and page_sk = cp_catalog_page_sk
 group by cp_catalog_page_id)
 ,
 wsr as
 (select web_site_id,
        sum(sales_price) as sales,
        sum(profit) as profit,
        sum(return_amt) as returns,
        sum(net_loss) as profit_loss
 from
  ( select  ws_web_site_sk as wsr_web_site_sk,
            ws_sold_date_sk  as date_sk,
            ws_ext_sales_price as sales_price,
            ws_net_profit as profit,
            cast(0 as decimal(7,2)) as return_amt,
            cast(0 as decimal(7,2)) as net_loss
    from web_sales
    union all
    select ws_web_site_sk as wsr_web_site_sk,
           wr_returned_date_sk as date_sk,
           cast(0 as decimal(7,2)) as sales_price,
           cast(0 as decimal(7,2)) as profit,
           wr_return_amt as return_amt,
           wr_net_loss as net_loss
    from web_returns left outer join web_sales on
         ( wr_item_sk = ws_item_sk
           and wr_order_number = ws_order_number)
   ) salesreturns,
     date_dim,
     web_site
 where date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  14 )
       and wsr_web_site_sk = web_site_sk
 group by web_site_id)
  select  channel
        , id
        , sum(sales) as sales
        , sum(returns) as returns
        , sum(profit) as profit
 from 
 (select 'store channel' as channel
        , 'store' || s_store_id as id
        , sales
        , returns
        , (profit - profit_loss) as profit
 from   ssr
 union all
 select 'catalog channel' as channel
        , 'catalog_page' || cp_catalog_page_id as id
        , sales
        , returns
        , (profit - profit_loss) as profit
 from  csr
 union all
 select 'web channel' as channel
        , 'web_site' || web_site_id as id
        , sales
        , returns
        , (profit - profit_loss) as profit
 from   wsr
 ) x
 group by rollup (channel, id)
 order by channel
         ,id
 limit 100;
                                                                                                                        QUERY PLAN                                                                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=0.00..1125230.64 rows=34 width=40)
   Sort Key: share3_ref2.channel, share3_ref2.id
   ->  Limit  (cost=0.00..1125230.49 rows=34 width=40)
         ->  Gather Motion 3:1  (slice15; segments: 3)  (cost=0.00..1125230.48 rows=100 width=40)
               Merge Key: share3_ref2.channel, share3_ref2.id
               ->  Limit  (cost=0.00..1125230.47 rows=34 width=40)
                     ->  Sort  (cost=0.00..1125230.47 rows=564 width=40)
                           Sort Key: share3_ref2.channel, share3_ref2.id
                           ->  Sequence  (cost=0.00..1125229.30 rows=564 width=40)
                                 ->  Shared Scan (share slice:id 15:3)  (cost=0.00..1123929.43 rows=10176 width=1)
                                       ->  Materialize  (cost=0.00..1123929.43 rows=10176 width=1)
                                             ->  Append  (cost=0.00..1123929.42 rows=10176 width=40)
                                                   ->  Result  (cost=0.00..399300.34 rows=167 width=40)
                                                         ->  HashAggregate  (cost=0.00..399300.33 rows=167 width=49)
                                                               Group Key: store.s_store_id
                                                               ->  Redistribute Motion 3:3  (slice7; segments: 3)  (cost=0.00..399300.31 rows=167 width=49)
                                                                     Hash Key: store.s_store_id
                                                                     ->  Result  (cost=0.00..399300.28 rows=167 width=49)
                                                                           ->  HashAggregate  (cost=0.00..399300.28 rows=167 width=49)
                                                                                 Group Key: store.s_store_id
                                                                                 ->  Hash Join  (cost=0.00..398755.49 rows=3912764 width=45)
                                                                                       Hash Cond: (store_sales.ss_store_sk = store.s_store_sk)
                                                                                       ->  Hash Join  (cost=0.00..396947.15 rows=3932288 width=32)
                                                                                             Hash Cond: (store_sales.ss_sold_date_sk = date_dim.d_date_sk)
                                                                                             ->  Append  (cost=0.00..189389.08 rows=1055996672 width=36)
                                                                                                   ->  Result  (cost=0.00..138814.52 rows=959996672 width=36)
                                                                                                         ->  Dynamic Table Scan on store_sales (dynamic scan id: 1)  (cost=0.00..68542.76 rows=959996672 width=20)
                                                                                                   ->  Result  (cost=0.00..12558.68 rows=96000000 width=34)
                                                                                                         ->  Dynamic Table Scan on store_returns (dynamic scan id: 2)  (cost=0.00..6080.60 rows=96000000 width=18)
                                                                                             ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                                                   ->  Partition Selector for store_returns (dynamic scan id: 2)  (cost=10.00..100.00 rows=34 width=4)
                                                                                                         ->  Partition Selector for store_sales (dynamic scan id: 1)  (cost=10.00..100.00 rows=34 width=4)
                                                                                                               ->  Broadcast Motion 3:3  (slice5; segments: 3)  (cost=0.00..433.76 rows=15 width=4)
                                                                                                                     ->  Table Scan on date_dim  (cost=0.00..433.76 rows=5 width=4)
                                                                                                                           Filter: ((d_date >= '08-04-1998'::date) AND (d_date <= '08-18-1998'::date))
                                                                                       ->  Hash  (cost=431.44..431.44 rows=1002 width=21)
                                                                                             ->  Broadcast Motion 3:3  (slice6; segments: 3)  (cost=0.00..431.44 rows=1002 width=21)
                                                                                                   ->  Table Scan on store  (cost=0.00..431.05 rows=334 width=21)
                                                   ->  Result  (cost=0.00..208326.83 rows=10000 width=40)
                                                         ->  HashAggregate  (cost=0.00..208326.43 rows=10000 width=49)
                                                               Group Key: catalog_page.cp_catalog_page_id
                                                               ->  Redistribute Motion 3:3  (slice10; segments: 3)  (cost=0.00..208324.90 rows=10000 width=49)
                                                                     Hash Key: catalog_page.cp_catalog_page_id
                                                                     ->  Result  (cost=0.00..208323.36 rows=10000 width=49)
                                                                           ->  HashAggregate  (cost=0.00..208323.36 rows=10000 width=49)
                                                                                 Group Key: catalog_page.cp_catalog_page_id
                                                                                 ->  Hash Join  (cost=0.00..208090.99 rows=1667986 width=43)
                                                                                       Hash Cond: (catalog_sales.cs_catalog_page_sk = catalog_page.cp_catalog_page_sk)
                                                                                       ->  Hash Join  (cost=0.00..207010.76 rows=1917758 width=30)
                                                                                             Hash Cond: (catalog_sales.cs_sold_date_sk = date_dim_1.d_date_sk)
                                                                                             ->  Append  (cost=0.00..103677.96 rows=527992342 width=34)
                                                                                                   ->  Result  (cost=0.00..78492.32 rows=479993344 width=34)
                                                                                                         ->  Dynamic Table Scan on catalog_sales (dynamic scan id: 3)  (cost=0.00..46102.37 rows=479993344 width=18)
                                                                                                   ->  Result  (cost=0.00..7233.90 rows=47998998 width=34)
                                                                                                         ->  Dynamic Table Scan on catalog_returns (dynamic scan id: 4)  (cost=0.00..3994.93 rows=47998998 width=18)
                                                                                             ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                                                   ->  Partition Selector for catalog_returns (dynamic scan id: 4)  (cost=10.00..100.00 rows=34 width=4)
                                                                                                         ->  Partition Selector for catalog_sales (dynamic scan id: 3)  (cost=10.00..100.00 rows=34 width=4)
                                                                                                               ->  Broadcast Motion 3:3  (slice8; segments: 3)  (cost=0.00..433.76 rows=15 width=4)
                                                                                                                     ->  Table Scan on date_dim date_dim_1  (cost=0.00..433.76 rows=5 width=4)
                                                                                                                           Filter: ((d_date >= '08-04-1998'::date) AND (d_date <= '08-18-1998'::date))
                                                                                       ->  Hash  (cost=443.55..443.55 rows=30000 width=21)
                                                                                             ->  Broadcast Motion 3:3  (slice9; segments: 3)  (cost=0.00..443.55 rows=30000 width=21)
                                                                                                   ->  Table Scan on catalog_page  (cost=0.00..431.89 rows=10000 width=21)
                                                   ->  Result  (cost=0.00..516301.84 rows=9 width=40)
                                                         ->  HashAggregate  (cost=0.00..516301.84 rows=9 width=49)
                                                               Group Key: web_site.web_site_id
                                                               ->  Redistribute Motion 3:3  (slice14; segments: 3)  (cost=0.00..516301.84 rows=9 width=49)
                                                                     Hash Key: web_site.web_site_id
                                                                     ->  Result  (cost=0.00..516301.84 rows=9 width=49)
                                                                           ->  HashAggregate  (cost=0.00..516301.84 rows=9 width=49)
                                                                                 Group Key: web_site.web_site_id
                                                                                 ->  Hash Join  (cost=0.00..516233.84 rows=488430 width=43)
                                                                                       Hash Cond: (date_dim_2.d_date_sk = web_sales.ws_sold_date_sk)
                                                                                       ->  Table Scan on date_dim date_dim_2  (cost=0.00..433.76 rows=5 width=4)
                                                                                             Filter: ((d_date >= '08-04-1998'::date) AND (d_date <= '08-18-1998'::date))
                                                                                       ->  Hash  (cost=334050.90..334050.90 rows=137046647 width=47)
                                                                                             ->  Redistribute Motion 3:3  (slice13; segments: 3)  (cost=0.00..334050.90 rows=137046647 width=47)
                                                                                                   Hash Key: web_sales.ws_sold_date_sk
                                                                                                   ->  Hash Join  (cost=0.00..313889.97 rows=137046647 width=47)
                                                                                                         Hash Cond: (web_sales.ws_web_site_sk = web_site.web_site_sk)
                                                                                                         ->  Append  (cost=0.00..237108.31 rows=276631195 width=34)
                                                                                                               ->  Result  (cost=0.00..43254.20 rows=240000000 width=34)
                                                                                                                     ->  Sequence  (cost=0.00..22739.00 rows=240000000 width=18)
                                                                                                                           ->  Partition Selector for web_sales (dynamic scan id: 5)  (cost=10.00..100.00 rows=34 width=4)
                                                                                                                                 Partitions selected: 80 (out of 80)
                                                                                                                           ->  Dynamic Table Scan on web_sales (dynamic scan id: 5)  (cost=0.00..22739.00 rows=240000000 width=18)
                                                                                                               ->  Result  (cost=0.00..184448.65 rows=36631195 width=36)
                                                                                                                     ->  Hash Left Join  (cost=0.00..183129.93 rows=36631195 width=20)
                                                                                                                           Hash Cond: ((web_returns.wr_item_sk = web_sales_1.ws_item_sk) AND (web_returns.wr_order_number = web_sales_1.ws_order_number))
                                                                                                                           ->  Redistribute Motion 3:3  (slice11; segments: 3)  (cost=0.00..5570.66 rows=23999168 width=24)
                                                                                                                                 Hash Key: web_returns.wr_item_sk, web_returns.wr_order_number
                                                                                                                                 ->  Sequence  (cost=0.00..2120.54 rows=23999168 width=24)
                                                                                                                                       ->  Partition Selector for web_returns (dynamic scan id: 6)  (cost=10.00..100.00 rows=34 width=4)
                                                                                                                                             Partitions selected: 80 (out of 80)
                                                                                                                                       ->  Dynamic Table Scan on web_returns (dynamic scan id: 6)  (cost=0.00..2120.54 rows=23999168 width=24)
                                                                                                                           ->  Hash  (cost=22739.00..22739.00 rows=240000000 width=12)
                                                                                                                                 ->  Sequence  (cost=0.00..22739.00 rows=240000000 width=12)
                                                                                                                                       ->  Partition Selector for web_sales (dynamic scan id: 7)  (cost=10.00..100.00 rows=34 width=4)
                                                                                                                                             Partitions selected: 80 (out of 80)
                                                                                                                                       ->  Dynamic Table Scan on web_sales web_sales_1 (dynamic scan id: 7)  (cost=0.00..22739.00 rows=240000000 width=12)
                                                                                                         ->  Hash  (cost=431.02..431.02 rows=54 width=21)
                                                                                                               ->  Broadcast Motion 3:3  (slice12; segments: 3)  (cost=0.00..431.02 rows=54 width=21)
                                                                                                                     ->  Table Scan on web_site  (cost=0.00..431.00 rows=18 width=21)
                                 ->  Append  (cost=0.00..1299.85 rows=564 width=40)
                                       ->  HashAggregate  (cost=0.00..434.86 rows=563 width=40)
                                             Group Key: share3_ref2.channel, share3_ref2.id
                                             ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=0.00..434.71 rows=563 width=40)
                                                   Hash Key: share3_ref2.channel, share3_ref2.id
                                                   ->  Result  (cost=0.00..434.63 rows=563 width=40)
                                                         ->  HashAggregate  (cost=0.00..434.63 rows=563 width=40)
                                                               Group Key: share3_ref2.channel, share3_ref2.id
                                                               ->  Shared Scan (share slice:id 1:3)  (cost=0.00..431.98 rows=10176 width=40)
                                       ->  Result  (cost=0.00..433.13 rows=1 width=40)
                                             ->  GroupAggregate  (cost=0.00..433.13 rows=1 width=32)
                                                   Group Key: share3_ref3.channel
                                                   ->  Sort  (cost=0.00..433.13 rows=1 width=32)
                                                         Sort Key: share3_ref3.channel
                                                         ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=0.00..433.13 rows=1 width=32)
                                                               Hash Key: share3_ref3.channel
                                                               ->  Result  (cost=0.00..433.13 rows=1 width=32)
                                                                     ->  HashAggregate  (cost=0.00..433.13 rows=1 width=32)
                                                                           Group Key: share3_ref3.channel
                                                                           ->  Shared Scan (share slice:id 2:3)  (cost=0.00..431.78 rows=10176 width=32)
                                       ->  Result  (cost=0.00..431.83 rows=1 width=40)
                                             ->  Redistribute Motion 1:3  (slice4)  (cost=0.00..431.83 rows=1 width=24)
                                                   ->  Aggregate  (cost=0.00..431.83 rows=1 width=24)
                                                         ->  Gather Motion 3:1  (slice3; segments: 3)  (cost=0.00..431.83 rows=1 width=24)
                                                               ->  Aggregate  (cost=0.00..431.83 rows=1 width=24)
                                                                     ->  Shared Scan (share slice:id 3:3)  (cost=0.00..431.59 rows=10176 width=24)
 Planning time: 1482.685 ms
 Optimizer: PQO version 3.8.0
(132 rows)

-- end query 1 in stream 0 using template query5.tpl
