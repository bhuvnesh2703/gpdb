-- start query 1 in stream 0 using template query66.tpl
explain
select   
         w_warehouse_name
 	,w_warehouse_sq_ft
 	,w_city
 	,w_county
 	,w_state
 	,w_country
        ,ship_carriers
        ,year
 	,sum(jan_sales) as jan_sales
 	,sum(feb_sales) as feb_sales
 	,sum(mar_sales) as mar_sales
 	,sum(apr_sales) as apr_sales
 	,sum(may_sales) as may_sales
 	,sum(jun_sales) as jun_sales
 	,sum(jul_sales) as jul_sales
 	,sum(aug_sales) as aug_sales
 	,sum(sep_sales) as sep_sales
 	,sum(oct_sales) as oct_sales
 	,sum(nov_sales) as nov_sales
 	,sum(dec_sales) as dec_sales
 	,sum(jan_sales/w_warehouse_sq_ft) as jan_sales_per_sq_foot
 	,sum(feb_sales/w_warehouse_sq_ft) as feb_sales_per_sq_foot
 	,sum(mar_sales/w_warehouse_sq_ft) as mar_sales_per_sq_foot
 	,sum(apr_sales/w_warehouse_sq_ft) as apr_sales_per_sq_foot
 	,sum(may_sales/w_warehouse_sq_ft) as may_sales_per_sq_foot
 	,sum(jun_sales/w_warehouse_sq_ft) as jun_sales_per_sq_foot
 	,sum(jul_sales/w_warehouse_sq_ft) as jul_sales_per_sq_foot
 	,sum(aug_sales/w_warehouse_sq_ft) as aug_sales_per_sq_foot
 	,sum(sep_sales/w_warehouse_sq_ft) as sep_sales_per_sq_foot
 	,sum(oct_sales/w_warehouse_sq_ft) as oct_sales_per_sq_foot
 	,sum(nov_sales/w_warehouse_sq_ft) as nov_sales_per_sq_foot
 	,sum(dec_sales/w_warehouse_sq_ft) as dec_sales_per_sq_foot
 	,sum(jan_net) as jan_net
 	,sum(feb_net) as feb_net
 	,sum(mar_net) as mar_net
 	,sum(apr_net) as apr_net
 	,sum(may_net) as may_net
 	,sum(jun_net) as jun_net
 	,sum(jul_net) as jul_net
 	,sum(aug_net) as aug_net
 	,sum(sep_net) as sep_net
 	,sum(oct_net) as oct_net
 	,sum(nov_net) as nov_net
 	,sum(dec_net) as dec_net
 from (
    (select 
 	w_warehouse_name
 	,w_warehouse_sq_ft
 	,w_city
 	,w_county
 	,w_state
 	,w_country
 	,'DIAMOND' || ',' || 'AIRBORNE' as ship_carriers
       ,d_year as year
 	,sum(case when d_moy = 1 
 		then ws_sales_price* ws_quantity else 0 end) as jan_sales
 	,sum(case when d_moy = 2 
 		then ws_sales_price* ws_quantity else 0 end) as feb_sales
 	,sum(case when d_moy = 3 
 		then ws_sales_price* ws_quantity else 0 end) as mar_sales
 	,sum(case when d_moy = 4 
 		then ws_sales_price* ws_quantity else 0 end) as apr_sales
 	,sum(case when d_moy = 5 
 		then ws_sales_price* ws_quantity else 0 end) as may_sales
 	,sum(case when d_moy = 6 
 		then ws_sales_price* ws_quantity else 0 end) as jun_sales
 	,sum(case when d_moy = 7 
 		then ws_sales_price* ws_quantity else 0 end) as jul_sales
 	,sum(case when d_moy = 8 
 		then ws_sales_price* ws_quantity else 0 end) as aug_sales
 	,sum(case when d_moy = 9 
 		then ws_sales_price* ws_quantity else 0 end) as sep_sales
 	,sum(case when d_moy = 10 
 		then ws_sales_price* ws_quantity else 0 end) as oct_sales
 	,sum(case when d_moy = 11
 		then ws_sales_price* ws_quantity else 0 end) as nov_sales
 	,sum(case when d_moy = 12
 		then ws_sales_price* ws_quantity else 0 end) as dec_sales
 	,sum(case when d_moy = 1 
 		then ws_net_paid_inc_tax * ws_quantity else 0 end) as jan_net
 	,sum(case when d_moy = 2
 		then ws_net_paid_inc_tax * ws_quantity else 0 end) as feb_net
 	,sum(case when d_moy = 3 
 		then ws_net_paid_inc_tax * ws_quantity else 0 end) as mar_net
 	,sum(case when d_moy = 4 
 		then ws_net_paid_inc_tax * ws_quantity else 0 end) as apr_net
 	,sum(case when d_moy = 5 
 		then ws_net_paid_inc_tax * ws_quantity else 0 end) as may_net
 	,sum(case when d_moy = 6 
 		then ws_net_paid_inc_tax * ws_quantity else 0 end) as jun_net
 	,sum(case when d_moy = 7 
 		then ws_net_paid_inc_tax * ws_quantity else 0 end) as jul_net
 	,sum(case when d_moy = 8 
 		then ws_net_paid_inc_tax * ws_quantity else 0 end) as aug_net
 	,sum(case when d_moy = 9 
 		then ws_net_paid_inc_tax * ws_quantity else 0 end) as sep_net
 	,sum(case when d_moy = 10 
 		then ws_net_paid_inc_tax * ws_quantity else 0 end) as oct_net
 	,sum(case when d_moy = 11
 		then ws_net_paid_inc_tax * ws_quantity else 0 end) as nov_net
 	,sum(case when d_moy = 12
 		then ws_net_paid_inc_tax * ws_quantity else 0 end) as dec_net
     from
          web_sales
         ,warehouse
         ,date_dim
         ,time_dim
 	  ,ship_mode
     where
            ws_warehouse_sk =  w_warehouse_sk
        and ws_sold_date_sk = d_date_sk
        and ws_sold_time_sk = t_time_sk
 	and ws_ship_mode_sk = sm_ship_mode_sk
        and d_year = 2002
 	and t_time between 49530 and 49530+28800 
 	and sm_carrier in ('DIAMOND','AIRBORNE')
     group by 
        w_warehouse_name
 	,w_warehouse_sq_ft
 	,w_city
 	,w_county
 	,w_state
 	,w_country
       ,d_year
 	)
 union all
    (select 
 	w_warehouse_name
 	,w_warehouse_sq_ft
 	,w_city
 	,w_county
 	,w_state
 	,w_country
 	,'DIAMOND' || ',' || 'AIRBORNE' as ship_carriers
       ,d_year as year
 	,sum(case when d_moy = 1 
 		then cs_ext_sales_price* cs_quantity else 0 end) as jan_sales
 	,sum(case when d_moy = 2 
 		then cs_ext_sales_price* cs_quantity else 0 end) as feb_sales
 	,sum(case when d_moy = 3 
 		then cs_ext_sales_price* cs_quantity else 0 end) as mar_sales
 	,sum(case when d_moy = 4 
 		then cs_ext_sales_price* cs_quantity else 0 end) as apr_sales
 	,sum(case when d_moy = 5 
 		then cs_ext_sales_price* cs_quantity else 0 end) as may_sales
 	,sum(case when d_moy = 6 
 		then cs_ext_sales_price* cs_quantity else 0 end) as jun_sales
 	,sum(case when d_moy = 7 
 		then cs_ext_sales_price* cs_quantity else 0 end) as jul_sales
 	,sum(case when d_moy = 8 
 		then cs_ext_sales_price* cs_quantity else 0 end) as aug_sales
 	,sum(case when d_moy = 9 
 		then cs_ext_sales_price* cs_quantity else 0 end) as sep_sales
 	,sum(case when d_moy = 10 
 		then cs_ext_sales_price* cs_quantity else 0 end) as oct_sales
 	,sum(case when d_moy = 11
 		then cs_ext_sales_price* cs_quantity else 0 end) as nov_sales
 	,sum(case when d_moy = 12
 		then cs_ext_sales_price* cs_quantity else 0 end) as dec_sales
 	,sum(case when d_moy = 1 
 		then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as jan_net
 	,sum(case when d_moy = 2 
 		then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as feb_net
 	,sum(case when d_moy = 3 
 		then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as mar_net
 	,sum(case when d_moy = 4 
 		then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as apr_net
 	,sum(case when d_moy = 5 
 		then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as may_net
 	,sum(case when d_moy = 6 
 		then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as jun_net
 	,sum(case when d_moy = 7 
 		then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as jul_net
 	,sum(case when d_moy = 8 
 		then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as aug_net
 	,sum(case when d_moy = 9 
 		then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as sep_net
 	,sum(case when d_moy = 10 
 		then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as oct_net
 	,sum(case when d_moy = 11
 		then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as nov_net
 	,sum(case when d_moy = 12
 		then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as dec_net
     from
          catalog_sales
         ,warehouse
         ,date_dim
         ,time_dim
 	 ,ship_mode
     where
            cs_warehouse_sk =  w_warehouse_sk
        and cs_sold_date_sk = d_date_sk
        and cs_sold_time_sk = t_time_sk
 	and cs_ship_mode_sk = sm_ship_mode_sk
        and d_year = 2002
 	and t_time between 49530 AND 49530+28800 
 	and sm_carrier in ('DIAMOND','AIRBORNE')
     group by 
        w_warehouse_name
 	,w_warehouse_sq_ft
 	,w_city
 	,w_county
 	,w_state
 	,w_country
       ,d_year
     ) 
 ) x
 group by 
        w_warehouse_name
 	,w_warehouse_sq_ft
 	,w_city
 	,w_county
 	,w_state
 	,w_country
 	,ship_carriers
       ,year
 order by w_warehouse_name
 limit 100;
                                                                                                               QUERY PLAN                                                                                                                
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.00..285777.99 rows=14 width=363)
   ->  Gather Motion 3:1  (slice11; segments: 3)  (cost=0.00..285777.98 rows=40 width=363)
         Merge Key: warehouse.w_warehouse_name
         ->  GroupAggregate  (cost=0.00..285777.92 rows=14 width=363)
               Group Key: warehouse.w_warehouse_name, warehouse.w_warehouse_sq_ft, warehouse.w_city, warehouse.w_county, warehouse.w_state, warehouse.w_country, "outer".ship_carriers, date_dim.d_year
               ->  Sort  (cost=0.00..285777.92 rows=14 width=267)
                     Sort Key: warehouse.w_warehouse_name, warehouse.w_warehouse_sq_ft, warehouse.w_city, warehouse.w_county, warehouse.w_state, warehouse.w_country, "outer".ship_carriers, date_dim.d_year
                     ->  Append  (cost=0.00..285777.84 rows=14 width=267)
                           ->  Result  (cost=0.00..95593.99 rows=7 width=267)
                                 ->  HashAggregate  (cost=0.00..95593.99 rows=7 width=259)
                                       Group Key: warehouse.w_warehouse_name, warehouse.w_warehouse_sq_ft, warehouse.w_city, warehouse.w_county, warehouse.w_state, warehouse.w_country, date_dim.d_year
                                       ->  Redistribute Motion 3:3  (slice5; segments: 3)  (cost=0.00..95593.98 rows=7 width=259)
                                             Hash Key: warehouse.w_warehouse_name, warehouse.w_warehouse_sq_ft, warehouse.w_city, warehouse.w_county, warehouse.w_state, warehouse.w_country, date_dim.d_year
                                             ->  Result  (cost=0.00..95593.98 rows=7 width=259)
                                                   ->  HashAggregate  (cost=0.00..95593.98 rows=7 width=259)
                                                         Group Key: warehouse.w_warehouse_name, warehouse.w_warehouse_sq_ft, warehouse.w_city, warehouse.w_county, warehouse.w_state, warehouse.w_country, date_dim.d_year
                                                         ->  Hash Join  (cost=0.00..93790.81 rows=1616166 width=86)
                                                               Hash Cond: (web_sales.ws_warehouse_sk = warehouse.w_warehouse_sk)
                                                               ->  Hash Join  (cost=0.00..92565.82 rows=1616166 width=27)
                                                                     Hash Cond: (web_sales.ws_sold_time_sk = time_dim.t_time_sk)
                                                                     ->  Hash Join  (cost=0.00..91042.33 rows=4821717 width=31)
                                                                           Hash Cond: (web_sales.ws_sold_date_sk = date_dim.d_date_sk)
                                                                           ->  Hash Join  (cost=0.00..85519.36 rows=24000000 width=27)
                                                                                 Hash Cond: (web_sales.ws_ship_mode_sk = ship_mode.sm_ship_mode_sk)
                                                                                 ->  Dynamic Table Scan on web_sales (dynamic scan id: 1)  (cost=0.00..22739.00 rows=240000000 width=31)
                                                                                 ->  Hash  (cost=431.00..431.00 rows=2 width=4)
                                                                                       ->  Broadcast Motion 3:3  (slice1; segments: 3)  (cost=0.00..431.00 rows=2 width=4)
                                                                                             ->  Table Scan on ship_mode  (cost=0.00..431.00 rows=1 width=4)
                                                                                                   Filter: ((sm_carrier)::text = ANY ('{DIAMOND,AIRBORNE}'::text[]))
                                                                           ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                                 ->  Partition Selector for web_sales (dynamic scan id: 1)  (cost=10.00..100.00 rows=34 width=4)
                                                                                       ->  Broadcast Motion 3:3  (slice2; segments: 3)  (cost=0.00..433.84 rows=366 width=12)
                                                                                             ->  Table Scan on date_dim  (cost=0.00..433.76 rows=122 width=12)
                                                                                                   Filter: (d_year = 2002)
                                                                     ->  Hash  (cost=436.25..436.25 rows=28691 width=4)
                                                                           ->  Broadcast Motion 3:3  (slice3; segments: 3)  (cost=0.00..436.25 rows=28691 width=4)
                                                                                 ->  Table Scan on time_dim  (cost=0.00..434.20 rows=9564 width=4)
                                                                                       Filter: ((t_time >= 49530) AND (t_time <= 78330))
                                                               ->  Hash  (cost=431.03..431.03 rows=20 width=67)
                                                                     ->  Broadcast Motion 3:3  (slice4; segments: 3)  (cost=0.00..431.03 rows=20 width=67)
                                                                           ->  Table Scan on warehouse  (cost=0.00..431.00 rows=7 width=67)
                           ->  Result  (cost=0.00..190183.85 rows=7 width=267)
                                 ->  HashAggregate  (cost=0.00..190183.85 rows=7 width=259)
                                       Group Key: warehouse_1.w_warehouse_name, warehouse_1.w_warehouse_sq_ft, warehouse_1.w_city, warehouse_1.w_county, warehouse_1.w_state, warehouse_1.w_country, date_dim_1.d_year
                                       ->  Redistribute Motion 3:3  (slice10; segments: 3)  (cost=0.00..190183.84 rows=7 width=259)
                                             Hash Key: warehouse_1.w_warehouse_name, warehouse_1.w_warehouse_sq_ft, warehouse_1.w_city, warehouse_1.w_county, warehouse_1.w_state, warehouse_1.w_country, date_dim_1.d_year
                                             ->  Result  (cost=0.00..190183.83 rows=7 width=259)
                                                   ->  HashAggregate  (cost=0.00..190183.83 rows=7 width=259)
                                                         Group Key: warehouse_1.w_warehouse_name, warehouse_1.w_warehouse_sq_ft, warehouse_1.w_city, warehouse_1.w_county, warehouse_1.w_state, warehouse_1.w_country, date_dim_1.d_year
                                                         ->  Hash Join  (cost=0.00..186939.18 rows=2908162 width=87)
                                                               Hash Cond: (catalog_sales.cs_warehouse_sk = warehouse_1.w_warehouse_sk)
                                                               ->  Hash Join  (cost=0.00..185039.81 rows=3053570 width=28)
                                                                     Hash Cond: (catalog_sales.cs_sold_time_sk = time_dim_1.t_time_sk)
                                                                     ->  Hash Join  (cost=0.00..182538.18 rows=9108938 width=32)
                                                                           Hash Cond: (catalog_sales.cs_sold_date_sk = date_dim_1.d_date_sk)
                                                                           ->  Hash Join  (cost=0.00..172359.46 rows=45713652 width=28)
                                                                                 Hash Cond: (catalog_sales.cs_ship_mode_sk = ship_mode_1.sm_ship_mode_sk)
                                                                                 ->  Dynamic Table Scan on catalog_sales (dynamic scan id: 2)  (cost=0.00..46102.37 rows=479993344 width=32)
                                                                                 ->  Hash  (cost=431.00..431.00 rows=2 width=4)
                                                                                       ->  Broadcast Motion 3:3  (slice6; segments: 3)  (cost=0.00..431.00 rows=2 width=4)
                                                                                             ->  Table Scan on ship_mode ship_mode_1  (cost=0.00..431.00 rows=1 width=4)
                                                                                                   Filter: ((sm_carrier)::text = ANY ('{DIAMOND,AIRBORNE}'::text[]))
                                                                           ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                                 ->  Partition Selector for catalog_sales (dynamic scan id: 2)  (cost=10.00..100.00 rows=34 width=4)
                                                                                       ->  Broadcast Motion 3:3  (slice7; segments: 3)  (cost=0.00..433.84 rows=366 width=12)
                                                                                             ->  Table Scan on date_dim date_dim_1  (cost=0.00..433.76 rows=122 width=12)
                                                                                                   Filter: (d_year = 2002)
                                                                     ->  Hash  (cost=436.25..436.25 rows=28691 width=4)
                                                                           ->  Broadcast Motion 3:3  (slice8; segments: 3)  (cost=0.00..436.25 rows=28691 width=4)
                                                                                 ->  Table Scan on time_dim time_dim_1  (cost=0.00..434.20 rows=9564 width=4)
                                                                                       Filter: ((t_time >= 49530) AND (t_time <= 78330))
                                                               ->  Hash  (cost=431.03..431.03 rows=20 width=67)
                                                                     ->  Broadcast Motion 3:3  (slice9; segments: 3)  (cost=0.00..431.03 rows=20 width=67)
                                                                           ->  Table Scan on warehouse warehouse_1  (cost=0.00..431.00 rows=7 width=67)
 Planning time: 1373.698 ms
 Optimizer: PQO version 3.8.0
(76 rows)

-- end query 1 in stream 0 using template query66.tpl
