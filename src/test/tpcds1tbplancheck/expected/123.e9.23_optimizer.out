-- start query 1 in stream 0 using template query23.tpl
explain
with frequent_ss_items as 
 (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim 
      ,item
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = i_item_sk 
    and d_year in (1999,1999+1,1999+2,1999+3)
  group by substr(i_item_desc,1,30),i_item_sk,d_date
  having count(*) >4),
 max_store_sales as
 (select max(csales) tpcds_cmax 
  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
        from store_sales
            ,customer
            ,date_dim 
        where ss_customer_sk = c_customer_sk
         and ss_sold_date_sk = d_date_sk
         and d_year in (1999,1999+1,1999+2,1999+3) 
        group by c_customer_sk) x),
 best_ss_customer as
 (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
  from store_sales
      ,customer
  where ss_customer_sk = c_customer_sk
  group by c_customer_sk
  having sum(ss_quantity*ss_sales_price) > (95/100.0) * (select
  *
from
 max_store_sales))
  select  sum(sales)
 from ((select cs_quantity*cs_list_price sales
       from catalog_sales
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and cs_sold_date_sk = d_date_sk 
         and cs_item_sk in (select item_sk from frequent_ss_items)
         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer))
      union all
      (select ws_quantity*ws_list_price sales
       from web_sales 
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and ws_sold_date_sk = d_date_sk 
         and ws_item_sk in (select item_sk from frequent_ss_items)
         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer))) y
 limit 100;
                                                                                                                                     QUERY PLAN                                                                                                                                      
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice21; segments: 3)  (cost=0.00..1076039553.87 rows=1 width=8)
   ->  Sequence  (cost=0.00..1076039553.87 rows=1 width=8)
         ->  Shared Scan (share slice:id 21:0)  (cost=0.00..1055362.48 rows=32811985 width=1)
               ->  Materialize  (cost=0.00..1055362.48 rows=32811985 width=1)
                     ->  Result  (cost=0.00..1055329.67 rows=32811985 width=24)
                           Filter: ((count((count()))) > 4)
                           ->  HashAggregate  (cost=0.00..1052630.88 rows=82029962 width=24)
                                 Group Key: (substr((item.i_item_desc)::text, 1, 30)), item.i_item_sk, date_dim_3.d_date
                                 ->  Redistribute Motion 3:3  (slice20; segments: 3)  (cost=0.00..1021334.16 rows=82029962 width=24)
                                       Hash Key: (substr((item.i_item_desc)::text, 1, 30)), item.i_item_sk, date_dim_3.d_date
                                       ->  Result  (cost=0.00..1015172.07 rows=82029962 width=24)
                                             ->  HashAggregate  (cost=0.00..1015172.07 rows=82029962 width=24)
                                                   Group Key: substr((item.i_item_desc)::text, 1, 30), item.i_item_sk, date_dim_3.d_date
                                                   ->  Result  (cost=0.00..725436.41 rows=771575555 width=16)
                                                         ->  Hash Join  (cost=0.00..713091.20 rows=771575555 width=110)
                                                               Hash Cond: (store_sales_2.ss_item_sk = item.i_item_sk)
                                                               ->  Hash Join  (cost=0.00..276390.56 rows=771575555 width=8)
                                                                     Hash Cond: (store_sales_2.ss_sold_date_sk = date_dim_3.d_date_sk)
                                                                     ->  Dynamic Table Scan on store_sales store_sales_2 (dynamic scan id: 1)  (cost=0.00..68542.76 rows=959996672 width=8)
                                                                     ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                           ->  Partition Selector for store_sales (dynamic scan id: 1)  (cost=10.00..100.00 rows=34 width=4)
                                                                                 ->  Broadcast Motion 3:3  (slice18; segments: 3)  (cost=0.00..433.98 rows=1462 width=8)
                                                                                       ->  Table Scan on date_dim date_dim_3  (cost=0.00..433.77 rows=488 width=8)
                                                                                             Filter: (d_year = ANY ('{1999,2000,2001,2002}'::integer[]))
                                                               ->  Hash  (cost=1035.14..1035.14 rows=299247 width=106)
                                                                     ->  Broadcast Motion 3:3  (slice19; segments: 3)  (cost=0.00..1035.14 rows=299247 width=106)
                                                                           ->  Table Scan on item  (cost=0.00..447.68 rows=99749 width=106)
         ->  Sequence  (cost=0.00..1074984191.39 rows=1 width=8)
               ->  Shared Scan (share slice:id 21:2)  (cost=0.00..1074704654.34 rows=1291053 width=1)
                     ->  Materialize  (cost=0.00..1074704654.34 rows=1291053 width=1)
                           ->  Nested Loop  (cost=0.00..1074704653.05 rows=1291053 width=12)
                                 Join Filter: ((pg_catalog.sum((sum(((store_sales.ss_quantity)::numeric * store_sales.ss_sales_price))))) > (0.95000000000000000000 * (max((max((pg_catalog.sum((sum(((store_sales_1.ss_quantity)::numeric * store_sales_1.ss_sales_price)))))))))))
                                 ->  Broadcast Motion 1:3  (slice17)  (cost=0.00..595477.00 rows=3 width=8)
                                       ->  Aggregate  (cost=0.00..595477.00 rows=1 width=8)
                                             ->  Gather Motion 3:1  (slice16; segments: 3)  (cost=0.00..595477.00 rows=1 width=8)
                                                   ->  Aggregate  (cost=0.00..595477.00 rows=1 width=8)
                                                         ->  HashAggregate  (cost=0.00..595474.11 rows=3227631 width=8)
                                                               Group Key: customer_1.c_customer_sk
                                                               ->  Redistribute Motion 3:3  (slice15; segments: 3)  (cost=0.00..595069.41 rows=3227631 width=12)
                                                                     Hash Key: customer_1.c_customer_sk
                                                                     ->  Result  (cost=0.00..594948.18 rows=3227631 width=12)
                                                                           ->  HashAggregate  (cost=0.00..594948.18 rows=3227631 width=12)
                                                                                 Group Key: customer_1.c_customer_sk
                                                                                 ->  Hash Join  (cost=0.00..498714.13 rows=771575555 width=14)
                                                                                       Hash Cond: (store_sales_1.ss_customer_sk = customer_1.c_customer_sk)
                                                                                       ->  Hash Join  (cost=0.00..316295.71 rows=771575555 width=14)
                                                                                             Hash Cond: (store_sales_1.ss_sold_date_sk = date_dim_2.d_date_sk)
                                                                                             ->  Dynamic Table Scan on store_sales store_sales_1 (dynamic scan id: 2)  (cost=0.00..68542.76 rows=959996672 width=18)
                                                                                             ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                                                   ->  Partition Selector for store_sales (dynamic scan id: 2)  (cost=10.00..100.00 rows=34 width=4)
                                                                                                         ->  Broadcast Motion 3:3  (slice13; segments: 3)  (cost=0.00..433.87 rows=1462 width=4)
                                                                                                               ->  Table Scan on date_dim date_dim_2  (cost=0.00..433.76 rows=488 width=4)
                                                                                                                     Filter: (d_year = ANY ('{1999,2000,2001,2002}'::integer[]))
                                                                                       ->  Hash  (cost=1643.35..1643.35 rows=11999900 width=4)
                                                                                             ->  Broadcast Motion 3:3  (slice14; segments: 3)  (cost=0.00..1643.35 rows=11999900 width=4)
                                                                                                   ->  Table Scan on customer customer_1  (cost=0.00..754.40 rows=3999967 width=4)
                                 ->  HashAggregate  (cost=0.00..453291.54 rows=3227631 width=12)
                                       Group Key: customer.c_customer_sk
                                       ->  Materialize  (cost=0.00..452878.16 rows=3227631 width=12)
                                             ->  Redistribute Motion 3:3  (slice12; segments: 3)  (cost=0.00..452839.43 rows=3227631 width=12)
                                                   Hash Key: customer.c_customer_sk
                                                   ->  Result  (cost=0.00..452718.20 rows=3227631 width=12)
                                                         ->  HashAggregate  (cost=0.00..452718.20 rows=3227631 width=12)
                                                               Group Key: customer.c_customer_sk
                                                               ->  Hash Join  (cost=0.00..332986.15 rows=959996672 width=14)
                                                                     Hash Cond: (store_sales.ss_customer_sk = customer.c_customer_sk)
                                                                     ->  Sequence  (cost=0.00..68542.76 rows=959996672 width=14)
                                                                           ->  Partition Selector for store_sales (dynamic scan id: 3)  (cost=10.00..100.00 rows=34 width=4)
                                                                                 Partitions selected: 80 (out of 80)
                                                                           ->  Dynamic Table Scan on store_sales (dynamic scan id: 3)  (cost=0.00..68542.76 rows=959996672 width=14)
                                                                     ->  Hash  (cost=1643.35..1643.35 rows=11999900 width=4)
                                                                           ->  Broadcast Motion 3:3  (slice11; segments: 3)  (cost=0.00..1643.35 rows=11999900 width=4)
                                                                                 ->  Table Scan on customer  (cost=0.00..754.40 rows=3999967 width=4)
               ->  Redistribute Motion 1:3  (slice10)  (cost=0.00..279537.05 rows=1 width=8)
                     ->  Limit  (cost=0.00..279537.05 rows=1 width=8)
                           ->  Aggregate  (cost=0.00..279537.05 rows=1 width=8)
                                 ->  Gather Motion 3:1  (slice9; segments: 3)  (cost=0.00..279537.05 rows=1 width=8)
                                       ->  Aggregate  (cost=0.00..279537.05 rows=1 width=8)
                                             ->  Append  (cost=0.00..279519.03 rows=20112123 width=8)
                                                   ->  Result  (cost=0.00..180341.99 rows=13131181 width=8)
                                                         ->  Hash Semi Join  (cost=0.00..180236.94 rows=13131181 width=9)
                                                               Hash Cond: (catalog_sales.cs_bill_customer_sk = share2_ref2.c_customer_sk)
                                                               ->  Redistribute Motion 3:3  (slice4; segments: 3)  (cost=0.00..176223.35 rows=13878824 width=13)
                                                                     Hash Key: catalog_sales.cs_bill_customer_sk
                                                                     ->  Hash Join  (cost=0.00..175658.62 rows=13878824 width=13)
                                                                           Hash Cond: (catalog_sales.cs_item_sk = share0_ref2.i_item_sk)
                                                                           ->  Hash Join  (cost=0.00..155692.68 rows=14213781 width=17)
                                                                                 Hash Cond: (catalog_sales.cs_sold_date_sk = date_dim.d_date_sk)
                                                                                 ->  Dynamic Table Scan on catalog_sales (dynamic scan id: 4)  (cost=0.00..46102.37 rows=479993344 width=21)
                                                                                 ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                                       ->  Partition Selector for catalog_sales (dynamic scan id: 4)  (cost=10.00..100.00 rows=34 width=4)
                                                                                             ->  Broadcast Motion 3:3  (slice1; segments: 3)  (cost=0.00..434.56 rows=55 width=4)
                                                                                                   ->  Table Scan on date_dim  (cost=0.00..434.56 rows=19 width=4)
                                                                                                         Filter: ((d_year = 1999) AND (d_moy = 1))
                                                                           ->  Hash  (cost=16662.53..16662.53 rows=285197 width=4)
                                                                                 ->  Broadcast Motion 3:3  (slice3; segments: 3)  (cost=0.00..16662.53 rows=285197 width=4)
                                                                                       ->  HashAggregate  (cost=0.00..16642.11 rows=95066 width=4)
                                                                                             Group Key: share0_ref2.i_item_sk
                                                                                             ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=0.00..16630.45 rows=95066 width=4)
                                                                                                   Hash Key: share0_ref2.i_item_sk
                                                                                                   ->  HashAggregate  (cost=0.00..16629.26 rows=95066 width=4)
                                                                                                         Group Key: share0_ref2.i_item_sk
                                                                                                         ->  Shared Scan (share slice:id 2:0)  (cost=0.00..1621.08 rows=123452089 width=4)
                                                               ->  Hash  (cost=462.11..462.11 rows=3227631 width=4)
                                                                     ->  Shared Scan (share slice:id 9:2)  (cost=0.00..462.11 rows=3227631 width=4)
                                                   ->  Result  (cost=0.00..99016.14 rows=6980943 width=8)
                                                         ->  Hash Semi Join  (cost=0.00..98960.29 rows=6980943 width=9)
                                                               Hash Cond: (web_sales.ws_bill_customer_sk = share2_ref3.c_customer_sk)
                                                               ->  Redistribute Motion 3:3  (slice8; segments: 3)  (cost=0.00..96393.89 rows=6980943 width=13)
                                                                     Hash Key: web_sales.ws_bill_customer_sk
                                                                     ->  Hash Join  (cost=0.00..96109.84 rows=6980943 width=13)
                                                                           Hash Cond: (web_sales.ws_item_sk = share0_ref3.i_item_sk)
                                                                           ->  Hash Join  (cost=0.00..77755.69 rows=7165628 width=17)
                                                                                 Hash Cond: (web_sales.ws_sold_date_sk = date_dim_1.d_date_sk)
                                                                                 ->  Dynamic Table Scan on web_sales (dynamic scan id: 5)  (cost=0.00..22739.00 rows=240000000 width=21)
                                                                                 ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                                       ->  Partition Selector for web_sales (dynamic scan id: 5)  (cost=10.00..100.00 rows=34 width=4)
                                                                                             ->  Broadcast Motion 3:3  (slice5; segments: 3)  (cost=0.00..434.56 rows=55 width=4)
                                                                                                   ->  Table Scan on date_dim date_dim_1  (cost=0.00..434.56 rows=19 width=4)
                                                                                                         Filter: ((d_year = 1999) AND (d_moy = 1))
                                                                           ->  Hash  (cost=16662.53..16662.53 rows=285197 width=4)
                                                                                 ->  Broadcast Motion 3:3  (slice7; segments: 3)  (cost=0.00..16662.53 rows=285197 width=4)
                                                                                       ->  HashAggregate  (cost=0.00..16642.11 rows=95066 width=4)
                                                                                             Group Key: share0_ref3.i_item_sk
                                                                                             ->  Redistribute Motion 3:3  (slice6; segments: 3)  (cost=0.00..16630.45 rows=95066 width=4)
                                                                                                   Hash Key: share0_ref3.i_item_sk
                                                                                                   ->  HashAggregate  (cost=0.00..16629.26 rows=95066 width=4)
                                                                                                         Group Key: share0_ref3.i_item_sk
                                                                                                         ->  Shared Scan (share slice:id 6:0)  (cost=0.00..1621.08 rows=123452089 width=4)
                                                               ->  Hash  (cost=462.11..462.11 rows=3227631 width=4)
                                                                     ->  Shared Scan (share slice:id 9:2)  (cost=0.00..462.11 rows=3227631 width=4)
 Planning time: 1881.196 ms
 Optimizer: PQO version 3.8.0
(133 rows)

with frequent_ss_items as
 (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim
      ,item
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = i_item_sk
    and d_year in (1999,1999 + 1,1999 + 2,1999 + 3)
  group by substr(i_item_desc,1,30),i_item_sk,d_date
  having count(*) >4),
 max_store_sales as
 (select max(csales) tpcds_cmax
  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
        from store_sales
            ,customer
            ,date_dim 
        where ss_customer_sk = c_customer_sk
         and ss_sold_date_sk = d_date_sk
         and d_year in (1999,1999+1,1999+2,1999+3)
        group by c_customer_sk) x),
 best_ss_customer as
 (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
  from store_sales
      ,customer
  where ss_customer_sk = c_customer_sk
  group by c_customer_sk
  having sum(ss_quantity*ss_sales_price) > (95/100.0) * (select
  *
 from max_store_sales))
  select  c_last_name,c_first_name,sales
 from ((select c_last_name,c_first_name,sum(cs_quantity*cs_list_price) sales
        from catalog_sales
            ,customer
            ,date_dim 
        where d_year = 1999 
         and d_moy = 1 
         and cs_sold_date_sk = d_date_sk 
         and cs_item_sk in (select item_sk from frequent_ss_items)
         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer)
         and cs_bill_customer_sk = c_customer_sk 
       group by c_last_name,c_first_name)
      union all
      (select c_last_name,c_first_name,sum(ws_quantity*ws_list_price) sales
       from web_sales
           ,customer
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and ws_sold_date_sk = d_date_sk 
         and ws_item_sk in (select item_sk from frequent_ss_items)
         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer)
         and ws_bill_customer_sk = c_customer_sk
       group by c_last_name,c_first_name)) y
     order by c_last_name,c_first_name,sales
  limit 100;
 c_last_name | c_first_name | sales 
-------------+--------------+-------
(0 rows)

-- end query 1 in stream 0 using template query23.tpl
