-- start query 1 in stream 0 using template query70.tpl
explain
select  * from (
  select
    sum(ss_net_profit) as total_sum
   ,s_state
   ,s_county
   ,grouping(s_state)+grouping(s_county) as lochierarchy
   ,rank() over (
 	partition by grouping(s_state)+grouping(s_county),
 	case when grouping(s_county) = 0 then s_state end 
 	order by sum(ss_net_profit) desc) as rank_within_parent
 from
    store_sales
   ,date_dim       d1
   ,store
 where
    d1.d_month_seq between 1212 and 1212+11
 and d1.d_date_sk = ss_sold_date_sk
 and s_store_sk  = ss_store_sk
 and s_state in
             ( select s_state
               from  (select s_state as s_state,
 			    rank() over ( partition by s_state order by sum(ss_net_profit) desc) as ranking
                      from   store_sales, store, date_dim
                      where  d_month_seq between 1212 and 1212+11
 			    and d_date_sk = ss_sold_date_sk
 			    and s_store_sk  = ss_store_sk
                      group by s_state
                     ) tmp1 
               where ranking <= 5
             )
 group by rollup(s_state,s_county)
 ) Sub
 order by
   lochierarchy desc
  ,case when lochierarchy = 0 then s_state end
  ,rank_within_parent
 limit 100;
                                                                                                                                            QUERY PLAN                                                                                                                                             
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Result  (cost=0.00..692056.24 rows=34 width=40)
   ->  Limit  (cost=0.00..692056.24 rows=34 width=40)
         ->  Gather Motion 3:1  (slice12; segments: 3)  (cost=0.00..692056.24 rows=100 width=48)
               Merge Key: (("outer".att_4 + "outer".att_5)), (CASE WHEN ((("outer".att_4 + "outer".att_5)) = 0) THEN share0_ref2.s_state ELSE NULL::character varying END), (rank() OVER (?))
               ->  Limit  (cost=0.00..692056.22 rows=34 width=48)
                     ->  Sort  (cost=0.00..692056.22 rows=124 width=48)
                           Sort Key: (("outer".att_4 + "outer".att_5)), (CASE WHEN ((("outer".att_4 + "outer".att_5)) = 0) THEN share0_ref2.s_state ELSE NULL::character varying END), (rank() OVER (?))
                           ->  Result  (cost=0.00..692055.99 rows=124 width=48)
                                 ->  WindowAgg  (cost=0.00..692055.98 rows=124 width=35)
                                       Partition By: (("outer".att_4 + "outer".att_5)), (CASE WHEN ("outer".att_5 = 0) THEN share0_ref2.s_state ELSE NULL::character varying END)
                                       Order By: (pg_catalog.sum((sum(share0_ref2.ss_net_profit))))
                                       ->  Sort  (cost=0.00..692055.98 rows=124 width=35)
                                             Sort Key: (("outer".att_4 + "outer".att_5)), (CASE WHEN ("outer".att_5 = 0) THEN share0_ref2.s_state ELSE NULL::character varying END), (pg_catalog.sum((sum(share0_ref2.ss_net_profit))))
                                             ->  Redistribute Motion 3:3  (slice11; segments: 3)  (cost=0.00..692055.81 rows=124 width=35)
                                                   Hash Key: (("outer".att_4 + "outer".att_5)), (CASE WHEN ("outer".att_5 = 0) THEN share0_ref2.s_state ELSE NULL::character varying END)
                                                   ->  Result  (cost=0.00..692055.79 rows=124 width=35)
                                                         ->  Result  (cost=0.00..692055.79 rows=124 width=35)
                                                               ->  Sequence  (cost=0.00..692055.79 rows=124 width=42)
                                                                     ->  Shared Scan (share slice:id 11:0)  (cost=0.00..655284.62 rows=75150124 width=1)
                                                                           ->  Materialize  (cost=0.00..655284.62 rows=75150124 width=1)
                                                                                 ->  Hash Join  (cost=0.00..655209.47 rows=75150124 width=24)
                                                                                       Hash Cond: (store_sales.ss_store_sk = store.s_store_sk)
                                                                                       ->  Hash Join  (cost=0.00..275582.92 rows=187875308 width=10)
                                                                                             Hash Cond: (store_sales.ss_sold_date_sk = date_dim.d_date_sk)
                                                                                             ->  Dynamic Table Scan on store_sales (dynamic scan id: 1)  (cost=0.00..68542.76 rows=959996672 width=14)
                                                                                             ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                                                   ->  Partition Selector for store_sales (dynamic scan id: 1)  (cost=10.00..100.00 rows=34 width=4)
                                                                                                         ->  Broadcast Motion 3:3  (slice5; segments: 3)  (cost=0.00..433.78 rows=356 width=4)
                                                                                                               ->  Table Scan on date_dim  (cost=0.00..433.76 rows=119 width=4)
                                                                                                                     Filter: ((d_month_seq >= 1212) AND (d_month_seq <= 1223))
                                                                                       ->  Hash  (cost=339516.81..339516.81 rows=401 width=22)
                                                                                             ->  Broadcast Motion 3:3  (slice10; segments: 3)  (cost=0.00..339516.81 rows=401 width=22)
                                                                                                   ->  Hash Semi Join  (cost=0.00..339516.65 rows=134 width=22)
                                                                                                         Hash Cond: ((store.s_state)::text = (store_1.s_state)::text)
                                                                                                         ->  Table Scan on store  (cost=0.00..431.05 rows=334 width=22)
                                                                                                         ->  Hash  (cost=339085.51..339085.51 rows=9 width=3)
                                                                                                               ->  Broadcast Motion 3:3  (slice9; segments: 3)  (cost=0.00..339085.51 rows=9 width=3)
                                                                                                                     ->  Result  (cost=0.00..339085.51 rows=3 width=3)
                                                                                                                           Filter: ((rank() OVER (?)) <= 5)
                                                                                                                           ->  WindowAgg  (cost=0.00..339085.51 rows=8 width=11)
                                                                                                                                 Partition By: store_1.s_state
                                                                                                                                 Order By: (pg_catalog.sum((sum(store_sales_1.ss_net_profit))))
                                                                                                                                 ->  Sort  (cost=0.00..339085.51 rows=8 width=11)
                                                                                                                                       Sort Key: store_1.s_state, (pg_catalog.sum((sum(store_sales_1.ss_net_profit))))
                                                                                                                                       ->  HashAggregate  (cost=0.00..339085.51 rows=8 width=11)
                                                                                                                                             Group Key: store_1.s_state
                                                                                                                                             ->  Redistribute Motion 3:3  (slice8; segments: 3)  (cost=0.00..339085.51 rows=8 width=11)
                                                                                                                                                   Hash Key: store_1.s_state
                                                                                                                                                   ->  Result  (cost=0.00..339085.51 rows=8 width=11)
                                                                                                                                                         ->  HashAggregate  (cost=0.00..339085.51 rows=8 width=11)
                                                                                                                                                               Group Key: store_1.s_state
                                                                                                                                                               ->  Hash Join  (cost=0.00..315729.32 rows=187875308 width=9)
                                                                                                                                                                     Hash Cond: (store_sales_1.ss_store_sk = store_1.s_store_sk)
                                                                                                                                                                     ->  Hash Join  (cost=0.00..275582.92 rows=187875308 width=10)
                                                                                                                                                                           Hash Cond: (store_sales_1.ss_sold_date_sk = date_dim_1.d_date_sk)
                                                                                                                                                                           ->  Dynamic Table Scan on store_sales store_sales_1 (dynamic scan id: 2)  (cost=0.00..68542.76 rows=959996672 width=14)
                                                                                                                                                                           ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                                                                                                                                 ->  Partition Selector for store_sales (dynamic scan id: 2)  (cost=10.00..100.00 rows=34 width=4)
                                                                                                                                                                                       ->  Broadcast Motion 3:3  (slice6; segments: 3)  (cost=0.00..433.78 rows=356 width=4)
                                                                                                                                                                                             ->  Table Scan on date_dim date_dim_1  (cost=0.00..433.76 rows=119 width=4)
                                                                                                                                                                                                   Filter: ((d_month_seq >= 1212) AND (d_month_seq <= 1223))
                                                                                                                                                                     ->  Hash  (cost=431.18..431.18 rows=1002 width=7)
                                                                                                                                                                           ->  Broadcast Motion 3:3  (slice7; segments: 3)  (cost=0.00..431.18 rows=1002 width=7)
                                                                                                                                                                                 ->  Table Scan on store store_1  (cost=0.00..431.05 rows=334 width=7)
                                                                     ->  Append  (cost=0.00..36771.16 rows=124 width=42)
                                                                           ->  Result  (cost=0.00..23799.50 rows=116 width=42)
                                                                                 ->  HashAggregate  (cost=0.00..23799.50 rows=116 width=26)
                                                                                       Group Key: share0_ref2.s_state, share0_ref2.s_county
                                                                                       ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=0.00..23799.47 rows=116 width=26)
                                                                                             Hash Key: share0_ref2.s_state, share0_ref2.s_county
                                                                                             ->  Result  (cost=0.00..23799.46 rows=116 width=26)
                                                                                                   ->  HashAggregate  (cost=0.00..23799.46 rows=116 width=26)
                                                                                                         Group Key: share0_ref2.s_state, share0_ref2.s_county
                                                                                                         ->  Shared Scan (share slice:id 1:0)  (cost=0.00..4777.68 rows=75150124 width=24)
                                                                           ->  Result  (cost=0.00..11403.48 rows=8 width=35)
                                                                                 ->  HashAggregate  (cost=0.00..11403.48 rows=8 width=11)
                                                                                       Group Key: share0_ref3.s_state
                                                                                       ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=0.00..11403.48 rows=8 width=11)
                                                                                             Hash Key: share0_ref3.s_state
                                                                                             ->  Result  (cost=0.00..11403.48 rows=8 width=11)
                                                                                                   ->  HashAggregate  (cost=0.00..11403.48 rows=8 width=11)
                                                                                                         Group Key: share0_ref3.s_state
                                                                                                         ->  Shared Scan (share slice:id 2:0)  (cost=0.00..2061.01 rows=75150124 width=9)
                                                                           ->  Result  (cost=0.00..1568.17 rows=1 width=40)
                                                                                 ->  Redistribute Motion 1:3  (slice4)  (cost=0.00..1568.17 rows=1 width=8)
                                                                                       ->  Aggregate  (cost=0.00..1568.17 rows=1 width=8)
                                                                                             ->  Gather Motion 3:1  (slice3; segments: 3)  (cost=0.00..1568.17 rows=1 width=8)
                                                                                                   ->  Aggregate  (cost=0.00..1568.17 rows=1 width=8)
                                                                                                         ->  Shared Scan (share slice:id 3:0)  (cost=0.00..1517.67 rows=75150124 width=6)
 Planning time: 830.791 ms
 Optimizer: PQO version 3.8.0
(91 rows)

-- end query 1 in stream 0 using template query70.tpl
