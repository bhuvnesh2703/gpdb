-- start query 1 in stream 0 using template query40.tpl
explain
select  
   w_state
  ,i_item_id
  ,sum(case when (cast(d_date as date) < cast ('1998-04-08' as date)) 
 		then cs_sales_price - coalesce(cr_refunded_cash,0) else 0 end) as sales_before
  ,sum(case when (cast(d_date as date) >= cast ('1998-04-08' as date)) 
 		then cs_sales_price - coalesce(cr_refunded_cash,0) else 0 end) as sales_after
 from
   catalog_sales left outer join catalog_returns on
       (cs_order_number = cr_order_number 
        and cs_item_sk = cr_item_sk)
  ,warehouse 
  ,item
  ,date_dim
 where
     i_current_price between 0.99 and 1.49
 and i_item_sk          = cs_item_sk
 and cs_warehouse_sk    = w_warehouse_sk 
 and cs_sold_date_sk    = d_date_sk
 and d_date between (cast ('1998-04-08' as date) - 30 )
                and (cast ('1998-04-08' as date) + 30 ) 
 group by
    w_state,i_item_id
 order by w_state,i_item_id
limit 100;
                                                                                                   QUERY PLAN                                                                                                   
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.00..653337.34 rows=34 width=36)
   ->  Gather Motion 3:1  (slice5; segments: 3)  (cost=0.00..653337.34 rows=100 width=36)
         Merge Key: warehouse.w_state, item.i_item_id
         ->  Limit  (cost=0.00..653337.32 rows=34 width=36)
               ->  GroupAggregate  (cost=0.00..653337.32 rows=47282 width=36)
                     Group Key: warehouse.w_state, item.i_item_id
                     ->  Sort  (cost=0.00..653334.66 rows=47282 width=36)
                           Sort Key: warehouse.w_state, item.i_item_id
                           ->  Redistribute Motion 3:3  (slice4; segments: 3)  (cost=0.00..653184.79 rows=47282 width=36)
                                 Hash Key: warehouse.w_state, item.i_item_id
                                 ->  Result  (cost=0.00..653179.47 rows=47282 width=36)
                                       ->  HashAggregate  (cost=0.00..653179.47 rows=47282 width=36)
                                             Group Key: warehouse.w_state, item.i_item_id
                                             ->  Hash Join  (cost=0.00..653038.54 rows=544034 width=34)
                                                   Hash Cond: (catalog_sales.cs_warehouse_sk = warehouse.w_warehouse_sk)
                                                   ->  Hash Join  (cost=0.00..652431.34 rows=571235 width=35)
                                                         Hash Cond: (catalog_sales.cs_item_sk = item.i_item_sk)
                                                         ->  Hash Join  (cost=0.00..648813.49 rows=16443069 width=22)
                                                               Hash Cond: (catalog_sales.cs_sold_date_sk = date_dim.d_date_sk)
                                                               ->  Hash Left Join  (cost=0.00..557259.79 rows=479993344 width=22)
                                                                     Hash Cond: ((catalog_sales.cs_order_number = catalog_returns.cr_order_number) AND (catalog_sales.cs_item_sk = catalog_returns.cr_item_sk))
                                                                     ->  Dynamic Table Scan on catalog_sales (dynamic scan id: 1)  (cost=0.00..46102.37 rows=479993344 width=25)
                                                                     ->  Hash  (cost=3994.93..3994.93 rows=47998998 width=17)
                                                                           ->  Sequence  (cost=0.00..3994.93 rows=47998998 width=17)
                                                                                 ->  Partition Selector for catalog_returns (dynamic scan id: 2)  (cost=10.00..100.00 rows=34 width=4)
                                                                                       Partitions selected: 80 (out of 80)
                                                                                 ->  Dynamic Table Scan on catalog_returns (dynamic scan id: 2)  (cost=0.00..3994.93 rows=47998998 width=17)
                                                               ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                     ->  Partition Selector for catalog_sales (dynamic scan id: 1)  (cost=10.00..100.00 rows=34 width=4)
                                                                           ->  Broadcast Motion 3:3  (slice1; segments: 3)  (cost=0.00..433.77 rows=63 width=8)
                                                                                 ->  Table Scan on date_dim  (cost=0.00..433.76 rows=21 width=8)
                                                                                       Filter: ((d_date >= '03-09-1998'::date) AND (d_date <= '05-08-1998'::date))
                                                         ->  Hash  (cost=458.58..458.58 rows=19398 width=21)
                                                               ->  Broadcast Motion 3:3  (slice2; segments: 3)  (cost=0.00..458.58 rows=19398 width=21)
                                                                     ->  Table Scan on item  (cost=0.00..451.28 rows=6466 width=21)
                                                                           Filter: ((i_current_price >= 0.99) AND (i_current_price <= 1.49))
                                                   ->  Hash  (cost=431.00..431.00 rows=20 width=7)
                                                         ->  Broadcast Motion 3:3  (slice3; segments: 3)  (cost=0.00..431.00 rows=20 width=7)
                                                               ->  Table Scan on warehouse  (cost=0.00..431.00 rows=7 width=7)
 Planning time: 569.549 ms
 Optimizer: PQO version 3.8.0
(41 rows)

-- end query 1 in stream 0 using template query40.tpl
