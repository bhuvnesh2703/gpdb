-- start query 1 in stream 0 using template query84.tpl
explain
select  c_customer_id as customer_id
       ,c_last_name || ', ' || c_first_name as customername
 from customer
     ,customer_address
     ,customer_demographics
     ,household_demographics
     ,income_band
     ,store_returns
 where ca_city	        =  'Hopewell'
   and c_current_addr_sk = ca_address_sk
   and ib_lower_bound   >=  32287
   and ib_upper_bound   <=  32287 + 50000
   and ib_income_band_sk = hd_income_band_sk
   and cd_demo_sk = c_current_cdemo_sk
   and hd_demo_sk = c_current_hdemo_sk
   and sr_cdemo_sk = cd_demo_sk
 order by c_customer_id
 limit 100;
                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=5437053.96..5437056.21 rows=100 width=30)
   ->  Gather Motion 3:1  (slice6; segments: 3)  (cost=5437053.96..5437056.21 rows=100 width=30)
         Merge Key: customer.c_customer_id
         ->  Limit  (cost=5437053.96..5437054.21 rows=34 width=30)
               ->  Sort  (cost=5437053.96..5442967.38 rows=788457 width=30)
                     Sort Key: customer.c_customer_id
                     ->  Hash Join  (cost=398265.24..5346651.24 rows=788457 width=30)
                           Hash Cond: (store_returns_1_prt_outliers.sr_cdemo_sk = customer_demographics.cd_demo_sk)
                           ->  Append  (cost=0.00..3832906.41 rows=95999916 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_outliers  (cost=0.00..119589.00 rows=3359867 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_2  (cost=0.00..1853.03 rows=45768 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_3  (cost=0.00..6990.74 rows=174025 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_4  (cost=0.00..12073.00 rows=300934 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_5  (cost=0.00..17206.50 rows=429050 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_6  (cost=0.00..22418.30 rows=559077 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_7  (cost=0.00..27598.00 rows=688300 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_8  (cost=0.00..32106.70 rows=800790 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_9  (cost=0.00..32900.20 rows=820607 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_10  (cost=0.00..37679.10 rows=939970 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_11  (cost=0.00..44416.50 rows=1108017 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_12  (cost=0.00..51022.00 rows=1272934 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_13  (cost=0.00..60422.90 rows=1507530 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_14  (cost=0.00..73185.80 rows=1826060 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_15  (cost=0.00..82303.60 rows=2053554 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_16  (cost=0.00..79967.20 rows=1995307 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_17  (cost=0.00..73186.20 rows=1826107 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_18  (cost=0.00..66475.20 rows=1658607 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_19  (cost=0.00..58723.50 rows=1465084 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_20  (cost=0.00..46348.30 rows=1156177 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_21  (cost=0.00..34792.40 rows=867914 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_22  (cost=0.00..32894.20 rows=820507 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_23  (cost=0.00..37424.80 rows=933627 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_24  (cost=0.00..44195.80 rows=1102527 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_25  (cost=0.00..50837.00 rows=1268234 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_26  (cost=0.00..59985.70 rows=1496590 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_27  (cost=0.00..72724.00 rows=1814434 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_28  (cost=0.00..82164.10 rows=2050104 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_29  (cost=0.00..80191.60 rows=2000754 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_30  (cost=0.00..73529.70 rows=1834590 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_31  (cost=0.00..66909.40 rows=1669347 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_32  (cost=0.00..59189.10 rows=1476737 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_33  (cost=0.00..46935.60 rows=1170954 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_34  (cost=0.00..35180.30 rows=877544 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_35  (cost=0.00..32948.10 rows=821804 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_36  (cost=0.00..37243.00 rows=928967 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_37  (cost=0.00..43879.00 rows=1094634 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_38  (cost=0.00..50465.40 rows=1259047 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_39  (cost=0.00..59486.40 rows=1484147 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_40  (cost=0.00..72150.30 rows=1800177 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_41  (cost=0.00..81849.40 rows=2042280 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_42  (cost=0.00..80010.30 rows=1996310 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_43  (cost=0.00..73403.80 rows=1831427 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_44  (cost=0.00..66684.90 rows=1663764 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_45  (cost=0.00..59144.80 rows=1475594 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_46  (cost=0.00..47011.80 rows=1172827 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_47  (cost=0.00..35247.70 rows=879257 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_48  (cost=0.00..32757.00 rows=817067 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_49  (cost=0.00..36707.60 rows=915654 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_50  (cost=0.00..43497.40 rows=1085080 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_51  (cost=0.00..50143.80 rows=1250960 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_52  (cost=0.00..58791.30 rows=1466777 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_53  (cost=0.00..71405.50 rows=1781517 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_54  (cost=0.00..81729.80 rows=2039294 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_55  (cost=0.00..80773.90 rows=2015430 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_56  (cost=0.00..74229.00 rows=1852034 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_57  (cost=0.00..67439.70 rows=1682624 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_58  (cost=0.00..60085.40 rows=1499080 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_59  (cost=0.00..48188.70 rows=1202190 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_60  (cost=0.00..35990.20 rows=897740 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_61  (cost=0.00..32755.30 rows=817010 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_62  (cost=0.00..36451.80 rows=909294 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_63  (cost=0.00..43272.00 rows=1079500 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_64  (cost=0.00..49886.80 rows=1244560 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_65  (cost=0.00..58346.40 rows=1455714 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_66  (cost=0.00..70812.50 rows=1766850 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_67  (cost=0.00..80500.30 rows=2008644 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_68  (cost=0.00..75031.60 rows=1872054 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_69  (cost=0.00..63447.40 rows=1582914 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_70  (cost=0.00..51572.60 rows=1286687 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_71  (cost=0.00..39178.00 rows=977300 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_72  (cost=0.00..22132.80 rows=551994 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_73  (cost=0.00..4828.24 rows=120108 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_74  (cost=0.00..1.00 rows=1 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_75  (cost=0.00..1.00 rows=1 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_76  (cost=0.00..1.00 rows=1 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_77  (cost=0.00..1.00 rows=1 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_78  (cost=0.00..1.00 rows=1 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_79  (cost=0.00..1.00 rows=1 width=4)
                                 ->  Append-only Columnar Scan on store_returns_1_prt_80  (cost=0.00..1.00 rows=1 width=4)
                           ->  Hash  (cost=397079.54..397079.54 rows=31619 width=38)
                                 ->  Broadcast Motion 3:3  (slice5; segments: 3)  (cost=361604.19..397079.54 rows=31619 width=38)
                                       ->  Hash Join  (cost=361604.19..395814.80 rows=10540 width=38)
                                             Hash Cond: (customer_demographics.cd_demo_sk = customer.c_current_cdemo_sk)
                                             ->  Seq Scan on customer_demographics  (cost=0.00..23620.80 rows=640260 width=4)
                                             ->  Hash  (cost=361194.23..361194.23 rows=10933 width=34)
                                                   ->  Redistribute Motion 3:3  (slice4; segments: 3)  (cost=105076.60..361194.23 rows=10933 width=34)
                                                         Hash Key: customer.c_current_cdemo_sk
                                                         ->  Hash Join  (cost=105076.60..360538.31 rows=10933 width=34)
                                                               Hash Cond: (customer.c_current_hdemo_sk = household_demographics.hd_demo_sk)
                                                               ->  Hash Join  (cost=104693.38..359454.75 rows=32667 width=38)
                                                                     Hash Cond: (customer.c_current_addr_sk = customer_address.ca_address_sk)
                                                                     ->  Seq Scan on customer  (cost=0.00..178782.00 rows=3999967 width=42)
                                                                     ->  Hash  (cost=102855.40..102855.40 rows=49014 width=4)
                                                                           ->  Broadcast Motion 3:3  (slice1; segments: 3)  (cost=0.00..102855.40 rows=49014 width=4)
                                                                                 ->  Seq Scan on customer_address  (cost=0.00..100894.88 rows=16338 width=4)
                                                                                       Filter: ((ca_city)::text = 'Hopewell'::text)
                                                               ->  Hash  (cost=289.62..289.62 rows=2496 width=4)
                                                                     ->  Broadcast Motion 3:3  (slice3; segments: 3)  (cost=15.84..289.62 rows=2496 width=4)
                                                                           ->  Hash Join  (cost=15.84..189.79 rows=832 width=4)
                                                                                 Hash Cond: (household_demographics.hd_income_band_sk = income_band.ib_income_band_sk)
                                                                                 ->  Seq Scan on household_demographics  (cost=0.00..104.00 rows=2400 width=8)
                                                                                 ->  Hash  (cost=15.58..15.58 rows=7 width=4)
                                                                                       ->  Broadcast Motion 3:3  (slice2; segments: 3)  (cost=0.00..15.58 rows=7 width=4)
                                                                                             ->  Seq Scan on income_band  (cost=0.00..15.30 rows=3 width=4)
                                                                                                   Filter: ((ib_lower_bound >= 32287) AND (ib_upper_bound <= 82287))
 Planning time: 15.879 ms
 Optimizer: legacy query optimizer
(117 rows)

-- end query 1 in stream 0 using template query84.tpl
