-- start query 1 in stream 0 using template query37.tpl
explain
select  i_item_id
       ,i_item_desc
       ,i_current_price
 from item, inventory, date_dim, catalog_sales
 where i_current_price between 22 and 22 + 30
 and inv_item_sk = i_item_sk
 and d_date_sk=inv_date_sk
 and d_date between cast('2001-06-02' as date) and (cast('2001-06-02' as date) +  60 )
 and i_manufact_id in (678,964,918,849)
 and inv_quantity_on_hand between 100 and 500
 and cs_item_sk = i_item_sk
 group by i_item_id,i_item_desc,i_current_price
 order by i_item_id
 limit 100;
                                                                                                      QUERY PLAN                                                                                                      
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.00..197140.03 rows=19 width=125)
   ->  Gather Motion 3:1  (slice6; segments: 3)  (cost=0.00..197140.02 rows=57 width=125)
         Merge Key: item.i_item_id
         ->  GroupAggregate  (cost=0.00..197140.00 rows=19 width=125)
               Group Key: item.i_item_id, item.i_item_desc, item.i_current_price
               ->  Sort  (cost=0.00..197139.99 rows=19 width=125)
                     Sort Key: item.i_item_id, item.i_item_desc, item.i_current_price
                     ->  Redistribute Motion 3:3  (slice5; segments: 3)  (cost=0.00..197139.94 rows=19 width=125)
                           Hash Key: item.i_item_id, item.i_item_desc, item.i_current_price
                           ->  HashAggregate  (cost=0.00..197139.93 rows=19 width=125)
                                 Group Key: item.i_item_id, item.i_item_desc, item.i_current_price
                                 ->  Hash Join  (cost=0.00..187319.35 rows=22469513 width=125)
                                       Hash Cond: ((inventory.inv_item_sk = item.i_item_sk) AND (inventory.inv_item_sk = catalog_sales.cs_item_sk))
                                       ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=0.00..34256.54 rows=23623083 width=4)
                                             Hash Key: inventory.inv_item_sk, inventory.inv_item_sk
                                             ->  Hash Join  (cost=0.00..33960.78 rows=23623083 width=4)
                                                   Hash Cond: (inventory.inv_date_sk = date_dim.d_date_sk)
                                                   ->  Dynamic Table Scan on inventory (dynamic scan id: 1)  (cost=0.00..15531.16 rows=98869047 width=12)
                                                         Filter: ((inv_quantity_on_hand >= 100) AND (inv_quantity_on_hand <= 500))
                                                   ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                         ->  Partition Selector for inventory (dynamic scan id: 1)  (cost=10.00..100.00 rows=34 width=4)
                                                               ->  Broadcast Motion 3:3  (slice1; segments: 3)  (cost=0.00..433.76 rows=62 width=4)
                                                                     ->  Table Scan on date_dim  (cost=0.00..433.76 rows=21 width=4)
                                                                           Filter: ((d_date >= '06-02-2001'::date) AND (d_date <= '08-01-2001'::date))
                                       ->  Hash  (cost=136722.03..136722.03 rows=92860 width=133)
                                             ->  Redistribute Motion 3:3  (slice4; segments: 3)  (cost=0.00..136722.03 rows=92860 width=133)
                                                   Hash Key: item.i_item_sk, catalog_sales.cs_item_sk
                                                   ->  Hash Join  (cost=0.00..136683.37 rows=92860 width=133)
                                                         Hash Cond: (catalog_sales.cs_item_sk = item.i_item_sk)
                                                         ->  Sequence  (cost=0.00..46102.37 rows=479993344 width=4)
                                                               ->  Partition Selector for catalog_sales (dynamic scan id: 2)  (cost=10.00..100.00 rows=34 width=4)
                                                                     Partitions selected: 80 (out of 80)
                                                               ->  Dynamic Table Scan on catalog_sales (dynamic scan id: 2)  (cost=0.00..46102.37 rows=479993344 width=4)
                                                         ->  Hash  (cost=454.38..454.38 rows=57 width=129)
                                                               ->  Broadcast Motion 3:3  (slice3; segments: 3)  (cost=0.00..454.38 rows=57 width=129)
                                                                     ->  Table Scan on item  (cost=0.00..454.25 rows=19 width=129)
                                                                           Filter: ((i_current_price >= 22::numeric) AND (i_current_price <= 52::numeric) AND (i_manufact_id = ANY ('{678,964,918,849}'::integer[])))
 Planning time: 526.287 ms
 Optimizer: PQO version 3.8.0
(39 rows)

-- end query 1 in stream 0 using template query37.tpl
