-- start query 1 in stream 0 using template query79.tpl
explain
select 
  c_last_name,c_first_name,substr(s_city,1,30),ss_ticket_number,amt,profit
  from
   (select ss_ticket_number
          ,ss_customer_sk
          ,store.s_city
          ,sum(ss_coupon_amt) amt
          ,sum(ss_net_profit) profit
    from store_sales,date_dim,store,household_demographics
    where store_sales.ss_sold_date_sk = date_dim.d_date_sk
    and store_sales.ss_store_sk = store.s_store_sk  
    and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
    and (household_demographics.hd_dep_count = 8 or household_demographics.hd_vehicle_count > 0)
    and date_dim.d_dow = 1
    and date_dim.d_year in (1998,1998+1,1998+2) 
    and store.s_number_employees between 200 and 295
    group by ss_ticket_number,ss_customer_sk,ss_addr_sk,store.s_city) ms,customer
    where ss_customer_sk = c_customer_sk
 order by c_last_name,c_first_name,substr(s_city,1,30), profit
limit 100;
                                                                                     QUERY PLAN                                                                                      
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.00..1403438.78 rows=34 width=48)
   ->  Gather Motion 3:1  (slice6; segments: 3)  (cost=0.00..1403438.77 rows=100 width=48)
         Merge Key: customer.c_last_name, customer.c_first_name, (substr((store.s_city)::text, 1, 30)), (pg_catalog.sum((sum(store_sales.ss_net_profit))))
         ->  Limit  (cost=0.00..1403438.76 rows=34 width=48)
               ->  Sort  (cost=0.00..1403438.75 rows=106801534 width=48)
                     Sort Key: customer.c_last_name, customer.c_first_name, (substr((store.s_city)::text, 1, 30)), (pg_catalog.sum((sum(store_sales.ss_net_profit))))
                     ->  Result  (cost=0.00..628208.68 rows=106801534 width=48)
                           ->  Hash Join  (cost=0.00..623082.20 rows=106801534 width=47)
                                 Hash Cond: (store_sales.ss_customer_sk = customer.c_customer_sk)
                                 ->  HashAggregate  (cost=0.00..539721.78 rows=106801534 width=38)
                                       Group Key: store_sales.ss_ticket_number, store_sales.ss_customer_sk, store_sales.ss_addr_sk, store.s_city
                                       ->  Redistribute Motion 3:3  (slice4; segments: 3)  (cost=0.00..484362.06 rows=106801534 width=42)
                                             Hash Key: store_sales.ss_ticket_number, store_sales.ss_customer_sk, store_sales.ss_addr_sk, store.s_city
                                             ->  Result  (cost=0.00..470321.93 rows=106801534 width=42)
                                                   ->  HashAggregate  (cost=0.00..470321.93 rows=106801534 width=42)
                                                         Group Key: store_sales.ss_ticket_number, store_sales.ss_customer_sk, store_sales.ss_addr_sk, store.s_city
                                                         ->  Hash Join  (cost=0.00..414531.16 rows=106801534 width=35)
                                                               Hash Cond: (store_sales.ss_store_sk = store.s_store_sk)
                                                               ->  Hash Join  (cost=0.00..380568.14 rows=106801534 width=29)
                                                                     Hash Cond: (store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk)
                                                                     ->  Hash Join  (cost=0.00..340610.30 rows=147938584 width=33)
                                                                           Hash Cond: (store_sales.ss_sold_date_sk = date_dim.d_date_sk)
                                                                           ->  Dynamic Table Scan on store_sales (dynamic scan id: 1)  (cost=0.00..68542.76 rows=959996672 width=37)
                                                                           ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                                 ->  Partition Selector for store_sales (dynamic scan id: 1)  (cost=10.00..100.00 rows=34 width=4)
                                                                                       ->  Broadcast Motion 3:3  (slice1; segments: 3)  (cost=0.00..434.58 rows=281 width=4)
                                                                                             ->  Table Scan on date_dim  (cost=0.00..434.56 rows=94 width=4)
                                                                                                   Filter: ((d_dow = 1) AND (d_year = ANY ('{1998,1999,2000}'::integer[])))
                                                                     ->  Hash  (cost=431.64..431.64 rows=5201 width=4)
                                                                           ->  Broadcast Motion 3:3  (slice2; segments: 3)  (cost=0.00..431.64 rows=5201 width=4)
                                                                                 ->  Table Scan on household_demographics  (cost=0.00..431.27 rows=1734 width=4)
                                                                                       Filter: ((hd_dep_count = 8) OR (hd_vehicle_count > 0))
                                                               ->  Hash  (cost=431.23..431.23 rows=648 width=14)
                                                                     ->  Broadcast Motion 3:3  (slice3; segments: 3)  (cost=0.00..431.23 rows=648 width=14)
                                                                           ->  Table Scan on store  (cost=0.00..431.07 rows=216 width=14)
                                                                                 Filter: ((s_number_employees >= 200) AND (s_number_employees <= 295))
                                 ->  Hash  (cost=4532.45..4532.45 rows=11999900 width=17)
                                       ->  Broadcast Motion 3:3  (slice5; segments: 3)  (cost=0.00..4532.45 rows=11999900 width=17)
                                             ->  Table Scan on customer  (cost=0.00..754.40 rows=3999967 width=17)
 Planning time: 555.415 ms
 Optimizer: PQO version 3.8.0
(41 rows)

-- end query 1 in stream 0 using template query79.tpl
