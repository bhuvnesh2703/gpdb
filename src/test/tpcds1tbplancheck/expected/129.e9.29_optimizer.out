-- start query 1 in stream 0 using template query29.tpl
explain select   
     i_item_id
    ,i_item_desc
    ,s_store_id
    ,s_store_name
    ,sum(ss_quantity)        as store_sales_quantity
    ,sum(sr_return_quantity) as store_returns_quantity
    ,sum(cs_quantity)        as catalog_sales_quantity
 from
    store_sales
   ,store_returns
   ,catalog_sales
   ,date_dim             d1
   ,date_dim             d2
   ,date_dim             d3
   ,store
   ,item
 where
     d1.d_moy               = 4 
 and d1.d_year              = 1999
 and d1.d_date_sk           = ss_sold_date_sk
 and i_item_sk              = ss_item_sk
 and s_store_sk             = ss_store_sk
 and ss_customer_sk         = sr_customer_sk
 and ss_item_sk             = sr_item_sk
 and ss_ticket_number       = sr_ticket_number
 and sr_returned_date_sk    = d2.d_date_sk
 and d2.d_moy               between 4 and  4 + 3 
 and d2.d_year              = 1999
 and sr_customer_sk         = cs_bill_customer_sk
 and sr_item_sk             = cs_item_sk
 and cs_sold_date_sk        = d3.d_date_sk     
 and d3.d_year              in (1999,1999+1,1999+2)
 group by
    i_item_id
   ,i_item_desc
   ,s_store_id
   ,s_store_name
 order by
    i_item_id 
   ,i_item_desc
   ,s_store_id
   ,s_store_name
 limit 100;
                                                                                                                                                                                         QUERY PLAN                                                                                                                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.00..1564907.88 rows=34 width=164)
   ->  Gather Motion 3:1  (slice8; segments: 3)  (cost=0.00..1564907.87 rows=100 width=164)
         Merge Key: item.i_item_id, item.i_item_desc, store.s_store_id, store.s_store_name
         ->  Limit  (cost=0.00..1564907.81 rows=34 width=164)
               ->  GroupAggregate  (cost=0.00..1564907.80 rows=7920 width=164)
                     Group Key: item.i_item_id, item.i_item_desc, store.s_store_id, store.s_store_name
                     ->  Sort  (cost=0.00..1564905.77 rows=7920 width=164)
                           Sort Key: item.i_item_id, item.i_item_desc, store.s_store_id, store.s_store_name
                           ->  Redistribute Motion 3:3  (slice7; segments: 3)  (cost=0.00..1564810.39 rows=7920 width=164)
                                 Hash Key: item.i_item_id, item.i_item_desc, store.s_store_id, store.s_store_name
                                 ->  Result  (cost=0.00..1564806.33 rows=7920 width=164)
                                       ->  HashAggregate  (cost=0.00..1564806.33 rows=7920 width=164)
                                             Group Key: item.i_item_id, item.i_item_desc, store.s_store_id, store.s_store_name
                                             ->  Hash Join  (cost=0.00..1564801.21 rows=7920 width=152)
                                                   Hash Cond: ((item.i_item_sk = store_sales.ss_item_sk) AND (item.i_item_sk = store_returns.sr_item_sk) AND (item.i_item_sk = catalog_sales.cs_item_sk))
                                                   ->  Table Scan on item  (cost=0.00..447.68 rows=99749 width=123)
                                                   ->  Hash  (cost=1564274.68..1564274.68 rows=7920 width=45)
                                                         ->  Redistribute Motion 3:3  (slice6; segments: 3)  (cost=0.00..1564274.68 rows=7920 width=45)
                                                               Hash Key: catalog_sales.cs_item_sk
                                                               ->  Hash Join  (cost=0.00..1564273.57 rows=7920 width=45)
                                                                     Hash Cond: (store_sales.ss_store_sk = store.s_store_sk)
                                                                     ->  Redistribute Motion 3:3  (slice5; segments: 3)  (cost=0.00..1563839.52 rows=7920 width=28)
                                                                           Hash Key: store_sales.ss_store_sk
                                                                           ->  Hash Join  (cost=0.00..1563838.82 rows=7920 width=28)
                                                                                 Hash Cond: (date_dim.d_date_sk = catalog_sales.cs_sold_date_sk)
                                                                                 ->  Table Scan on date_dim  (cost=0.00..433.76 rows=366 width=4)
                                                                                       Filter: (d_year = ANY ('{1999,2000,2001}'::integer[]))
                                                                                 ->  Hash  (cost=1563393.28..1563393.28 rows=13237 width=32)
                                                                                       ->  Redistribute Motion 3:3  (slice4; segments: 3)  (cost=0.00..1563393.28 rows=13237 width=32)
                                                                                             Hash Key: catalog_sales.cs_sold_date_sk
                                                                                             ->  Hash Join  (cost=0.00..1563391.96 rows=13237 width=32)
                                                                                                   Hash Cond: (date_dim_1.d_date_sk = store_returns.sr_returned_date_sk)
                                                                                                   ->  Table Scan on date_dim date_dim_1  (cost=0.00..434.56 rows=72 width=4)
                                                                                                         Filter: ((d_moy >= 4) AND (d_moy <= 7) AND (d_year = 1999))
                                                                                                   ->  Hash  (cost=1562843.34..1562843.34 rows=122725 width=36)
                                                                                                         ->  Redistribute Motion 3:3  (slice3; segments: 3)  (cost=0.00..1562843.34 rows=122725 width=36)
                                                                                                               Hash Key: store_returns.sr_returned_date_sk
                                                                                                               ->  Hash Join  (cost=0.00..1562829.51 rows=122725 width=36)
                                                                                                                     Hash Cond: ((catalog_sales.cs_bill_customer_sk = store_returns.sr_customer_sk) AND (catalog_sales.cs_item_sk = store_returns.sr_item_sk) AND (catalog_sales.cs_bill_customer_sk = store_sales.ss_customer_sk) AND (catalog_sales.cs_item_sk = store_sales.ss_item_sk))
                                                                                                                     ->  Sequence  (cost=0.00..46102.37 rows=479993344 width=16)
                                                                                                                           ->  Partition Selector for catalog_sales (dynamic scan id: 3)  (cost=10.00..100.00 rows=34 width=4)
                                                                                                                                 Partitions selected: 80 (out of 80)
                                                                                                                           ->  Dynamic Table Scan on catalog_sales (dynamic scan id: 3)  (cost=0.00..46102.37 rows=479993344 width=16)
                                                                                                                     ->  Hash  (cost=1239723.15..1239723.15 rows=76429 width=32)
                                                                                                                           ->  Broadcast Motion 3:3  (slice2; segments: 3)  (cost=0.00..1239723.15 rows=76429 width=32)
                                                                                                                                 ->  Hash Join  (cost=0.00..1239679.38 rows=25477 width=32)
                                                                                                                                       Hash Cond: (store_sales.ss_sold_date_sk = date_dim_2.d_date_sk)
                                                                                                                                       ->  Hash Join  (cost=0.00..1239076.51 rows=845261 width=36)
                                                                                                                                             Hash Cond: ((store_returns.sr_customer_sk = store_sales.ss_customer_sk) AND (store_returns.sr_item_sk = store_sales.ss_item_sk) AND (store_returns.sr_ticket_number = store_sales.ss_ticket_number))
                                                                                                                                             ->  Sequence  (cost=0.00..6080.60 rows=96000000 width=24)
                                                                                                                                                   ->  Partition Selector for store_returns (dynamic scan id: 2)  (cost=10.00..100.00 rows=34 width=4)
                                                                                                                                                         Partitions selected: 80 (out of 80)
                                                                                                                                                   ->  Dynamic Table Scan on store_returns (dynamic scan id: 2)  (cost=0.00..6080.60 rows=96000000 width=24)
                                                                                                                                             ->  Hash  (cost=68542.76..68542.76 rows=959996672 width=28)
                                                                                                                                                   ->  Dynamic Table Scan on store_sales (dynamic scan id: 1)  (cost=0.00..68542.76 rows=959996672 width=28)
                                                                                                                                       ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                                                                                             ->  Partition Selector for store_sales (dynamic scan id: 1)  (cost=10.00..100.00 rows=34 width=4)
                                                                                                                                                   ->  Broadcast Motion 3:3  (slice1; segments: 3)  (cost=0.00..434.56 rows=55 width=4)
                                                                                                                                                         ->  Table Scan on date_dim date_dim_2  (cost=0.00..434.56 rows=19 width=4)
                                                                                                                                                               Filter: ((d_moy = 4) AND (d_year = 1999))
                                                                     ->  Hash  (cost=431.05..431.05 rows=334 width=25)
                                                                           ->  Table Scan on store  (cost=0.00..431.05 rows=334 width=25)
 Planning time: 2402.634 ms
 Optimizer: PQO version 3.8.0
(64 rows)

-- end query 1 in stream 0 using template query29.tpl
