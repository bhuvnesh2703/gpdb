-- start query 1 in stream 0 using template query82.tpl
explain
select  i_item_id
       ,i_item_desc
       ,i_current_price
 from item, inventory, date_dim, store_sales
 where i_current_price between 30 and 30+30
 and inv_item_sk = i_item_sk
 and d_date_sk=inv_date_sk
 and d_date between cast('2002-05-30' as date) and (cast('2002-05-30' as date) +  60 )
 and i_manufact_id in (437,129,727,663)
 and inv_quantity_on_hand between 100 and 500
 and ss_item_sk = i_item_sk
 group by i_item_id,i_item_desc,i_current_price
 order by i_item_id
 limit 100;
                                                                                                   QUERY PLAN                                                                                                   
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.00..345825.77 rows=27 width=125)
   ->  Gather Motion 3:1  (slice6; segments: 3)  (cost=0.00..345825.76 rows=79 width=125)
         Merge Key: item.i_item_id
         ->  GroupAggregate  (cost=0.00..345825.73 rows=27 width=125)
               Group Key: item.i_item_id, item.i_item_desc, item.i_current_price
               ->  Sort  (cost=0.00..345825.72 rows=27 width=125)
                     Sort Key: item.i_item_id, item.i_item_desc, item.i_current_price
                     ->  Redistribute Motion 3:3  (slice5; segments: 3)  (cost=0.00..345825.63 rows=27 width=125)
                           Hash Key: item.i_item_id, item.i_item_desc, item.i_current_price
                           ->  HashAggregate  (cost=0.00..345825.62 rows=27 width=125)
                                 Group Key: item.i_item_id, item.i_item_desc, item.i_current_price
                                 ->  Hash Join  (cost=0.00..318176.44 rows=63261389 width=125)
                                       Hash Cond: ((item.i_item_sk = inventory.inv_item_sk) AND (store_sales.ss_item_sk = inventory.inv_item_sk))
                                       ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=0.00..249393.06 rows=257763 width=133)
                                             Hash Key: item.i_item_sk, item.i_item_sk
                                             ->  Hash Join  (cost=0.00..249285.75 rows=257763 width=133)
                                                   Hash Cond: (store_sales.ss_item_sk = item.i_item_sk)
                                                   ->  Sequence  (cost=0.00..68542.76 rows=959996672 width=4)
                                                         ->  Partition Selector for store_sales (dynamic scan id: 2)  (cost=10.00..100.00 rows=34 width=4)
                                                               Partitions selected: 80 (out of 80)
                                                         ->  Dynamic Table Scan on store_sales (dynamic scan id: 2)  (cost=0.00..68542.76 rows=959996672 width=4)
                                                   ->  Hash  (cost=454.43..454.43 rows=79 width=129)
                                                         ->  Broadcast Motion 3:3  (slice1; segments: 3)  (cost=0.00..454.43 rows=79 width=129)
                                                               ->  Table Scan on item  (cost=0.00..454.25 rows=27 width=129)
                                                                     Filter: ((i_current_price >= 30::numeric) AND (i_current_price <= 60::numeric) AND (i_manufact_id = ANY ('{437,129,727,663}'::integer[])))
                                       ->  Hash  (cost=34265.48..34265.48 rows=23960074 width=4)
                                             ->  Redistribute Motion 3:3  (slice4; segments: 3)  (cost=0.00..34265.48 rows=23960074 width=4)
                                                   Hash Key: inventory.inv_item_sk, inventory.inv_item_sk
                                                   ->  Hash Join  (cost=0.00..33965.50 rows=23960074 width=4)
                                                         Hash Cond: (inventory.inv_date_sk = date_dim.d_date_sk)
                                                         ->  Dynamic Table Scan on inventory (dynamic scan id: 1)  (cost=0.00..15531.16 rows=98869047 width=12)
                                                               Filter: ((inv_quantity_on_hand >= 100) AND (inv_quantity_on_hand <= 500))
                                                         ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                               ->  Partition Selector for inventory (dynamic scan id: 1)  (cost=10.00..100.00 rows=34 width=4)
                                                                     ->  Broadcast Motion 3:3  (slice3; segments: 3)  (cost=0.00..433.76 rows=63 width=4)
                                                                           ->  Table Scan on date_dim  (cost=0.00..433.76 rows=21 width=4)
                                                                                 Filter: ((d_date >= '05-30-2002'::date) AND (d_date <= '07-29-2002'::date))
 Planning time: 445.033 ms
 Optimizer: PQO version 3.8.0
(39 rows)

-- end query 1 in stream 0 using template query82.tpl
