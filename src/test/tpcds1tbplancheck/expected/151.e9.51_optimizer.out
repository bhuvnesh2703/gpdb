-- start query 1 in stream 0 using template query51.tpl
explain
WITH web_v1 as (
select
  ws_item_sk item_sk, d_date,
  sum(sum(ws_sales_price))
      over (partition by ws_item_sk order by d_date rows between unbounded preceding and current row) cume_sales
from web_sales
    ,date_dim
where ws_sold_date_sk=d_date_sk
  and d_month_seq between 1212 and 1212+11
  and ws_item_sk is not NULL
group by ws_item_sk, d_date),
store_v1 as (
select
  ss_item_sk item_sk, d_date,
  sum(sum(ss_sales_price))
      over (partition by ss_item_sk order by d_date rows between unbounded preceding and current row) cume_sales
from store_sales
    ,date_dim
where ss_sold_date_sk=d_date_sk
  and d_month_seq between 1212 and 1212+11
  and ss_item_sk is not NULL
group by ss_item_sk, d_date)
 select  *
from (select item_sk
     ,d_date
     ,web_sales
     ,store_sales
     ,max(web_sales)
         over (partition by item_sk order by d_date rows between unbounded preceding and current row) web_cumulative
     ,max(store_sales)
         over (partition by item_sk order by d_date rows between unbounded preceding and current row) store_cumulative
     from (select case when web.item_sk is not null then web.item_sk else store.item_sk end item_sk
                 ,case when web.d_date is not null then web.d_date else store.d_date end d_date
                 ,web.cume_sales web_sales
                 ,store.cume_sales store_sales
           from web_v1 web full outer join store_v1 store on (web.item_sk = store.item_sk
                                                          and web.d_date = store.d_date)
          )x )y
where web_cumulative > store_cumulative
order by item_sk
        ,d_date
limit 100;
                                                                                                                                QUERY PLAN                                                                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=0.00..30023108.59 rows=34 width=40)
   Sort Key: (CASE WHEN (NOT (share2_ref2.ws_item_sk IS NULL)) THEN share2_ref2.ws_item_sk ELSE share3_ref2.ss_item_sk END), (CASE WHEN (NOT (share2_ref2.d_date IS NULL)) THEN share2_ref2.d_date ELSE share3_ref2.d_date END)
   ->  Limit  (cost=0.00..30023108.44 rows=34 width=40)
         ->  Gather Motion 3:1  (slice8; segments: 3)  (cost=0.00..30023108.43 rows=100 width=40)
               Merge Key: (CASE WHEN (NOT (share2_ref2.ws_item_sk IS NULL)) THEN share2_ref2.ws_item_sk ELSE share3_ref2.ss_item_sk END), (CASE WHEN (NOT (share2_ref2.d_date IS NULL)) THEN share2_ref2.d_date ELSE share3_ref2.d_date END)
               ->  Limit  (cost=0.00..30023108.42 rows=34 width=40)
                     ->  Sort  (cost=0.00..30023108.42 rows=1567785367 width=40)
                           Sort Key: (CASE WHEN (NOT (share2_ref2.ws_item_sk IS NULL)) THEN share2_ref2.ws_item_sk ELSE share3_ref2.ss_item_sk END), (CASE WHEN (NOT (share2_ref2.d_date IS NULL)) THEN share2_ref2.d_date ELSE share3_ref2.d_date END)
                           ->  Result  (cost=0.00..19161724.76 rows=1567785367 width=40)
                                 Filter: ((max(share2_ref2.cume_sales) OVER (?)) > (max(share3_ref2.cume_sales) OVER (?)))
                                 ->  WindowAgg  (cost=0.00..18903824.07 rows=3919463416 width=40)
                                       Partition By: (CASE WHEN (NOT (share2_ref2.ws_item_sk IS NULL)) THEN share2_ref2.ws_item_sk ELSE share3_ref2.ss_item_sk END)
                                       Order By: (CASE WHEN (NOT (share2_ref2.d_date IS NULL)) THEN share2_ref2.d_date ELSE share3_ref2.d_date END)
                                       ->  Sort  (cost=0.00..18809756.95 rows=3919463416 width=24)
                                             Sort Key: (CASE WHEN (NOT (share2_ref2.ws_item_sk IS NULL)) THEN share2_ref2.ws_item_sk ELSE share3_ref2.ss_item_sk END), (CASE WHEN (NOT (share2_ref2.d_date IS NULL)) THEN share2_ref2.d_date ELSE share3_ref2.d_date END)
                                             ->  Redistribute Motion 3:3  (slice7; segments: 3)  (cost=0.00..1812617.13 rows=3919463416 width=24)
                                                   Hash Key: (CASE WHEN (NOT (share2_ref2.ws_item_sk IS NULL)) THEN share2_ref2.ws_item_sk ELSE share3_ref2.ss_item_sk END)
                                                   ->  Result  (cost=0.00..1518187.03 rows=3919463416 width=24)
                                                         ->  Result  (cost=0.00..1518187.03 rows=3919463416 width=24)
                                                               ->  Sequence  (cost=0.00..1424119.91 rows=3919463416 width=32)
                                                                     ->  Shared Scan (share slice:id 7:2)  (cost=0.00..144519.49 rows=19539750 width=1)
                                                                           ->  Materialize  (cost=0.00..144519.49 rows=19539750 width=1)
                                                                                 ->  WindowAgg  (cost=0.00..144499.95 rows=19539750 width=16)
                                                                                       Partition By: web_sales.ws_item_sk
                                                                                       Order By: date_dim_1.d_date
                                                                                       ->  Sort  (cost=0.00..144187.32 rows=19539750 width=16)
                                                                                             Sort Key: web_sales.ws_item_sk, date_dim_1.d_date
                                                                                             ->  Redistribute Motion 3:3  (slice6; segments: 3)  (cost=0.00..101253.99 rows=19539750 width=16)
                                                                                                   Hash Key: web_sales.ws_item_sk
                                                                                                   ->  Result  (cost=0.00..100275.44 rows=19539750 width=16)
                                                                                                         ->  HashAggregate  (cost=0.00..100275.44 rows=19539750 width=16)
                                                                                                               Group Key: web_sales.ws_item_sk, date_dim_1.d_date
                                                                                                               ->  Redistribute Motion 3:3  (slice5; segments: 3)  (cost=0.00..95340.48 rows=19539750 width=16)
                                                                                                                     Hash Key: web_sales.ws_item_sk, date_dim_1.d_date
                                                                                                                     ->  Result  (cost=0.00..94361.93 rows=19539750 width=16)
                                                                                                                           ->  HashAggregate  (cost=0.00..94361.93 rows=19539750 width=16)
                                                                                                                                 Group Key: web_sales.ws_item_sk, date_dim_1.d_date
                                                                                                                                 ->  Hash Join  (cost=0.00..82617.30 rows=46990126 width=13)
                                                                                                                                       Hash Cond: (web_sales.ws_sold_date_sk = date_dim_1.d_date_sk)
                                                                                                                                       ->  Dynamic Table Scan on web_sales (dynamic scan id: 1)  (cost=0.00..36437.62 rows=239976000 width=13)
                                                                                                                                             Filter: (NOT (ws_item_sk IS NULL))
                                                                                                                                       ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                                                                                             ->  Partition Selector for web_sales (dynamic scan id: 1)  (cost=10.00..100.00 rows=34 width=4)
                                                                                                                                                   ->  Broadcast Motion 3:3  (slice4; segments: 3)  (cost=0.00..433.81 rows=356 width=8)
                                                                                                                                                         ->  Table Scan on date_dim date_dim_1  (cost=0.00..433.76 rows=119 width=8)
                                                                                                                                                               Filter: ((d_month_seq >= 1212) AND (d_month_seq <= 1223))
                                                                     ->  Sequence  (cost=0.00..1154177.59 rows=3919463416 width=32)
                                                                           ->  Shared Scan (share slice:id 7:3)  (cost=0.00..406507.17 rows=19534610 width=1)
                                                                                 ->  Materialize  (cost=0.00..406507.17 rows=19534610 width=1)
                                                                                       ->  WindowAgg  (cost=0.00..406487.64 rows=19534610 width=16)
                                                                                             Partition By: store_sales.ss_item_sk
                                                                                             Order By: date_dim.d_date
                                                                                             ->  Sort  (cost=0.00..406175.08 rows=19534610 width=16)
                                                                                                   Sort Key: store_sales.ss_item_sk, date_dim.d_date
                                                                                                   ->  Redistribute Motion 3:3  (slice3; segments: 3)  (cost=0.00..363253.72 rows=19534610 width=16)
                                                                                                         Hash Key: store_sales.ss_item_sk
                                                                                                         ->  Result  (cost=0.00..362275.43 rows=19534610 width=16)
                                                                                                               ->  HashAggregate  (cost=0.00..362275.43 rows=19534610 width=16)
                                                                                                                     Group Key: store_sales.ss_item_sk, date_dim.d_date
                                                                                                                     ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=0.00..357341.77 rows=19534610 width=16)
                                                                                                                           Hash Key: store_sales.ss_item_sk, date_dim.d_date
                                                                                                                           ->  Result  (cost=0.00..356363.48 rows=19534610 width=16)
                                                                                                                                 ->  HashAggregate  (cost=0.00..356363.48 rows=19534610 width=16)
                                                                                                                                       Group Key: store_sales.ss_item_sk, date_dim.d_date
                                                                                                                                       ->  Hash Join  (cost=0.00..309692.51 rows=187781371 width=14)
                                                                                                                                             Hash Cond: (store_sales.ss_sold_date_sk = date_dim.d_date_sk)
                                                                                                                                             ->  Dynamic Table Scan on store_sales (dynamic scan id: 2)  (cost=0.00..125112.47 rows=959516674 width=14)
                                                                                                                                                   Filter: (NOT (ss_item_sk IS NULL))
                                                                                                                                             ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                                                                                                   ->  Partition Selector for store_sales (dynamic scan id: 2)  (cost=10.00..100.00 rows=34 width=4)
                                                                                                                                                         ->  Broadcast Motion 3:3  (slice1; segments: 3)  (cost=0.00..433.81 rows=356 width=8)
                                                                                                                                                               ->  Table Scan on date_dim  (cost=0.00..433.76 rows=119 width=8)
                                                                                                                                                                     Filter: ((d_month_seq >= 1212) AND (d_month_seq <= 1223))
                                                                           ->  Append  (cost=0.00..622247.59 rows=3919463416 width=32)
                                                                                 ->  Hash Left Join  (cost=0.00..469342.01 rows=3911649572 width=32)
                                                                                       Hash Cond: ((share2_ref2.ws_item_sk = share3_ref2.ss_item_sk) AND (share2_ref2.d_date = share3_ref2.d_date))
                                                                                       ->  Shared Scan (share slice:id 7:2)  (cost=0.00..1184.45 rows=19539750 width=16)
                                                                                       ->  Hash  (cost=1184.25..1184.25 rows=19534610 width=16)
                                                                                             ->  Shared Scan (share slice:id 7:3)  (cost=0.00..1184.25 rows=19534610 width=16)
                                                                                 ->  Result  (cost=0.00..27482.75 rows=7813844 width=32)
                                                                                       ->  Hash Anti Join  (cost=0.00..27232.71 rows=7813844 width=16)
                                                                                             Hash Cond: ((share3_ref3.ss_item_sk = share2_ref3.ws_item_sk) AND (share3_ref3.d_date = share2_ref3.d_date))
                                                                                             ->  Shared Scan (share slice:id 7:3)  (cost=0.00..1184.25 rows=19534610 width=16)
                                                                                             ->  Hash  (cost=807.73..807.73 rows=19539750 width=8)
                                                                                                   ->  Shared Scan (share slice:id 7:2)  (cost=0.00..807.73 rows=19539750 width=8)
 Planning time: 466.308 ms
 Optimizer: PQO version 3.8.0
(87 rows)

-- end query 1 in stream 0 using template query51.tpl
