-- start query 1 in stream 0 using template query21.tpl
explain
select  *
 from(select w_warehouse_name
            ,i_item_id
            ,sum(case when (cast(d_date as date) < cast ('1998-04-08' as date))
	                then inv_quantity_on_hand 
                      else 0 end) as inv_before
            ,sum(case when (cast(d_date as date) >= cast ('1998-04-08' as date))
                      then inv_quantity_on_hand 
                      else 0 end) as inv_after
   from inventory
       ,warehouse
       ,item
       ,date_dim
   where i_current_price between 0.99 and 1.49
     and i_item_sk          = inv_item_sk
     and inv_warehouse_sk   = w_warehouse_sk
     and inv_date_sk    = d_date_sk
     and d_date between (cast ('1998-04-08' as date) - 30 )
                    and (cast ('1998-04-08' as date) + 30 )
   group by w_warehouse_name, i_item_id) x
 where (case when inv_before > 0 
             then inv_after / inv_before 
             else null
             end) between 2.0/3.0 and 3.0/2.0
 order by w_warehouse_name
         ,i_item_id
 limit 100;


 Limit  (cost=0.00..69896.94 rows=34 width=50)
   ->  Gather Motion 3:1  (slice5; segments: 3)  (cost=0.00..69896.94 rows=100 width=50)
         Merge Key: warehouse.w_warehouse_name, item.i_item_id
         ->  Limit  (cost=0.00..69896.92 rows=34 width=50)
               ->  Sort  (cost=0.00..69896.92 rows=20691 width=50)
                     Sort Key: warehouse.w_warehouse_name, item.i_item_id
                     ->  Result  (cost=0.00..69812.82 rows=20691 width=50)
                           Filter: (((CASE WHEN ((pg_catalog.sum((sum(CASE WHEN (date_dim.d_date < '04-08-1998'::date) THEN inventory.inv_quantity_on_hand ELSE 0 END)))) > 0) THEN ((pg_catalog.sum((sum(CASE WHEN (date_dim.d_date >= '04-08-1998'::date) THEN inventory.inv_quantity_on_hand ELSE 0 END)))) / (pg_catalog.sum((sum(CASE WHEN (date_dim.d_date < '04-08-1998'::date) THEN inventory.inv_quantity_on_hand ELSE 0 END))))) ELSE NULL::bigint END)::numeric >= 0.66666666666666666667) AND ((CASE WHEN ((pg_catalog.sum((sum(CASE WHEN (date_dim.d_date < '04-08-1998'::date) THEN inventory.inv_quantity_on_hand ELSE 0 END)))) > 0) THEN ((pg_catalog.sum((sum(CASE WHEN (date_dim.d_date >= '04-08-1998'::date) THEN inventory.inv_quantity_on_hand ELSE 0 END)))) / (pg_catalog.sum((sum(CASE WHEN (date_dim.d_date < '04-08-1998'::date) THEN inventory.inv_quantity_on_hand ELSE 0 END))))) ELSE NULL::bigint END)::numeric <= 1.5000000000000000))
                           ->  HashAggregate  (cost=0.00..69808.04 rows=72741 width=50)
                                 Group Key: warehouse.w_warehouse_name, item.i_item_id
                                 ->  Redistribute Motion 3:3  (slice4; segments: 3)  (cost=0.00..69787.72 rows=72741 width=50)
                                       Hash Key: warehouse.w_warehouse_name, item.i_item_id
                                       ->  Result  (cost=0.00..69776.34 rows=72741 width=50)
                                             ->  HashAggregate  (cost=0.00..69776.34 rows=72741 width=50)
                                                   Group Key: warehouse.w_warehouse_name, item.i_item_id
                                                   ->  Hash Join  (cost=0.00..68659.49 rows=4207110 width=42)
                                                         Hash Cond: (inventory.inv_warehouse_sk = warehouse.w_warehouse_sk)
                                                         ->  Hash Join  (cost=0.00..66804.53 rows=4207112 width=29)
                                                               Hash Cond: (inventory.inv_date_sk = date_dim.d_date_sk)
                                                               ->  Hash Join  (cost=0.00..62634.13 rows=17285966 width=29)
                                                                     Hash Cond: (inventory.inv_item_sk = item.i_item_sk)
                                                                     ->  Dynamic Table Scan on inventory (dynamic scan id: 1)  (cost=0.00..4737.50 rows=261000000 width=16)
                                                                     ->  Hash  (cost=458.58..458.58 rows=19398 width=21)
                                                                           ->  Broadcast Motion 3:3  (slice1; segments: 3)  (cost=0.00..458.58 rows=19398 width=21)
                                                                                 ->  Table Scan on item  (cost=0.00..451.28 rows=6466 width=21)
                                                                                       Filter: ((i_current_price >= 0.99) AND (i_current_price <= 1.49))
                                                               ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                     ->  Partition Selector for inventory (dynamic scan id: 1)  (cost=10.00..100.00 rows=34 width=4)
                                                                           ->  Broadcast Motion 3:3  (slice2; segments: 3)  (cost=0.00..433.77 rows=63 width=8)
                                                                                 ->  Table Scan on date_dim  (cost=0.00..433.76 rows=21 width=8)
                                                                                       Filter: ((d_date >= '03-09-1998'::date) AND (d_date <= '05-08-1998'::date))
                                                         ->  Hash  (cost=431.01..431.01 rows=20 width=21)
                                                               ->  Broadcast Motion 3:3  (slice3; segments: 3)  (cost=0.00..431.01 rows=20 width=21)
                                                                     ->  Table Scan on warehouse  (cost=0.00..431.00 rows=7 width=21)
 Planning time: 400.786 ms
 Optimizer: PQO version 3.8.0
(36 rows)

-- end query 1 in stream 0 using template query21.tpl
