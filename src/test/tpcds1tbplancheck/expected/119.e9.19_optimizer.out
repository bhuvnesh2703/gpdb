-- start query 1 in stream 0 using template query19.tpl
explain
select  i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
   and ss_item_sk = i_item_sk
   and i_manager_id=7
   and d_moy=11
   and d_year=1999
   and ss_customer_sk = c_customer_sk 
   and c_current_addr_sk = ca_address_sk
   and substr(ca_zip,1,5) <> substr(s_zip,1,5) 
   and ss_store_sk = s_store_sk 
 group by i_brand
      ,i_brand_id
      ,i_manufact_id
      ,i_manufact
 order by ext_price desc
         ,i_brand
         ,i_brand_id
         ,i_manufact_id
         ,i_manufact
limit 100 ;
                                                                                           QUERY PLAN                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.00..300124.40 rows=34 width=45)
   ->  Gather Motion 3:1  (slice7; segments: 3)  (cost=0.00..300124.40 rows=100 width=45)
         Merge Key: (pg_catalog.sum((sum(store_sales.ss_ext_sales_price)))), item.i_brand, item.i_brand_id, item.i_manufact_id, item.i_manufact
         ->  Limit  (cost=0.00..300124.38 rows=34 width=45)
               ->  Sort  (cost=0.00..300124.38 rows=1721 width=45)
                     Sort Key: (pg_catalog.sum((sum(store_sales.ss_ext_sales_price)))), item.i_brand, item.i_brand_id, item.i_manufact_id, item.i_manufact
                     ->  HashAggregate  (cost=0.00..300119.66 rows=1721 width=45)
                           Group Key: item.i_brand, item.i_brand_id, item.i_manufact_id, item.i_manufact
                           ->  Redistribute Motion 3:3  (slice6; segments: 3)  (cost=0.00..300118.76 rows=1721 width=45)
                                 Hash Key: item.i_brand, item.i_brand_id, item.i_manufact_id, item.i_manufact
                                 ->  Result  (cost=0.00..300118.51 rows=1721 width=45)
                                       ->  HashAggregate  (cost=0.00..300118.51 rows=1721 width=45)
                                             Group Key: item.i_brand, item.i_brand_id, item.i_manufact_id, item.i_manufact
                                             ->  Hash Join  (cost=0.00..300015.13 rows=201561 width=43)
                                                   Hash Cond: (store_sales.ss_store_sk = store.s_store_sk)
                                                   Join Filter: (substr((customer_address.ca_zip)::text, 1, 5) <> substr((store.s_zip)::text, 1, 5))
                                                   ->  Hash Join  (cost=0.00..299361.71 rows=503901 width=53)
                                                         Hash Cond: (customer.c_current_addr_sk = customer_address.ca_address_sk)
                                                         ->  Redistribute Motion 3:3  (slice4; segments: 3)  (cost=0.00..297891.89 rows=503901 width=51)
                                                               Hash Key: customer.c_current_addr_sk
                                                               ->  Hash Join  (cost=0.00..297811.45 rows=503901 width=51)
                                                                     Hash Cond: (store_sales.ss_customer_sk = customer.c_customer_sk)
                                                                     ->  Redistribute Motion 3:3  (slice3; segments: 3)  (cost=0.00..295677.97 rows=503901 width=51)
                                                                           Hash Key: store_sales.ss_customer_sk
                                                                           ->  Hash Join  (cost=0.00..295597.53 rows=503901 width=51)
                                                                                 Hash Cond: (store_sales.ss_item_sk = item.i_item_sk)
                                                                                 ->  Hash Join  (cost=0.00..289769.50 rows=28565779 width=18)
                                                                                       Hash Cond: (store_sales.ss_sold_date_sk = date_dim.d_date_sk)
                                                                                       ->  Dynamic Table Scan on store_sales (dynamic scan id: 1)  (cost=0.00..68542.76 rows=959996672 width=22)
                                                                                       ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                                             ->  Partition Selector for store_sales (dynamic scan id: 1)  (cost=10.00..100.00 rows=34 width=4)
                                                                                                   ->  Broadcast Motion 3:3  (slice1; segments: 3)  (cost=0.00..434.56 rows=55 width=4)
                                                                                                         ->  Table Scan on date_dim  (cost=0.00..434.56 rows=19 width=4)
                                                                                                               Filter: ((d_moy = 11) AND (d_year = 1999))
                                                                                 ->  Hash  (cost=454.89..454.89 rows=5163 width=41)
                                                                                       ->  Broadcast Motion 3:3  (slice2; segments: 3)  (cost=0.00..454.89 rows=5163 width=41)
                                                                                             ->  Table Scan on item  (cost=0.00..451.10 rows=1721 width=41)
                                                                                                   Filter: (i_manager_id = 7)
                                                                     ->  Hash  (cost=754.40..754.40 rows=3999967 width=8)
                                                                           ->  Table Scan on customer  (cost=0.00..754.40 rows=3999967 width=8)
                                                         ->  Hash  (cost=581.74..581.74 rows=2000530 width=10)
                                                               ->  Table Scan on customer_address  (cost=0.00..581.74 rows=2000530 width=10)
                                                   ->  Hash  (cost=431.24..431.24 rows=1002 width=10)
                                                         ->  Broadcast Motion 3:3  (slice5; segments: 3)  (cost=0.00..431.24 rows=1002 width=10)
                                                               ->  Table Scan on store  (cost=0.00..431.05 rows=334 width=10)
 Planning time: 850.045 ms
 Optimizer: PQO version 3.8.0
(47 rows)

-- end query 1 in stream 0 using template query19.tpl
