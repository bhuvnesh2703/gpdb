-- start query 1 in stream 0 using template query4.tpl
explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(((ss_ext_list_price-ss_ext_wholesale_cost-ss_ext_discount_amt)+ss_ext_sales_price)/2) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((cs_ext_list_price-cs_ext_wholesale_cost-cs_ext_discount_amt)+cs_ext_sales_price)/2) ) year_total
       ,'c' sale_type
 from customer
     ,catalog_sales
     ,date_dim
 where c_customer_sk = cs_bill_customer_sk
   and cs_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((ws_ext_list_price-ws_ext_wholesale_cost-ws_ext_discount_amt)+ws_ext_sales_price)/2) ) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
         )
  select  t_s_secyear.customer_preferred_cust_flag
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_c_firstyear
     ,year_total t_c_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
   and t_s_firstyear.customer_id = t_c_secyear.customer_id
   and t_s_firstyear.customer_id = t_c_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_secyear.customer_id
   and t_s_firstyear.sale_type = 's'
   and t_c_firstyear.sale_type = 'c'
   and t_w_firstyear.sale_type = 'w'
   and t_s_secyear.sale_type = 's'
   and t_c_secyear.sale_type = 'c'
   and t_w_secyear.sale_type = 'w'
   and t_s_firstyear.dyear =  2001
   and t_s_secyear.dyear = 2001+1
   and t_c_firstyear.dyear =  2001
   and t_c_secyear.dyear =  2001+1
   and t_w_firstyear.dyear = 2001
   and t_w_secyear.dyear = 2001+1
   and t_s_firstyear.year_total > 0
   and t_c_firstyear.year_total > 0
   and t_w_firstyear.year_total > 0
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
 order by t_s_secyear.customer_preferred_cust_flag
limit 100;


 Gather Motion 3:1  (slice18; segments: 3)  (cost=0.00..2021635.83 rows=100 width=2)
   Merge Key: share0_ref4.c_preferred_cust_flag
   ->  Sort  (cost=0.00..2021635.83 rows=34 width=2)
         Sort Key: share0_ref4.c_preferred_cust_flag
         ->  Sequence  (cost=0.00..2021635.83 rows=34 width=2)
               ->  Shared Scan (share slice:id 18:0)  (cost=0.00..1997550.97 rows=9449927 width=1)
                     ->  Materialize  (cost=0.00..1997550.97 rows=9449927 width=1)
                           ->  Append  (cost=0.00..1997541.52 rows=9449927 width=89)
                                 ->  Result  (cost=0.00..1118469.16 rows=3149976 width=89)
                                       Filter: ((("outer".sale_type = 's'::text) AND (date_dim.d_year = 2001) AND ((pg_catalog.sum((sum(((((store_sales.ss_ext_list_price - store_sales.ss_ext_wholesale_cost) - store_sales.ss_ext_discount_amt) + store_sales.ss_ext_sales_price) / 2::numeric))))) > 0::numeric)) OR (("outer".sale_type = 's'::text) AND (date_dim.d_year = 2002)) OR (("outer".sale_type = 'c'::text) AND (date_dim.d_year = 2001) AND ((pg_catalog.sum((sum(((((store_sales.ss_ext_list_price - store_sales.ss_ext_wholesale_cost) - store_sales.ss_ext_discount_amt) + store_sales.ss_ext_sales_price) / 2::numeric))))) > 0::numeric)) OR (("outer".sale_type = 'c'::text) AND (date_dim.d_year = 2002)) OR (("outer".sale_type = 'w'::text) AND (date_dim.d_year = 2001) AND ((pg_catalog.sum((sum(((((store_sales.ss_ext_list_price - store_sales.ss_ext_wholesale_cost) - store_sales.ss_ext_discount_amt) + store_sales.ss_ext_sales_price) / 2::numeric))))) > 0::numeric)) OR (("outer".sale_type = 'w'::text) AND (date_dim.d_year = 2002)))
                                       ->  Result  (cost=0.00..1118025.01 rows=4499963 width=89)
                                             ->  HashAggregate  (cost=0.00..1117624.52 rows=4499963 width=81)
                                                   Group Key: customer.c_customer_id, customer.c_first_name, customer.c_last_name, customer.c_preferred_cust_flag, customer.c_birth_country, customer.c_login, customer.c_email_address, date_dim.d_year
                                                   ->  Redistribute Motion 3:3  (slice11; segments: 3)  (cost=0.00..1112773.48 rows=4499963 width=81)
                                                         Hash Key: customer.c_customer_id, customer.c_first_name, customer.c_last_name, customer.c_preferred_cust_flag, customer.c_birth_country, customer.c_login, customer.c_email_address, date_dim.d_year
                                                         ->  Result  (cost=0.00..1111632.60 rows=4499963 width=81)
                                                               ->  HashAggregate  (cost=0.00..1111632.60 rows=4499963 width=81)
                                                                     Group Key: customer.c_customer_id, customer.c_first_name, customer.c_last_name, customer.c_preferred_cust_flag, customer.c_birth_country, customer.c_login, customer.c_email_address, date_dim.d_year
                                                                     ->  Hash Join  (cost=0.00..704131.40 rows=386051658 width=95)
                                                                           Hash Cond: (store_sales.ss_customer_sk = customer.c_customer_sk)
                                                                           ->  Hash Join  (cost=0.00..347466.64 rows=386051658 width=30)
                                                                                 Hash Cond: (store_sales.ss_sold_date_sk = date_dim.d_date_sk)
                                                                                 ->  Dynamic Table Scan on store_sales (dynamic scan id: 1)  (cost=0.00..68542.76 rows=959996672 width=30)
                                                                                 ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                                       ->  Partition Selector for store_sales (dynamic scan id: 1)  (cost=10.00..100.00 rows=34 width=4)
                                                                                             ->  Broadcast Motion 3:3  (slice9; segments: 3)  (cost=0.00..433.86 rows=732 width=8)
                                                                                                   ->  Table Scan on date_dim  (cost=0.00..433.76 rows=244 width=8)
                                                                                                         Filter: ((d_year = 2001) OR (d_year = 2002))
                                                                           ->  Hash  (cost=16977.78..16977.78 rows=11999900 width=73)
                                                                                 ->  Broadcast Motion 3:3  (slice10; segments: 3)  (cost=0.00..16977.78 rows=11999900 width=73)
                                                                                       ->  Table Scan on customer  (cost=0.00..754.40 rows=3999967 width=73)
                                 ->  Result  (cost=0.00..578881.63 rows=3149976 width=89)
                                       Filter: ((("outer".sale_type = 's'::text) AND (date_dim_1.d_year = 2001) AND ((pg_catalog.sum((sum(((((catalog_sales.cs_ext_list_price - catalog_sales.cs_ext_wholesale_cost) - catalog_sales.cs_ext_discount_amt) + catalog_sales.cs_ext_sales_price) / 2::numeric))))) > 0::numeric)) OR (("outer".sale_type = 's'::text) AND (date_dim_1.d_year = 2002)) OR (("outer".sale_type = 'c'::text) AND (date_dim_1.d_year = 2001) AND ((pg_catalog.sum((sum(((((catalog_sales.cs_ext_list_price - catalog_sales.cs_ext_wholesale_cost) - catalog_sales.cs_ext_discount_amt) + catalog_sales.cs_ext_sales_price) / 2::numeric))))) > 0::numeric)) OR (("outer".sale_type = 'c'::text) AND (date_dim_1.d_year = 2002)) OR (("outer".sale_type = 'w'::text) AND (date_dim_1.d_year = 2001) AND ((pg_catalog.sum((sum(((((catalog_sales.cs_ext_list_price - catalog_sales.cs_ext_wholesale_cost) - catalog_sales.cs_ext_discount_amt) + catalog_sales.cs_ext_sales_price) / 2::numeric))))) > 0::numeric)) OR (("outer".sale_type = 'w'::text) AND (date_dim_1.d_year = 2002)))
                                       ->  Result  (cost=0.00..578437.48 rows=4499963 width=89)
                                             ->  HashAggregate  (cost=0.00..578036.98 rows=4499963 width=81)
                                                   Group Key: customer_1.c_customer_id, customer_1.c_first_name, customer_1.c_last_name, customer_1.c_preferred_cust_flag, customer_1.c_birth_country, customer_1.c_login, customer_1.c_email_address, date_dim_1.d_year
                                                   ->  Redistribute Motion 3:3  (slice14; segments: 3)  (cost=0.00..573185.95 rows=4499963 width=81)
                                                         Hash Key: customer_1.c_customer_id, customer_1.c_first_name, customer_1.c_last_name, customer_1.c_preferred_cust_flag, customer_1.c_birth_country, customer_1.c_login, customer_1.c_email_address, date_dim_1.d_year
                                                         ->  Result  (cost=0.00..572045.07 rows=4499963 width=81)
                                                               ->  HashAggregate  (cost=0.00..572045.07 rows=4499963 width=81)
                                                                     Group Key: customer_1.c_customer_id, customer_1.c_first_name, customer_1.c_last_name, customer_1.c_preferred_cust_flag, customer_1.c_birth_country, customer_1.c_login, customer_1.c_email_address, date_dim_1.d_year
                                                                     ->  Hash Join  (cost=0.00..369801.26 rows=191549554 width=95)
                                                                           Hash Cond: (catalog_sales.cs_bill_customer_sk = customer_1.c_customer_sk)
                                                                           ->  Redistribute Motion 3:3  (slice13; segments: 3)  (cost=0.00..203611.60 rows=191549554 width=30)
                                                                                 Hash Key: catalog_sales.cs_bill_customer_sk
                                                                                 ->  Hash Join  (cost=0.00..185625.10 rows=191549554 width=30)
                                                                                       Hash Cond: (catalog_sales.cs_sold_date_sk = date_dim_1.d_date_sk)
                                                                                       ->  Dynamic Table Scan on catalog_sales (dynamic scan id: 2)  (cost=0.00..46102.37 rows=479993344 width=30)
                                                                                       ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                                             ->  Partition Selector for catalog_sales (dynamic scan id: 2)  (cost=10.00..100.00 rows=34 width=4)
                                                                                                   ->  Broadcast Motion 3:3  (slice12; segments: 3)  (cost=0.00..433.86 rows=732 width=8)
                                                                                                         ->  Table Scan on date_dim date_dim_1  (cost=0.00..433.76 rows=244 width=8)
                                                                                                               Filter: ((d_year = 2001) OR (d_year = 2002))
                                                                           ->  Hash  (cost=754.40..754.40 rows=3999967 width=73)
                                                                                 ->  Table Scan on customer customer_1  (cost=0.00..754.40 rows=3999967 width=73)
                                 ->  Result  (cost=0.00..299349.69 rows=3149976 width=89)
                                       Filter: ((("outer".sale_type = 's'::text) AND (date_dim_2.d_year = 2001) AND ((pg_catalog.sum((sum(((((web_sales.ws_ext_list_price - web_sales.ws_ext_wholesale_cost) - web_sales.ws_ext_discount_amt) + web_sales.ws_ext_sales_price) / 2::numeric))))) > 0::numeric)) OR (("outer".sale_type = 's'::text) AND (date_dim_2.d_year = 2002)) OR (("outer".sale_type = 'c'::text) AND (date_dim_2.d_year = 2001) AND ((pg_catalog.sum((sum(((((web_sales.ws_ext_list_price - web_sales.ws_ext_wholesale_cost) - web_sales.ws_ext_discount_amt) + web_sales.ws_ext_sales_price) / 2::numeric))))) > 0::numeric)) OR (("outer".sale_type = 'c'::text) AND (date_dim_2.d_year = 2002)) OR (("outer".sale_type = 'w'::text) AND (date_dim_2.d_year = 2001) AND ((pg_catalog.sum((sum(((((web_sales.ws_ext_list_price - web_sales.ws_ext_wholesale_cost) - web_sales.ws_ext_discount_amt) + web_sales.ws_ext_sales_price) / 2::numeric))))) > 0::numeric)) OR (("outer".sale_type = 'w'::text) AND (date_dim_2.d_year = 2002)))
                                       ->  Result  (cost=0.00..298905.55 rows=4499963 width=89)
                                             ->  HashAggregate  (cost=0.00..298505.05 rows=4499963 width=81)
                                                   Group Key: customer_2.c_customer_id, customer_2.c_first_name, customer_2.c_last_name, customer_2.c_preferred_cust_flag, customer_2.c_birth_country, customer_2.c_login, customer_2.c_email_address, date_dim_2.d_year
                                                   ->  Redistribute Motion 3:3  (slice17; segments: 3)  (cost=0.00..293654.01 rows=4499963 width=81)
                                                         Hash Key: customer_2.c_customer_id, customer_2.c_first_name, customer_2.c_last_name, customer_2.c_preferred_cust_flag, customer_2.c_birth_country, customer_2.c_login, customer_2.c_email_address, date_dim_2.d_year
                                                         ->  Result  (cost=0.00..292513.14 rows=4499963 width=81)
                                                               ->  HashAggregate  (cost=0.00..292513.14 rows=4499963 width=81)
                                                                     Group Key: customer_2.c_customer_id, customer_2.c_first_name, customer_2.c_last_name, customer_2.c_preferred_cust_flag, customer_2.c_birth_country, customer_2.c_login, customer_2.c_email_address, date_dim_2.d_year
                                                                     ->  Hash Join  (cost=0.00..190504.78 rows=96566337 width=95)
                                                                           Hash Cond: (web_sales.ws_bill_customer_sk = customer_2.c_customer_sk)
                                                                           ->  Redistribute Motion 3:3  (slice16; segments: 3)  (cost=0.00..101868.92 rows=96566337 width=30)
                                                                                 Hash Key: web_sales.ws_bill_customer_sk
                                                                                 ->  Hash Join  (cost=0.00..92801.34 rows=96566337 width=30)
                                                                                       Hash Cond: (web_sales.ws_sold_date_sk = date_dim_2.d_date_sk)
                                                                                       ->  Dynamic Table Scan on web_sales (dynamic scan id: 3)  (cost=0.00..22739.00 rows=240000000 width=30)
                                                                                       ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                                             ->  Partition Selector for web_sales (dynamic scan id: 3)  (cost=10.00..100.00 rows=34 width=4)
                                                                                                   ->  Broadcast Motion 3:3  (slice15; segments: 3)  (cost=0.00..433.86 rows=732 width=8)
                                                                                                         ->  Table Scan on date_dim date_dim_2  (cost=0.00..433.76 rows=244 width=8)
                                                                                                               Filter: ((d_year = 2001) OR (d_year = 2002))
                                                                           ->  Hash  (cost=754.40..754.40 rows=3999967 width=73)
                                                                                 ->  Table Scan on customer customer_2  (cost=0.00..754.40 rows=3999967 width=73)
               ->  Redistribute Motion 1:3  (slice8)  (cost=0.00..24084.86 rows=100 width=2)
                     ->  Limit  (cost=0.00..24084.86 rows=34 width=2)
                           ->  Gather Motion 3:1  (slice7; segments: 3)  (cost=0.00..24084.86 rows=100 width=2)
                                 Merge Key: share0_ref4.c_preferred_cust_flag
                                 ->  Limit  (cost=0.00..24084.86 rows=34 width=2)
                                       ->  Sort  (cost=0.00..24084.86 rows=52472 width=2)
                                             Sort Key: share0_ref4.c_preferred_cust_flag
                                             ->  Hash Join  (cost=0.00..24075.53 rows=52472 width=2)
                                                   Hash Cond: ((share0_ref7.c_customer_id)::text = (share0_ref3.c_customer_id)::text)
                                                   Join Filter: (CASE WHEN (share0_ref2.sum > 0::numeric) THEN (share0_ref5.sum / share0_ref2.sum) ELSE NULL::numeric END > CASE WHEN (share0_ref7.sum > 0::numeric) THEN (share0_ref6.sum / share0_ref7.sum) ELSE NULL::numeric END)
                                                   ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=0.00..2379.02 rows=2206584 width=25)
                                                         Hash Key: (share0_ref7.c_customer_id)::text
                                                         ->  Result  (cost=0.00..2206.36 rows=2206584 width=25)
                                                               Filter: ((share0_ref7.sale_type = 'w'::text) AND (share0_ref7.d_year = 2001) AND (share0_ref7.sum > 0::numeric))
                                                               ->  Shared Scan (share slice:id 1:0)  (cost=0.00..1273.65 rows=9449927 width=37)
                                                   ->  Hash  (cost=20208.58..20208.58 rows=237792 width=43)
                                                         ->  Hash Join  (cost=0.00..20208.58 rows=237792 width=43)
                                                               Hash Cond: ((share0_ref6.c_customer_id)::text = (share0_ref3.c_customer_id)::text)
                                                               ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=0.00..2141.94 rows=3149976 width=25)
                                                                     Hash Key: (share0_ref6.c_customer_id)::text
                                                                     ->  Result  (cost=0.00..1895.46 rows=3149976 width=25)
                                                                           Filter: ((share0_ref6.sale_type = 'w'::text) AND (share0_ref6.d_year = 2002))
                                                                           ->  Shared Scan (share slice:id 2:0)  (cost=0.00..1273.65 rows=9449927 width=37)
                                                               ->  Hash  (cost=17165.33..17165.33 rows=301958 width=35)
                                                                     ->  Hash Join  (cost=0.00..17165.33 rows=301958 width=35)
                                                                           Hash Cond: ((share0_ref5.c_customer_id)::text = (share0_ref3.c_customer_id)::text)
                                                                           Join Filter: (CASE WHEN (share0_ref2.sum > 0::numeric) THEN (share0_ref5.sum / share0_ref2.sum) ELSE NULL::numeric END > CASE WHEN (share0_ref3.sum > 0::numeric) THEN (share0_ref4.sum / share0_ref3.sum) ELSE NULL::numeric END)
                                                                           ->  Redistribute Motion 3:3  (slice3; segments: 3)  (cost=0.00..2141.94 rows=3149976 width=25)
                                                                                 Hash Key: (share0_ref5.c_customer_id)::text
                                                                                 ->  Result  (cost=0.00..1895.46 rows=3149976 width=25)
                                                                                       Filter: ((share0_ref5.sale_type = 'c'::text) AND (share0_ref5.d_year = 2002))
                                                                                       ->  Shared Scan (share slice:id 3:0)  (cost=0.00..1273.65 rows=9449927 width=37)
                                                                           ->  Hash  (cost=12072.78..12072.78 rows=958595 width=43)
                                                                                 ->  Hash Join  (cost=0.00..12072.78 rows=958595 width=43)
                                                                                       Hash Cond: ((share0_ref4.c_customer_id)::text = (share0_ref3.c_customer_id)::text)
                                                                                       ->  Redistribute Motion 3:3  (slice4; segments: 3)  (cost=0.00..2207.21 rows=3149976 width=27)
                                                                                             Hash Key: (share0_ref4.c_customer_id)::text
                                                                                             ->  Result  (cost=0.00..1941.00 rows=3149976 width=27)
                                                                                                   Filter: ((share0_ref4.sale_type = 's'::text) AND (share0_ref4.d_year = 2002))
                                                                                                   ->  Shared Scan (share slice:id 4:0)  (cost=0.00..1319.20 rows=9449927 width=39)
                                                                                       ->  Hash  (cost=8088.46..8088.46 rows=1217263 width=33)
                                                                                             ->  Hash Join  (cost=0.00..8088.46 rows=1217263 width=33)
                                                                                                   Hash Cond: ((share0_ref3.c_customer_id)::text = (share0_ref2.c_customer_id)::text)
                                                                                                   ->  Redistribute Motion 3:3  (slice5; segments: 3)  (cost=0.00..2379.02 rows=2206584 width=25)
                                                                                                         Hash Key: share0_ref3.c_customer_id
                                                                                                         ->  Result  (cost=0.00..2206.36 rows=2206584 width=25)
                                                                                                               Filter: ((share0_ref3.sale_type = 's'::text) AND (share0_ref3.d_year = 2001) AND (share0_ref3.sum > 0::numeric))
                                                                                                               ->  Shared Scan (share slice:id 5:0)  (cost=0.00..1273.65 rows=9449927 width=37)
                                                                                                   ->  Hash  (cost=2379.02..2379.02 rows=2206584 width=25)
                                                                                                         ->  Redistribute Motion 3:3  (slice6; segments: 3)  (cost=0.00..2379.02 rows=2206584 width=25)
                                                                                                               Hash Key: (share0_ref2.c_customer_id)::text
                                                                                                               ->  Result  (cost=0.00..2206.36 rows=2206584 width=25)
                                                                                                                     Filter: ((share0_ref2.sale_type = 'c'::text) AND (share0_ref2.d_year = 2001) AND (share0_ref2.sum > 0::numeric))
                                                                                                                     ->  Shared Scan (share slice:id 6:0)  (cost=0.00..1273.65 rows=9449927 width=37)
 Planning time: 1443.216 ms
 Optimizer: PQO version 3.8.0
(135 rows)

-- end query 1 in stream 0 using template query4.tpl
