-- start query 1 in stream 0 using template query73.tpl
explain
select c_last_name
       ,c_first_name
       ,c_salutation
       ,c_preferred_cust_flag 
       ,ss_ticket_number
       ,cnt from
   (select ss_ticket_number
          ,ss_customer_sk
          ,count(*) cnt
    from store_sales,date_dim,store,household_demographics
    where store_sales.ss_sold_date_sk = date_dim.d_date_sk
    and store_sales.ss_store_sk = store.s_store_sk  
    and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
    and date_dim.d_dom between 1 and 2 
    and (household_demographics.hd_buy_potential = '1001-5000' or
         household_demographics.hd_buy_potential = '5001-10000')
    and household_demographics.hd_vehicle_count > 0
    and case when household_demographics.hd_vehicle_count > 0 then 
             household_demographics.hd_dep_count/ household_demographics.hd_vehicle_count else null end > 1
    and date_dim.d_year in (2000,2000+1,2000+2)
    and store.s_county in ('Daviess County','Coal County','Arthur County','Raleigh County')
    group by ss_ticket_number,ss_customer_sk) dj,customer
    where ss_customer_sk = c_customer_sk
      and cnt between 1 and 5
    order by cnt desc;
                                                                                                                                                            QUERY PLAN                                                                                                                                                             
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice6; segments: 3)  (cost=0.00..315851.71 rows=742544 width=35)
   Merge Key: (count((count())))
   ->  Sort  (cost=0.00..315754.86 rows=247515 width=35)
         Sort Key: (count((count())))
         ->  Hash Join  (cost=0.00..314874.78 rows=247515 width=35)
               Hash Cond: (customer.c_customer_sk = store_sales.ss_customer_sk)
               ->  Table Scan on customer  (cost=0.00..754.40 rows=3999967 width=23)
               ->  Hash  (cost=313030.60..313030.60 rows=247515 width=20)
                     ->  Redistribute Motion 3:3  (slice5; segments: 3)  (cost=0.00..313030.60 rows=247515 width=20)
                           Hash Key: store_sales.ss_customer_sk
                           ->  Result  (cost=0.00..313015.10 rows=247515 width=20)
                                 Filter: (((count((count()))) >= 1) AND ((count((count()))) <= 5))
                                 ->  HashAggregate  (cost=0.00..312994.75 rows=618787 width=20)
                                       Group Key: store_sales.ss_ticket_number, store_sales.ss_customer_sk
                                       ->  Redistribute Motion 3:3  (slice4; segments: 3)  (cost=0.00..312836.52 rows=618787 width=20)
                                             Hash Key: store_sales.ss_ticket_number, store_sales.ss_customer_sk
                                             ->  Result  (cost=0.00..312797.79 rows=618787 width=20)
                                                   ->  HashAggregate  (cost=0.00..312797.79 rows=618787 width=20)
                                                         Group Key: store_sales.ss_ticket_number, store_sales.ss_customer_sk
                                                         ->  Hash Join  (cost=0.00..312639.56 rows=618787 width=12)
                                                               Hash Cond: (store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk)
                                                               ->  Hash Join  (cost=0.00..311224.01 rows=5219560 width=16)
                                                                     Hash Cond: (store_sales.ss_store_sk = store.s_store_sk)
                                                                     ->  Hash Join  (cost=0.00..297575.26 rows=69498793 width=20)
                                                                           Hash Cond: (store_sales.ss_sold_date_sk = date_dim.d_date_sk)
                                                                           ->  Dynamic Table Scan on store_sales (dynamic scan id: 1)  (cost=0.00..68542.76 rows=959996672 width=24)
                                                                           ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                                 ->  Partition Selector for store_sales (dynamic scan id: 1)  (cost=10.00..100.00 rows=34 width=4)
                                                                                       ->  Broadcast Motion 3:3  (slice1; segments: 3)  (cost=0.00..434.57 rows=132 width=4)
                                                                                             ->  Table Scan on date_dim  (cost=0.00..434.56 rows=44 width=4)
                                                                                                   Filter: ((d_dom >= 1) AND (d_dom <= 2) AND (d_year = ANY ('{2000,2001,2002}'::integer[])))
                                                                     ->  Hash  (cost=431.07..431.07 rows=38 width=4)
                                                                           ->  Broadcast Motion 3:3  (slice2; segments: 3)  (cost=0.00..431.07 rows=38 width=4)
                                                                                 ->  Table Scan on store  (cost=0.00..431.06 rows=13 width=4)
                                                                                       Filter: ((s_county)::text = ANY ('{"Daviess County","Coal County","Arthur County","Raleigh County"}'::text[]))
                                                               ->  Hash  (cost=431.38..431.38 rows=855 width=4)
                                                                     ->  Broadcast Motion 3:3  (slice3; segments: 3)  (cost=0.00..431.38 rows=855 width=4)
                                                                           ->  Table Scan on household_demographics  (cost=0.00..431.32 rows=285 width=4)
                                                                                 Filter: ((((hd_buy_potential)::text = '1001-5000'::text) OR ((hd_buy_potential)::text = '5001-10000'::text)) AND (hd_vehicle_count > 0) AND (CASE WHEN (hd_vehicle_count > 0) THEN (hd_dep_count / hd_vehicle_count) ELSE NULL::integer END > 1))
 Planning time: 469.355 ms
 Optimizer: PQO version 3.8.0
(41 rows)

-- end query 1 in stream 0 using template query73.tpl
