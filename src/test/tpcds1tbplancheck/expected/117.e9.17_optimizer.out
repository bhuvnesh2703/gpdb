-- start query 1 in stream 0 using template query17.tpl
explain
select  i_item_id
       ,i_item_desc
       ,s_state
       ,count(ss_quantity) as store_sales_quantitycount
       ,avg(ss_quantity) as store_sales_quantityave
       ,stddev_samp(ss_quantity) as store_sales_quantitystdev
       ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
       ,count(sr_return_quantity) as_store_returns_quantitycount
       ,avg(sr_return_quantity) as_store_returns_quantityave
       ,stddev_samp(sr_return_quantity) as_store_returns_quantitystdev
       ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
       ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
       ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitystdev
       ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
     ,store_returns
     ,catalog_sales
     ,date_dim d1
     ,date_dim d2
     ,date_dim d3
     ,store
     ,item
 where d1.d_quarter_name = '2000Q1'
   and d1.d_date_sk = ss_sold_date_sk
   and i_item_sk = ss_item_sk
   and s_store_sk = ss_store_sk
   and ss_customer_sk = sr_customer_sk
   and ss_item_sk = sr_item_sk
   and ss_ticket_number = sr_ticket_number
   and sr_returned_date_sk = d2.d_date_sk
   and d2.d_quarter_name in ('2000Q1','2000Q2','2000Q3')
   and sr_customer_sk = cs_bill_customer_sk
   and sr_item_sk = cs_item_sk
   and cs_sold_date_sk = d3.d_date_sk
   and d3.d_quarter_name in ('2000Q1','2000Q2','2000Q3')
 group by i_item_id
         ,i_item_desc
         ,s_state
 order by i_item_id
         ,i_item_desc
         ,s_state
limit 100;
                                                                                                                                                                                   QUERY PLAN                                                                                                                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.00..1581708.26 rows=34 width=120)
   ->  Gather Motion 3:1  (slice8; segments: 3)  (cost=0.00..1581708.25 rows=100 width=120)
         Merge Key: item.i_item_id, item.i_item_desc, store.s_state
         ->  Limit  (cost=0.00..1581708.20 rows=34 width=120)
               ->  Result  (cost=0.00..1581708.20 rows=477 width=120)
                     ->  GroupAggregate  (cost=0.00..1581708.14 rows=477 width=250)
                           Group Key: item.i_item_id, item.i_item_desc, store.s_state
                           ->  Sort  (cost=0.00..1581707.96 rows=477 width=250)
                                 Sort Key: item.i_item_id, item.i_item_desc, store.s_state
                                 ->  Redistribute Motion 3:3  (slice7; segments: 3)  (cost=0.00..1581701.95 rows=477 width=250)
                                       Hash Key: item.i_item_id, item.i_item_desc, store.s_state
                                       ->  Result  (cost=0.00..1581701.58 rows=477 width=250)
                                             ->  HashAggregate  (cost=0.00..1581701.58 rows=477 width=250)
                                                   Group Key: item.i_item_id, item.i_item_desc, store.s_state
                                                   ->  Hash Join  (cost=0.00..1581701.30 rows=477 width=134)
                                                         Hash Cond: (date_dim.d_date_sk = store_sales.ss_sold_date_sk)
                                                         ->  Table Scan on date_dim  (cost=0.00..433.76 rows=31 width=4)
                                                               Filter: ((d_quarter_name)::text = '2000Q1'::text)
                                                         ->  Hash  (cost=1581236.66..1581236.66 rows=9484 width=138)
                                                               ->  Redistribute Motion 3:3  (slice6; segments: 3)  (cost=0.00..1581236.66 rows=9484 width=138)
                                                                     Hash Key: store_sales.ss_sold_date_sk
                                                                     ->  Hash Join  (cost=0.00..1581232.56 rows=9484 width=138)
                                                                           Hash Cond: ((item.i_item_sk = store_sales.ss_item_sk) AND (item.i_item_sk = store_returns.sr_item_sk) AND (item.i_item_sk = catalog_sales.cs_item_sk))
                                                                           ->  Table Scan on item  (cost=0.00..447.68 rows=99749 width=123)
                                                                           ->  Hash  (cost=1580706.77..1580706.77 rows=9484 width=31)
                                                                                 ->  Redistribute Motion 3:3  (slice5; segments: 3)  (cost=0.00..1580706.77 rows=9484 width=31)
                                                                                       Hash Key: catalog_sales.cs_item_sk
                                                                                       ->  Hash Join  (cost=0.00..1580705.85 rows=9484 width=31)
                                                                                             Hash Cond: (store_sales.ss_store_sk = store.s_store_sk)
                                                                                             ->  Hash Join  (cost=0.00..1580271.55 rows=9484 width=32)
                                                                                                   Hash Cond: (catalog_sales.cs_sold_date_sk = date_dim_2.d_date_sk)
                                                                                                   ->  Hash Join  (cost=0.00..1579799.84 rows=188316 width=36)
                                                                                                         Hash Cond: ((catalog_sales.cs_bill_customer_sk = store_returns.sr_customer_sk) AND (catalog_sales.cs_item_sk = store_returns.sr_item_sk) AND (catalog_sales.cs_bill_customer_sk = store_sales.ss_customer_sk) AND (catalog_sales.cs_item_sk = store_sales.ss_item_sk))
                                                                                                         ->  Dynamic Table Scan on catalog_sales (dynamic scan id: 3)  (cost=0.00..46102.37 rows=479993344 width=16)
                                                                                                         ->  Hash  (cost=1264323.19..1264323.19 rows=117276 width=32)
                                                                                                               ->  Broadcast Motion 3:3  (slice2; segments: 3)  (cost=0.00..1264323.19 rows=117276 width=32)
                                                                                                                     ->  Hash Join  (cost=0.00..1264256.02 rows=39092 width=32)
                                                                                                                           Hash Cond: (store_returns.sr_returned_date_sk = date_dim_1.d_date_sk)
                                                                                                                           ->  Hash Join  (cost=0.00..1263652.42 rows=845261 width=36)
                                                                                                                                 Hash Cond: ((store_returns.sr_customer_sk = store_sales.ss_customer_sk) AND (store_returns.sr_item_sk = store_sales.ss_item_sk) AND (store_returns.sr_ticket_number = store_sales.ss_ticket_number))
                                                                                                                                 ->  Dynamic Table Scan on store_returns (dynamic scan id: 2)  (cost=0.00..6080.60 rows=96000000 width=24)
                                                                                                                                 ->  Hash  (cost=68542.76..68542.76 rows=959996672 width=28)
                                                                                                                                       ->  Sequence  (cost=0.00..68542.76 rows=959996672 width=28)
                                                                                                                                             ->  Partition Selector for store_sales (dynamic scan id: 1)  (cost=10.00..100.00 rows=34 width=4)
                                                                                                                                                   Partitions selected: 80 (out of 80)
                                                                                                                                             ->  Dynamic Table Scan on store_sales (dynamic scan id: 1)  (cost=0.00..68542.76 rows=959996672 width=28)
                                                                                                                           ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                                                                                 ->  Partition Selector for store_returns (dynamic scan id: 2)  (cost=10.00..100.00 rows=34 width=4)
                                                                                                                                       ->  Broadcast Motion 3:3  (slice1; segments: 3)  (cost=0.00..433.76 rows=93 width=4)
                                                                                                                                             ->  Table Scan on date_dim date_dim_1  (cost=0.00..433.76 rows=31 width=4)
                                                                                                                                                   Filter: ((d_quarter_name)::text = ANY ('{2000Q1,2000Q2,2000Q3}'::text[]))
                                                                                                   ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                                                         ->  Partition Selector for catalog_sales (dynamic scan id: 3)  (cost=10.00..100.00 rows=34 width=4)
                                                                                                               ->  Broadcast Motion 3:3  (slice3; segments: 3)  (cost=0.00..433.76 rows=93 width=4)
                                                                                                                     ->  Table Scan on date_dim date_dim_2  (cost=0.00..433.76 rows=31 width=4)
                                                                                                                           Filter: ((d_quarter_name)::text = ANY ('{2000Q1,2000Q2,2000Q3}'::text[]))
                                                                                             ->  Hash  (cost=431.18..431.18 rows=1002 width=7)
                                                                                                   ->  Broadcast Motion 3:3  (slice4; segments: 3)  (cost=0.00..431.18 rows=1002 width=7)
                                                                                                         ->  Table Scan on store  (cost=0.00..431.05 rows=334 width=7)
 Planning time: 2340.466 ms
 Optimizer: PQO version 3.8.0
(61 rows)

-- end query 1 in stream 0 using template query17.tpl
