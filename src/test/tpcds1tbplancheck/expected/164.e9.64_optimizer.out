-- start query 1 in stream 0 using template query64.tpl
explain
with cs_ui as
 (select cs_item_sk
        ,sum(cs_ext_list_price) as sale,sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit) as refund
  from catalog_sales
      ,catalog_returns
  where cs_item_sk = cr_item_sk
    and cs_order_number = cr_order_number
  group by cs_item_sk
  having sum(cs_ext_list_price)>2*sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit)),
cross_sales as
 (select i_product_name product_name
     ,i_item_sk item_sk
     ,s_store_name store_name
     ,s_zip store_zip
     ,ad1.ca_street_number b_street_number
     ,ad1.ca_street_name b_streen_name
     ,ad1.ca_city b_city
     ,ad1.ca_zip b_zip
     ,ad2.ca_street_number c_street_number
     ,ad2.ca_street_name c_street_name
     ,ad2.ca_city c_city
     ,ad2.ca_zip c_zip
     ,d1.d_year as syear
     ,d2.d_year as fsyear
     ,d3.d_year s2year
     ,count(*) cnt
     ,sum(ss_wholesale_cost) s1
     ,sum(ss_list_price) s2
     ,sum(ss_coupon_amt) s3
  FROM   store_sales
        ,store_returns
        ,cs_ui
        ,date_dim d1
        ,date_dim d2
        ,date_dim d3
        ,store
        ,customer
        ,customer_demographics cd1
        ,customer_demographics cd2
        ,promotion
        ,household_demographics hd1
        ,household_demographics hd2
        ,customer_address ad1
        ,customer_address ad2
        ,income_band ib1
        ,income_band ib2
        ,item
  WHERE  ss_store_sk = s_store_sk AND
         ss_sold_date_sk = d1.d_date_sk AND
         ss_customer_sk = c_customer_sk AND
         ss_cdemo_sk= cd1.cd_demo_sk AND
         ss_hdemo_sk = hd1.hd_demo_sk AND
         ss_addr_sk = ad1.ca_address_sk and
         ss_item_sk = i_item_sk and
         ss_item_sk = sr_item_sk and
         ss_ticket_number = sr_ticket_number and
         ss_item_sk = cs_ui.cs_item_sk and
         c_current_cdemo_sk = cd2.cd_demo_sk AND
         c_current_hdemo_sk = hd2.hd_demo_sk AND
         c_current_addr_sk = ad2.ca_address_sk and
         c_first_sales_date_sk = d2.d_date_sk and
         c_first_shipto_date_sk = d3.d_date_sk and
         ss_promo_sk = p_promo_sk and
         hd1.hd_income_band_sk = ib1.ib_income_band_sk and
         hd2.hd_income_band_sk = ib2.ib_income_band_sk and
         cd1.cd_marital_status <> cd2.cd_marital_status and
         i_color in ('maroon','burnished','dim','steel','navajo','chocolate') and
         i_current_price between 35 and 35 + 10 and
         i_current_price between 35 + 1 and 35 + 15
group by i_product_name
       ,i_item_sk
       ,s_store_name
       ,s_zip
       ,ad1.ca_street_number
       ,ad1.ca_street_name
       ,ad1.ca_city
       ,ad1.ca_zip
       ,ad2.ca_street_number
       ,ad2.ca_street_name
       ,ad2.ca_city
       ,ad2.ca_zip
       ,d1.d_year
       ,d2.d_year
       ,d3.d_year
)
select cs1.product_name
     ,cs1.store_name
     ,cs1.store_zip
     ,cs1.b_street_number
     ,cs1.b_streen_name
     ,cs1.b_city
     ,cs1.b_zip
     ,cs1.c_street_number
     ,cs1.c_street_name
     ,cs1.c_city
     ,cs1.c_zip
     ,cs1.syear
     ,cs1.cnt
     ,cs1.s1
     ,cs1.s2
     ,cs1.s3
     ,cs2.s1
     ,cs2.s2
     ,cs2.s3
     ,cs2.syear
     ,cs2.cnt
from cross_sales cs1,cross_sales cs2
where cs1.item_sk=cs2.item_sk and
     cs1.syear = 2000 and
     cs2.syear = 2000 + 1 and
     cs2.cnt <= cs1.cnt and
     cs1.store_name = cs2.store_name and
     cs1.store_zip = cs2.store_zip
order by cs1.product_name
       ,cs1.store_name
       ,cs2.cnt
limit 100;


 Gather Motion 3:1  (slice22; segments: 3)  (cost=0.00..1203740.85 rows=100 width=159)
   Merge Key: share1_ref3.i_product_name, share1_ref3.s_store_name, share1_ref2.cnt
   ->  Sort  (cost=0.00..1203740.79 rows=34 width=159)
         Sort Key: share1_ref3.i_product_name, share1_ref3.s_store_name, share1_ref2.cnt
         ->  Sequence  (cost=0.00..1203740.64 rows=34 width=159)
               ->  Shared Scan (share slice:id 22:1)  (cost=0.00..1202874.80 rows=1002 width=1)
                     ->  Materialize  (cost=0.00..1202874.80 rows=1002 width=1)
                           ->  HashAggregate  (cost=0.00..1202874.80 rows=1002 width=135)
                                 Group Key: item.i_product_name, item.i_item_sk, store.s_store_name, store.s_zip, customer_address_1.ca_street_number, customer_address_1.ca_street_name, customer_address_1.ca_city, customer_address_1.ca_zip, customer_address.ca_street_number, customer_address.ca_street_name, customer_address.ca_city, customer_address.ca_zip, date_dim.d_year, date_dim_1.d_year, date_dim_2.d_year
                                 ->  Redistribute Motion 3:3  (slice21; segments: 3)  (cost=0.00..1202872.69 rows=1002 width=135)
                                       Hash Key: item.i_product_name, item.i_item_sk, store.s_store_name, store.s_zip, customer_address_1.ca_street_number, customer_address_1.ca_street_name, customer_address_1.ca_city, customer_address_1.ca_zip, customer_address.ca_street_number, customer_address.ca_street_name, customer_address.ca_city, customer_address.ca_zip, date_dim.d_year, date_dim_1.d_year, date_dim_2.d_year
                                       ->  Result  (cost=0.00..1202872.27 rows=1002 width=135)
                                             ->  HashAggregate  (cost=0.00..1202872.27 rows=1002 width=135)
                                                   Group Key: item.i_product_name, item.i_item_sk, store.s_store_name, store.s_zip, customer_address_1.ca_street_number, customer_address_1.ca_street_name, customer_address_1.ca_city, customer_address_1.ca_zip, customer_address.ca_street_number, customer_address.ca_street_name, customer_address.ca_city, customer_address.ca_zip, date_dim.d_year, date_dim_1.d_year, date_dim_2.d_year
                                                   ->  Hash Join  (cost=0.00..1202870.16 rows=1002 width=118)
                                                         Hash Cond: (household_demographics_1.hd_income_band_sk = income_band_1.ib_income_band_sk)
                                                         ->  Hash Join  (cost=0.00..1202438.49 rows=1002 width=122)
                                                               Hash Cond: (customer.c_first_shipto_date_sk = date_dim_2.d_date_sk)
                                                               ->  Redistribute Motion 3:3  (slice19; segments: 3)  (cost=0.00..1201997.64 rows=1002 width=122)
                                                                     Hash Key: customer.c_first_shipto_date_sk
                                                                     ->  Hash Join  (cost=0.00..1201997.26 rows=1002 width=122)
                                                                           Hash Cond: (customer.c_first_sales_date_sk = date_dim_1.d_date_sk)
                                                                           ->  Redistribute Motion 3:3  (slice18; segments: 3)  (cost=0.00..1201556.41 rows=1002 width=122)
                                                                                 Hash Key: customer.c_first_sales_date_sk
                                                                                 ->  Hash Join  (cost=0.00..1201556.03 rows=1002 width=122)
                                                                                       Hash Cond: (customer_address.ca_address_sk = customer.c_current_addr_sk)
                                                                                       ->  Table Scan on customer_address  (cost=0.00..581.74 rows=2000530 width=31)
                                                                                       ->  Hash  (cost=1200470.70..1200470.70 rows=1002 width=99)
                                                                                             ->  Redistribute Motion 3:3  (slice17; segments: 3)  (cost=0.00..1200470.70 rows=1002 width=99)
                                                                                                   Hash Key: customer.c_current_addr_sk
                                                                                                   ->  Hash Join  (cost=0.00..1200470.39 rows=1002 width=99)
                                                                                                         Hash Cond: (customer.c_current_cdemo_sk = customer_demographics_1.cd_demo_sk)
                                                                                                         Join Filter: (customer_demographics.cd_marital_status <> customer_demographics_1.cd_marital_status)
                                                                                                         ->  Redistribute Motion 3:3  (slice16; segments: 3)  (cost=0.00..1199791.23 rows=1002 width=105)
                                                                                                               Hash Key: customer.c_current_cdemo_sk
                                                                                                               ->  Hash Join  (cost=0.00..1199790.90 rows=1002 width=105)
                                                                                                                     Hash Cond: (household_demographics.hd_income_band_sk = income_band.ib_income_band_sk)
                                                                                                                     ->  Hash Join  (cost=0.00..1199359.28 rows=1002 width=109)
                                                                                                                           Hash Cond: (customer.c_current_hdemo_sk = household_demographics_1.hd_demo_sk)
                                                                                                                           ->  Redistribute Motion 3:3  (slice14; segments: 3)  (cost=0.00..1198926.88 rows=1003 width=109)
                                                                                                                                 Hash Key: customer.c_current_hdemo_sk
                                                                                                                                 ->  Hash Join  (cost=0.00..1198926.53 rows=1003 width=109)
                                                                                                                                       Hash Cond: (store_sales.ss_store_sk = store.s_store_sk)
                                                                                                                                       ->  Redistribute Motion 3:3  (slice13; segments: 3)  (cost=0.00..1198494.71 rows=1003 width=103)
                                                                                                                                             Hash Key: store_sales.ss_store_sk
                                                                                                                                             ->  Hash Join  (cost=0.00..1198494.39 rows=1003 width=103)
                                                                                                                                                   Hash Cond: (store_sales.ss_promo_sk = promotion.p_promo_sk)
                                                                                                                                                   ->  Hash Join  (cost=0.00..1198062.35 rows=1003 width=107)
                                                                                                                                                         Hash Cond: (customer.c_customer_sk = store_sales.ss_customer_sk)
                                                                                                                                                         ->  Table Scan on customer  (cost=0.00..754.40 rows=3999967 width=24)
                                                                                                                                                         ->  Hash  (cost=1196373.19..1196373.19 rows=1003 width=91)
                                                                                                                                                               ->  Redistribute Motion 3:3  (slice11; segments: 3)  (cost=0.00..1196373.19 rows=1003 width=91)
                                                                                                                                                                     Hash Key: store_sales.ss_customer_sk
                                                                                                                                                                     ->  Hash Join  (cost=0.00..1196372.91 rows=1003 width=91)
                                                                                                                                                                           Hash Cond: (customer_address_1.ca_address_sk = store_sales.ss_addr_sk)
                                                                                                                                                                           ->  Table Scan on customer_address customer_address_1  (cost=0.00..581.74 rows=2000530 width=31)
                                                                                                                                                                           ->  Hash  (cost=1195288.39..1195288.39 rows=1003 width=68)
                                                                                                                                                                                 ->  Redistribute Motion 3:3  (slice10; segments: 3)  (cost=0.00..1195288.39 rows=1003 width=68)
                                                                                                                                                                                       Hash Key: store_sales.ss_addr_sk
                                                                                                                                                                                       ->  Hash Join  (cost=0.00..1195288.17 rows=1003 width=68)
                                                                                                                                                                                             Hash Cond: (customer_demographics.cd_demo_sk = store_sales.ss_cdemo_sk)
                                                                                                                                                                                             ->  Table Scan on customer_demographics  (cost=0.00..456.00 rows=640260 width=6)
                                                                                                                                                                                             ->  Hash  (cost=1194709.48..1194709.48 rows=1003 width=70)
                                                                                                                                                                                                   ->  Redistribute Motion 3:3  (slice9; segments: 3)  (cost=0.00..1194709.48 rows=1003 width=70)
                                                                                                                                                                                                         Hash Key: store_sales.ss_cdemo_sk
                                                                                                                                                                                                         ->  Hash Join  (cost=0.00..1194709.26 rows=1003 width=70)
                                                                                                                                                                                                               Hash Cond: (store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk)
                                                                                                                                                                                                               ->  Redistribute Motion 3:3  (slice8; segments: 3)  (cost=0.00..1194277.01 rows=1004 width=70)
                                                                                                                                                                                                                     Hash Key: store_sales.ss_hdemo_sk
                                                                                                                                                                                                                     ->  Hash Join  (cost=0.00..1194276.79 rows=1004 width=70)
                                                                                                                                                                                                                           Hash Cond: (store_sales.ss_sold_date_sk = date_dim.d_date_sk)
                                                                                                                                                                                                                           ->  Hash Join  (cost=0.00..1193841.93 rows=2496 width=70)
                                                                                                                                                                                                                                 Hash Cond: ((store_sales.ss_item_sk = item.i_item_sk) AND (store_sales.ss_item_sk = store_returns.sr_item_sk) AND (store_sales.ss_ticket_number = store_returns.sr_ticket_number) AND (store_sales.ss_item_sk = catalog_sales.cs_item_sk))
                                                                                                                                                                                                                                 ->  Dynamic Table Scan on store_sales (dynamic scan id: 3)  (cost=0.00..68542.76 rows=959996672 width=55)
                                                                                                                                                                                                                                 ->  Hash  (cost=494384.22..494384.22 rows=7303 width=43)
                                                                                                                                                                                                                                       ->  Hash Join  (cost=0.00..494384.22 rows=7303 width=43)
                                                                                                                                                                                                                                             Hash Cond: ((store_returns.sr_item_sk = catalog_sales.cs_item_sk) AND (store_returns.sr_item_sk = item.i_item_sk))
                                                                                                                                                                                                                                             ->  Sequence  (cost=0.00..6080.60 rows=96000000 width=12)
                                                                                                                                                                                                                                                   ->  Partition Selector for store_returns (dynamic scan id: 4)  (cost=10.00..100.00 rows=34 width=4)
                                                                                                                                                                                                                                                         Partitions selected: 80 (out of 80)
                                                                                                                                                                                                                                                   ->  Dynamic Table Scan on store_returns (dynamic scan id: 4)  (cost=0.00..6080.60 rows=96000000 width=12)
                                                                                                                                                                                                                                             ->  Hash  (cost=459279.02..459279.02 rows=23 width=31)
                                                                                                                                                                                                                                                   ->  Broadcast Motion 3:3  (slice6; segments: 3)  (cost=0.00..459279.02 rows=23 width=31)
                                                                                                                                                                                                                                                         ->  Hash Join  (cost=0.00..459279.00 rows=8 width=31)
                                                                                                                                                                                                                                                               Hash Cond: (catalog_sales.cs_item_sk = item.i_item_sk)
                                                                                                                                                                                                                                                               ->  Result  (cost=0.00..458817.96 rows=38524 width=4)
                                                                                                                                                                                                                                                                     Filter: ((pg_catalog.sum((sum(catalog_sales.cs_ext_list_price)))) > (2::numeric * (pg_catalog.sum((sum(((catalog_returns.cr_refunded_cash + catalog_returns.cr_reversed_charge) + catalog_returns.cr_store_credit)))))))
                                                                                                                                                                                                                                                                     ->  HashAggregate  (cost=0.00..458811.62 rows=96310 width=20)
                                                                                                                                                                                                                                                                           Group Key: catalog_sales.cs_item_sk
                                                                                                                                                                                                                                                                           ->  Redistribute Motion 3:3  (slice5; segments: 3)  (cost=0.00..458798.77 rows=96310 width=20)
                                                                                                                                                                                                                                                                                 Hash Key: catalog_sales.cs_item_sk
                                                                                                                                                                                                                                                                                 ->  Result  (cost=0.00..458792.74 rows=96310 width=20)
                                                                                                                                                                                                                                                                                       ->  HashAggregate  (cost=0.00..458792.74 rows=96310 width=20)
                                                                                                                                                                                                                                                                                             Group Key: catalog_sales.cs_item_sk
                                                                                                                                                                                                                                                                                             ->  Hash Join  (cost=0.00..456701.34 rows=16354006 width=26)
                                                                                                                                                                                                                                                                                                   Hash Cond: ((catalog_returns.cr_item_sk = catalog_sales.cs_item_sk) AND (catalog_returns.cr_order_number = catalog_sales.cs_order_number))
                                                                                                                                                                                                                                                                                                   ->  Sequence  (cost=0.00..3994.93 rows=47998998 width=27)
                                                                                                                                                                                                                                                                                                         ->  Partition Selector for catalog_returns (dynamic scan id: 2)  (cost=10.00..100.00 rows=34 width=4)
                                                                                                                                                                                                                                                                                                               Partitions selected: 80 (out of 80)
                                                                                                                                                                                                                                                                                                         ->  Dynamic Table Scan on catalog_returns (dynamic scan id: 2)  (cost=0.00..3994.93 rows=47998998 width=27)
                                                                                                                                                                                                                                                                                                   ->  Hash  (cost=46102.37..46102.37 rows=479993344 width=19)
                                                                                                                                                                                                                                                                                                         ->  Sequence  (cost=0.00..46102.37 rows=479993344 width=19)
                                                                                                                                                                                                                                                                                                               ->  Partition Selector for catalog_sales (dynamic scan id: 1)  (cost=10.00..100.00 rows=34 width=4)
                                                                                                                                                                                                                                                                                                                     Partitions selected: 80 (out of 80)
                                                                                                                                                                                                                                                                                                               ->  Dynamic Table Scan on catalog_sales (dynamic scan id: 1)  (cost=0.00..46102.37 rows=479993344 width=19)
                                                                                                                                                                                                                                                               ->  Hash  (cost=454.24..454.24 rows=19 width=27)
                                                                                                                                                                                                                                                                     ->  Table Scan on item  (cost=0.00..454.24 rows=19 width=27)
                                                                                                                                                                                                                                                                           Filter: (((i_color)::text = ANY ('{maroon,burnished,dim,steel,navajo,chocolate}'::text[])) AND (i_current_price >= 35::numeric) AND (i_current_price <= 45::numeric) AND (i_current_price >= 36::numeric) AND (i_current_price <= 50::numeric))
                                                                                                                                                                                                                           ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                                                                                                                                                                                 ->  Partition Selector for store_sales (dynamic scan id: 3)  (cost=10.00..100.00 rows=34 width=4)
                                                                                                                                                                                                                                       ->  Broadcast Motion 3:3  (slice7; segments: 3)  (cost=0.00..433.86 rows=732 width=8)
                                                                                                                                                                                                                                             ->  Table Scan on date_dim  (cost=0.00..433.76 rows=244 width=8)
                                                                                                                                                                                                                                                   Filter: ((d_year = 2000) OR (d_year = 2001))
                                                                                                                                                                                                               ->  Hash  (cost=431.07..431.07 rows=2400 width=8)
                                                                                                                                                                                                                     ->  Table Scan on household_demographics  (cost=0.00..431.07 rows=2400 width=8)
                                                                                                                                                   ->  Hash  (cost=431.15..431.15 rows=1500 width=4)
                                                                                                                                                         ->  Broadcast Motion 3:3  (slice12; segments: 3)  (cost=0.00..431.15 rows=1500 width=4)
                                                                                                                                                               ->  Table Scan on promotion  (cost=0.00..431.04 rows=500 width=4)
                                                                                                                                       ->  Hash  (cost=431.05..431.05 rows=334 width=14)
                                                                                                                                             ->  Table Scan on store  (cost=0.00..431.05 rows=334 width=14)
                                                                                                                           ->  Hash  (cost=431.07..431.07 rows=2400 width=8)
                                                                                                                                 ->  Table Scan on household_demographics household_demographics_1  (cost=0.00..431.07 rows=2400 width=8)
                                                                                                                     ->  Hash  (cost=431.00..431.00 rows=20 width=4)
                                                                                                                           ->  Broadcast Motion 3:3  (slice15; segments: 3)  (cost=0.00..431.00 rows=20 width=4)
                                                                                                                                 ->  Table Scan on income_band  (cost=0.00..431.00 rows=7 width=4)
                                                                                                         ->  Hash  (cost=456.00..456.00 rows=640260 width=6)
                                                                                                               ->  Table Scan on customer_demographics customer_demographics_1  (cost=0.00..456.00 rows=640260 width=6)
                                                                           ->  Hash  (cost=432.96..432.96 rows=24350 width=8)
                                                                                 ->  Table Scan on date_dim date_dim_1  (cost=0.00..432.96 rows=24350 width=8)
                                                               ->  Hash  (cost=432.96..432.96 rows=24350 width=8)
                                                                     ->  Table Scan on date_dim date_dim_2  (cost=0.00..432.96 rows=24350 width=8)
                                                         ->  Hash  (cost=431.00..431.00 rows=20 width=4)
                                                               ->  Broadcast Motion 3:3  (slice20; segments: 3)  (cost=0.00..431.00 rows=20 width=4)
                                                                     ->  Table Scan on income_band income_band_1  (cost=0.00..431.00 rows=7 width=4)
               ->  Redistribute Motion 1:3  (slice4)  (cost=0.00..865.84 rows=100 width=159)
                     ->  Limit  (cost=0.00..865.80 rows=34 width=159)
                           ->  Gather Motion 3:1  (slice3; segments: 3)  (cost=0.00..865.78 rows=100 width=159)
                                 Merge Key: share1_ref3.i_product_name, share1_ref3.s_store_name, share1_ref2.cnt
                                 ->  Limit  (cost=0.00..865.72 rows=34 width=159)
                                       ->  Sort  (cost=0.00..865.72 rows=314 width=159)
                                             Sort Key: share1_ref3.i_product_name, share1_ref3.s_store_name, share1_ref2.cnt
                                             ->  Hash Join  (cost=0.00..863.38 rows=314 width=159)
                                                   Hash Cond: ((share1_ref3.i_item_sk = share1_ref2.i_item_sk) AND ((share1_ref3.s_store_name)::text = (share1_ref2.s_store_name)::text) AND ((share1_ref3.s_zip)::text = (share1_ref2.s_zip)::text))
                                                   Join Filter: (share1_ref2.cnt <= share1_ref3.cnt)
                                                   ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=0.00..431.34 rows=314 width=127)
                                                         Hash Key: share1_ref3.i_item_sk, share1_ref3.s_store_name, share1_ref3.s_zip
                                                         ->  Result  (cost=0.00..431.21 rows=314 width=127)
                                                               Filter: (share1_ref3.d_year = 2000)
                                                               ->  Shared Scan (share slice:id 1:1)  (cost=0.00..431.19 rows=627 width=127)
                                                   ->  Hash  (cost=431.15..431.15 rows=314 width=50)
                                                         ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=0.00..431.15 rows=314 width=50)
                                                               Hash Key: share1_ref2.i_item_sk, (share1_ref2.s_store_name)::text, (share1_ref2.s_zip)::text
                                                               ->  Result  (cost=0.00..431.10 rows=314 width=50)
                                                                     Filter: (share1_ref2.d_year = 2001)
                                                                     ->  Shared Scan (share slice:id 2:1)  (cost=0.00..431.08 rows=627 width=50)
 Planning time: 3032.639 ms
 Optimizer: PQO version 3.8.0
(157 rows)

-- end query 1 in stream 0 using template query64.tpl
