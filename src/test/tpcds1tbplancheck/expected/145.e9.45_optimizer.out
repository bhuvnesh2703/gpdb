-- start query 1 in stream 0 using template query45.tpl
explain
select  ca_zip, ca_county, sum(ws_sales_price)
 from web_sales, customer, customer_address, date_dim, item
 where ws_bill_customer_sk = c_customer_sk
 	and c_current_addr_sk = ca_address_sk 
 	and ws_item_sk = i_item_sk 
 	and ( substr(ca_zip,1,5) in ('85669', '86197','88274','83405','86475', '85392', '85460', '80348', '81792')
 	      or 
 	      i_item_id in (select i_item_id
                             from item
                             where i_item_sk in (2, 3, 5, 7, 11, 13, 17, 19, 23, 29)
                             )
 	    )
 	and ws_sold_date_sk = d_date_sk
 	and d_qoy = 2 and d_year = 2000
 group by ca_zip, ca_county
 order by ca_zip, ca_county
 limit 100;
                                                                                                                                                                                                                                                               QUERY PLAN                                                                                                                                                                                                                                                                

 Limit  (cost=0.00..111300.42 rows=34 width=28)
   ->  Gather Motion 3:1  (slice7; segments: 3)  (cost=0.00..111300.42 rows=100 width=28)
         Merge Key: customer_address.ca_zip, customer_address.ca_county
         ->  Limit  (cost=0.00..111300.41 rows=34 width=28)
               ->  GroupAggregate  (cost=0.00..111300.41 rows=1150797 width=28)
                     Group Key: customer_address.ca_zip, customer_address.ca_county
                     ->  Sort  (cost=0.00..111250.11 rows=1150797 width=28)
                           Sort Key: customer_address.ca_zip, customer_address.ca_county
                           ->  Redistribute Motion 3:3  (slice6; segments: 3)  (cost=0.00..107571.58 rows=1150797 width=28)
                                 Hash Key: customer_address.ca_zip, customer_address.ca_county
                                 ->  Result  (cost=0.00..107470.73 rows=1150797 width=28)
                                       ->  HashAggregate  (cost=0.00..107470.73 rows=1150797 width=28)
                                             Group Key: customer_address.ca_zip, customer_address.ca_county
                                             ->  Hash Join  (cost=0.00..104291.51 rows=12474813 width=25)
                                                   Hash Cond: (customer.c_current_addr_sk = customer_address.ca_address_sk)
                                                   Join Filter: ((substr((customer_address.ca_zip)::text, 1, 5) = ANY ('{85669,86197,88274,83405,86475,85392,85460,80348,81792}'::text[])) OR (CASE WHEN (NOT ((item.i_item_id)::text IS NULL)) THEN CASE WHEN ((sum((CASE WHEN (item_1.i_item_id IS NULL) THEN 1 ELSE 0 END))) = (count())) THEN NULL::boolean WHEN (NOT ((sum((CASE WHEN (item_1.i_item_id IS NULL) THEN 1 ELSE 0 END))) IS NULL)) THEN true ELSE false END ELSE NULL::boolean END))
                                                   ->  Redistribute Motion 3:3  (slice5; segments: 3)  (cost=0.00..93528.77 rows=21233724 width=10)
                                                         Hash Key: customer.c_current_addr_sk
                                                         ->  Hash Join  (cost=0.00..92864.16 rows=21233724 width=10)
                                                               Hash Cond: (web_sales.ws_item_sk = item.i_item_sk)
                                                               ->  Redistribute Motion 3:3  (slice3; segments: 3)  (cost=0.00..84418.23 rows=21233724 width=13)
                                                                     Hash Key: web_sales.ws_item_sk
                                                                     ->  Hash Join  (cost=0.00..83554.23 rows=21233724 width=13)
                                                                           Hash Cond: (web_sales.ws_bill_customer_sk = customer.c_customer_sk)
                                                                           ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=0.00..76789.26 rows=21233724 width=13)
                                                                                 Hash Key: web_sales.ws_bill_customer_sk
                                                                                 ->  Hash Join  (cost=0.00..75925.26 rows=21233724 width=13)
                                                                                       Hash Cond: (web_sales.ws_sold_date_sk = date_dim.d_date_sk)
                                                                                       ->  Dynamic Table Scan on web_sales (dynamic scan id: 1)  (cost=0.00..22739.00 rows=240000000 width=17)
                                                                                       ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                                             ->  Partition Selector for web_sales (dynamic scan id: 1)  (cost=10.00..100.00 rows=34 width=4)
                                                                                                   ->  Broadcast Motion 3:3  (slice1; segments: 3)  (cost=0.00..434.57 rows=161 width=4)
                                                                                                         ->  Table Scan on date_dim  (cost=0.00..434.56 rows=54 width=4)
                                                                                                               Filter: ((d_qoy = 2) AND (d_year = 2000))
                                                                           ->  Hash  (cost=754.40..754.40 rows=3999967 width=8)
                                                                                 ->  Table Scan on customer  (cost=0.00..754.40 rows=3999967 width=8)
                                                               ->  Hash  (cost=3822.93..3822.93 rows=99749 width=5)
                                                                     ->  Result  (cost=0.00..3822.93 rows=99749 width=5)
                                                                           ->  GroupAggregate  (cost=0.00..3822.43 rows=99749 width=37)
                                                                                 Group Key: item.i_item_sk, item.i_item_id, item.i_rec_start_date, item.i_rec_end_date, item.i_item_desc, item.i_current_price, item.i_wholesale_cost, item.i_brand_id, item.i_brand, item.i_class_id, item.i_class, item.i_category_id, item.i_category, item.i_manufact_id, item.i_manufact, item.i_size, item.i_formulation, item.i_color, item.i_units, item.i_container, item.i_manager_id, item.i_product_name, item.ctid, item.gp_segment_id
                                                                                 ->  Sort  (cost=0.00..3791.63 rows=99758 width=288)
                                                                                       Sort Key: item.i_item_sk, item.i_item_id, item.i_rec_start_date, item.i_rec_end_date, item.i_item_desc, item.i_current_price, item.i_wholesale_cost, item.i_brand_id, item.i_brand, item.i_class_id, item.i_class, item.i_category_id, item.i_category, item.i_manufact_id, item.i_manufact, item.i_size, item.i_formulation, item.i_color, item.i_units, item.i_container, item.i_manager_id, item.i_product_name, item.ctid, item.gp_segment_id
                                                                                       ->  Hash Left Join  (cost=0.00..1086.48 rows=99758 width=288)
                                                                                             Hash Cond: ((item.i_item_id)::text = (item_1.i_item_id)::text)
                                                                                             ->  Table Scan on item  (cost=0.00..447.68 rows=99749 width=284)
                                                                                             ->  Hash  (cost=450.96..450.96 rows=11 width=21)
                                                                                                   ->  Result  (cost=0.00..450.96 rows=11 width=21)
                                                                                                         ->  Broadcast Motion 3:3  (slice4; segments: 3)  (cost=0.00..450.96 rows=11 width=17)
                                                                                                               ->  Table Scan on item item_1  (cost=0.00..450.96 rows=4 width=17)
                                                                                                                     Filter: (i_item_sk = ANY ('{2,3,5,7,11,13,17,19,23,29}'::integer[]))
                                                   ->  Hash  (cost=581.74..581.74 rows=2000530 width=24)
                                                         ->  Table Scan on customer_address  (cost=0.00..581.74 rows=2000530 width=24)
 Planning time: 1188.097 ms
 Optimizer: PQO version 3.8.0
(54 rows)

-- end query 1 in stream 0 using template query45.tpl
