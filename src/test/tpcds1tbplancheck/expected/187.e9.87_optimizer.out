-- start query 1 in stream 0 using template query87.tpl
explain
select count(*) 
from ((select distinct c_last_name, c_first_name, d_date
       from store_sales, date_dim, customer
       where store_sales.ss_sold_date_sk = date_dim.d_date_sk
         and store_sales.ss_customer_sk = customer.c_customer_sk
         and d_month_seq between 1212 and 1212+11)
       except
      (select distinct c_last_name, c_first_name, d_date
       from catalog_sales, date_dim, customer
       where catalog_sales.cs_sold_date_sk = date_dim.d_date_sk
         and catalog_sales.cs_bill_customer_sk = customer.c_customer_sk
         and d_month_seq between 1212 and 1212+11)
       except
      (select distinct c_last_name, c_first_name, d_date
       from web_sales, date_dim, customer
       where web_sales.ws_sold_date_sk = date_dim.d_date_sk
         and web_sales.ws_bill_customer_sk = customer.c_customer_sk
         and d_month_seq between 1212 and 1212+11)
) cool_cust
;
                                                                                                                      QUERY PLAN                                                                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=0.00..1308922.42 rows=1 width=8)
   ->  Gather Motion 3:1  (slice10; segments: 3)  (cost=0.00..1308922.42 rows=1 width=8)
         ->  Aggregate  (cost=0.00..1308922.42 rows=1 width=8)
               ->  Hash Anti Join  (cost=0.00..1308922.42 rows=30060050 width=1)
                     Hash Cond: ((NOT (customer.c_last_name IS DISTINCT FROM customer_2.c_last_name)) AND (NOT (customer.c_first_name IS DISTINCT FROM customer_2.c_first_name)) AND (NOT (date_dim.d_date IS DISTINCT FROM date_dim_2.d_date)))
                     ->  Hash Anti Join  (cost=0.00..1050467.37 rows=75150124 width=17)
                           Hash Cond: ((NOT (customer.c_last_name IS DISTINCT FROM customer_1.c_last_name)) AND (NOT (customer.c_first_name IS DISTINCT FROM customer_1.c_first_name)) AND (NOT (date_dim.d_date IS DISTINCT FROM date_dim_1.d_date)))
                           ->  HashAggregate  (cost=0.00..487952.78 rows=187875308 width=17)
                                 Group Key: customer.c_last_name, customer.c_first_name, date_dim.d_date
                                 ->  Redistribute Motion 3:3  (slice3; segments: 3)  (cost=0.00..417452.76 rows=187875308 width=17)
                                       Hash Key: customer.c_last_name, customer.c_first_name, date_dim.d_date
                                       ->  HashAggregate  (cost=0.00..407455.92 rows=187875308 width=17)
                                             Group Key: customer.c_last_name, customer.c_first_name, date_dim.d_date
                                             ->  Hash Join  (cost=0.00..336955.90 rows=187875308 width=17)
                                                   Hash Cond: (customer.c_customer_sk = store_sales.ss_customer_sk)
                                                   ->  Table Scan on customer  (cost=0.00..754.40 rows=3999967 width=17)
                                                   ->  Hash  (cost=264750.86..264750.86 rows=187875308 width=8)
                                                         ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=0.00..264750.86 rows=187875308 width=8)
                                                               Hash Key: store_sales.ss_customer_sk
                                                               ->  Hash Join  (cost=0.00..260046.46 rows=187875308 width=8)
                                                                     Hash Cond: (store_sales.ss_sold_date_sk = date_dim.d_date_sk)
                                                                     ->  Dynamic Table Scan on store_sales (dynamic scan id: 1)  (cost=0.00..68542.76 rows=959996672 width=8)
                                                                     ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                           ->  Partition Selector for store_sales (dynamic scan id: 1)  (cost=10.00..100.00 rows=34 width=4)
                                                                                 ->  Broadcast Motion 3:3  (slice1; segments: 3)  (cost=0.00..433.81 rows=356 width=8)
                                                                                       ->  Table Scan on date_dim  (cost=0.00..433.76 rows=119 width=8)
                                                                                             Filter: ((d_month_seq >= 1212) AND (d_month_seq <= 1223))
                           ->  Hash  (cost=256724.25..256724.25 rows=93219213 width=17)
                                 ->  HashAggregate  (cost=0.00..256724.25 rows=93219213 width=17)
                                       Group Key: customer_1.c_last_name, customer_1.c_first_name, date_dim_1.d_date
                                       ->  Redistribute Motion 3:3  (slice6; segments: 3)  (cost=0.00..221743.83 rows=93219213 width=17)
                                             Hash Key: customer_1.c_last_name, customer_1.c_first_name, date_dim_1.d_date
                                             ->  HashAggregate  (cost=0.00..216783.64 rows=93219213 width=17)
                                                   Group Key: customer_1.c_last_name, customer_1.c_first_name, date_dim_1.d_date
                                                   ->  Hash Join  (cost=0.00..181803.22 rows=93219213 width=17)
                                                         Hash Cond: (customer_1.c_customer_sk = catalog_sales.cs_bill_customer_sk)
                                                         ->  Table Scan on customer customer_1  (cost=0.00..754.40 rows=3999967 width=17)
                                                         ->  Hash  (cost=144384.30..144384.30 rows=93219213 width=8)
                                                               ->  Redistribute Motion 3:3  (slice5; segments: 3)  (cost=0.00..144384.30 rows=93219213 width=8)
                                                                     Hash Key: catalog_sales.cs_bill_customer_sk
                                                                     ->  Hash Join  (cost=0.00..142050.09 rows=93219213 width=8)
                                                                           Hash Cond: (catalog_sales.cs_sold_date_sk = date_dim_1.d_date_sk)
                                                                           ->  Dynamic Table Scan on catalog_sales (dynamic scan id: 2)  (cost=0.00..46102.37 rows=479993344 width=8)
                                                                           ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                                 ->  Partition Selector for catalog_sales (dynamic scan id: 2)  (cost=10.00..100.00 rows=34 width=4)
                                                                                       ->  Broadcast Motion 3:3  (slice4; segments: 3)  (cost=0.00..433.81 rows=356 width=8)
                                                                                             ->  Table Scan on date_dim date_dim_1  (cost=0.00..433.76 rows=119 width=8)
                                                                                                   Filter: ((d_month_seq >= 1212) AND (d_month_seq <= 1223))
                     ->  Hash  (cost=130319.58..130319.58 rows=46994826 width=17)
                           ->  HashAggregate  (cost=0.00..130319.58 rows=46994826 width=17)
                                 Group Key: customer_2.c_last_name, customer_2.c_first_name, date_dim_2.d_date
                                 ->  Redistribute Motion 3:3  (slice9; segments: 3)  (cost=0.00..112684.81 rows=46994826 width=17)
                                       Hash Key: customer_2.c_last_name, customer_2.c_first_name, date_dim_2.d_date
                                       ->  HashAggregate  (cost=0.00..110184.22 rows=46994826 width=17)
                                             Group Key: customer_2.c_last_name, customer_2.c_first_name, date_dim_2.d_date
                                             ->  Hash Join  (cost=0.00..92549.46 rows=46994826 width=17)
                                                   Hash Cond: (customer_2.c_customer_sk = web_sales.ws_bill_customer_sk)
                                                   ->  Table Scan on customer customer_2  (cost=0.00..754.40 rows=3999967 width=17)
                                                   ->  Hash  (cost=72118.00..72118.00 rows=46994826 width=8)
                                                         ->  Redistribute Motion 3:3  (slice8; segments: 3)  (cost=0.00..72118.00 rows=46994826 width=8)
                                                               Hash Key: web_sales.ws_bill_customer_sk
                                                               ->  Hash Join  (cost=0.00..70941.25 rows=46994826 width=8)
                                                                     Hash Cond: (web_sales.ws_sold_date_sk = date_dim_2.d_date_sk)
                                                                     ->  Dynamic Table Scan on web_sales (dynamic scan id: 3)  (cost=0.00..22739.00 rows=240000000 width=8)
                                                                     ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                           ->  Partition Selector for web_sales (dynamic scan id: 3)  (cost=10.00..100.00 rows=34 width=4)
                                                                                 ->  Broadcast Motion 3:3  (slice7; segments: 3)  (cost=0.00..433.81 rows=356 width=8)
                                                                                       ->  Table Scan on date_dim date_dim_2  (cost=0.00..433.76 rows=119 width=8)
                                                                                             Filter: ((d_month_seq >= 1212) AND (d_month_seq <= 1223))
 Planning time: 559.108 ms
 Optimizer: PQO version 3.8.0
(71 rows)

-- end query 1 in stream 0 using template query87.tpl
