-- start query 1 in stream 0 using template query12.tpl
explain
select  i_item_desc 
      ,i_category 
      ,i_class 
      ,i_current_price
      ,sum(ws_ext_sales_price) as itemrevenue 
      ,sum(ws_ext_sales_price)*100/sum(sum(ws_ext_sales_price)) over
          (partition by i_class) as revenueratio
from	
	web_sales
    	,item 
    	,date_dim
where 
	ws_item_sk = i_item_sk 
  	and i_category in ('Jewelry', 'Sports', 'Books')
  	and ws_sold_date_sk = d_date_sk
	and d_date between cast('2001-01-12' as date) 
				and (cast('2001-01-12' as date) + 30 )
group by 
	i_item_id
        ,i_item_desc 
        ,i_category
        ,i_class
        ,i_current_price
order by 
	i_category
        ,i_class
        ,i_item_id
        ,i_item_desc
        ,revenueratio
limit 100;
                                                                                                                       QUERY PLAN                                                                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Result  (cost=0.00..74726.64 rows=34 width=48)
   ->  Limit  (cost=0.00..74726.64 rows=34 width=48)
         ->  Gather Motion 3:1  (slice5; segments: 3)  (cost=0.00..74726.63 rows=100 width=56)
               Merge Key: item.i_category, item.i_class, item.i_item_id, item.i_item_desc, ((((pg_catalog.sum((sum(web_sales.ws_ext_sales_price)))) * 100::numeric) / (sum((pg_catalog.sum((sum(web_sales.ws_ext_sales_price))))) OVER (?))))
               ->  Limit  (cost=0.00..74726.61 rows=34 width=56)
                     ->  Sort  (cost=0.00..74726.61 rows=9954 width=56)
                           Sort Key: item.i_category, item.i_class, item.i_item_id, item.i_item_desc, ((((pg_catalog.sum((sum(web_sales.ws_ext_sales_price)))) * 100::numeric) / (sum((pg_catalog.sum((sum(web_sales.ws_ext_sales_price))))) OVER (?))))
                           ->  Result  (cost=0.00..74684.64 rows=9954 width=56)
                                 ->  WindowAgg  (cost=0.00..74684.08 rows=9954 width=56)
                                       Partition By: item.i_class
                                       ->  Sort  (cost=0.00..74684.08 rows=9954 width=147)
                                             Sort Key: item.i_class
                                             ->  Redistribute Motion 3:3  (slice4; segments: 3)  (cost=0.00..74573.90 rows=9954 width=147)
                                                   Hash Key: item.i_class
                                                   ->  Result  (cost=0.00..74569.32 rows=9954 width=147)
                                                         ->  HashAggregate  (cost=0.00..74569.32 rows=9954 width=147)
                                                               Group Key: item.i_category, item.i_class, item.i_item_id, item.i_item_desc, item.i_current_price
                                                               ->  Redistribute Motion 3:3  (slice3; segments: 3)  (cost=0.00..74561.71 rows=9954 width=147)
                                                                     Hash Key: item.i_category, item.i_class, item.i_item_id, item.i_item_desc, item.i_current_price
                                                                     ->  Result  (cost=0.00..74557.13 rows=9954 width=147)
                                                                           ->  HashAggregate  (cost=0.00..74557.13 rows=9954 width=147)
                                                                                 Group Key: item.i_category, item.i_class, item.i_item_id, item.i_item_desc, item.i_current_price
                                                                                 ->  Hash Join  (cost=0.00..74256.42 rows=415037 width=144)
                                                                                       Hash Cond: (web_sales.ws_item_sk = item.i_item_sk)
                                                                                       ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=0.00..72830.84 rows=4068959 width=9)
                                                                                             Hash Key: web_sales.ws_item_sk
                                                                                             ->  Hash Join  (cost=0.00..72716.22 rows=4068959 width=9)
                                                                                                   Hash Cond: (web_sales.ws_sold_date_sk = date_dim.d_date_sk)
                                                                                                   ->  Dynamic Table Scan on web_sales (dynamic scan id: 1)  (cost=0.00..22739.00 rows=240000000 width=13)
                                                                                                   ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                                                         ->  Partition Selector for web_sales (dynamic scan id: 1)  (cost=10.00..100.00 rows=34 width=4)
                                                                                                               ->  Broadcast Motion 3:3  (slice1; segments: 3)  (cost=0.00..433.76 rows=31 width=4)
                                                                                                                     ->  Table Scan on date_dim  (cost=0.00..433.76 rows=11 width=4)
                                                                                                                           Filter: ((d_date >= '01-12-2001'::date) AND (d_date <= '02-11-2001'::date))
                                                                                       ->  Hash  (cost=453.61..453.61 rows=9954 width=143)
                                                                                             ->  Table Scan on item  (cost=0.00..453.61 rows=9954 width=143)
                                                                                                   Filter: ((i_category)::text = ANY ('{Jewelry,Sports,Books}'::text[]))
 Planning time: 280.772 ms
 Optimizer: PQO version 3.8.0
(39 rows)

-- end query 1 in stream 0 using template query12.tpl
