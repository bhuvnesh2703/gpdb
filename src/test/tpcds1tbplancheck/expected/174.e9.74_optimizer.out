-- start query 1 in stream 0 using template query74.tpl
explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,d_year as year
       ,max(ss_net_paid) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
   and d_year in (2001,2001+1)
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,d_year as year
       ,max(ws_net_paid) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
   and d_year in (2001,2001+1)
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,d_year
         )
  select 
        t_s_secyear.customer_id, t_s_secyear.customer_first_name, t_s_secyear.customer_last_name
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
         and t_s_firstyear.customer_id = t_w_secyear.customer_id
         and t_s_firstyear.customer_id = t_w_firstyear.customer_id
         and t_s_firstyear.sale_type = 's'
         and t_w_firstyear.sale_type = 'w'
         and t_s_secyear.sale_type = 's'
         and t_w_secyear.sale_type = 'w'
         and t_s_firstyear.year = 2001
         and t_s_secyear.year = 2001+1
         and t_w_firstyear.year = 2001
         and t_w_secyear.year = 2001+1
         and t_s_firstyear.year_total > 0
         and t_w_firstyear.year_total > 0
         and case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
 order by 2,1,3
limit 100;
                                                                                                                                                                                                                 QUERY PLAN                                                                                                                                                                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice13; segments: 3)  (cost=0.00..938364.82 rows=100 width=30)
   Merge Key: share0_ref5.c_first_name, share0_ref5.c_customer_id, share0_ref5.c_last_name
   ->  Sort  (cost=0.00..938364.80 rows=34 width=30)
         Sort Key: share0_ref5.c_first_name, share0_ref5.c_customer_id, share0_ref5.c_last_name
         ->  Sequence  (cost=0.00..938364.78 rows=34 width=30)
               ->  Shared Scan (share slice:id 13:0)  (cost=0.00..924861.70 rows=6299950 width=1)
                     ->  Materialize  (cost=0.00..924861.70 rows=6299950 width=1)
                           ->  Append  (cost=0.00..924855.40 rows=6299950 width=50)
                                 ->  Result  (cost=0.00..731689.41 rows=3149975 width=50)
                                       Filter: ((("outer".sale_type = 's'::text) AND (date_dim.d_year = 2001) AND ((max((max(store_sales.ss_net_paid)))) > 0::numeric)) OR (("outer".sale_type = 's'::text) AND (date_dim.d_year = 2002)) OR (("outer".sale_type = 'w'::text) AND (date_dim.d_year = 2001) AND ((max((max(store_sales.ss_net_paid)))) > 0::numeric)) OR (("outer".sale_type = 'w'::text) AND (date_dim.d_year = 2002)))
                                       ->  Result  (cost=0.00..731245.27 rows=4499963 width=50)
                                             ->  HashAggregate  (cost=0.00..731020.27 rows=4499963 width=42)
                                                   Group Key: customer.c_customer_id, customer.c_first_name, customer.c_last_name, date_dim.d_year
                                                   ->  Redistribute Motion 3:3  (slice9; segments: 3)  (cost=0.00..728669.59 rows=4499963 width=42)
                                                         Hash Key: customer.c_customer_id, customer.c_first_name, customer.c_last_name, date_dim.d_year
                                                         ->  Result  (cost=0.00..728078.02 rows=4499963 width=42)
                                                               ->  HashAggregate  (cost=0.00..728078.02 rows=4499963 width=42)
                                                                     Group Key: customer.c_customer_id, customer.c_first_name, customer.c_last_name, date_dim.d_year
                                                                     ->  Hash Join  (cost=0.00..530908.19 rows=386051658 width=40)
                                                                           Hash Cond: (store_sales.ss_customer_sk = customer.c_customer_sk)
                                                                           ->  Hash Join  (cost=0.00..287924.04 rows=386051658 width=14)
                                                                                 Hash Cond: (store_sales.ss_sold_date_sk = date_dim.d_date_sk)
                                                                                 ->  Dynamic Table Scan on store_sales (dynamic scan id: 1)  (cost=0.00..68542.76 rows=959996672 width=14)
                                                                                 ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                                       ->  Partition Selector for store_sales (dynamic scan id: 1)  (cost=10.00..100.00 rows=34 width=4)
                                                                                             ->  Broadcast Motion 3:3  (slice7; segments: 3)  (cost=0.00..433.86 rows=732 width=8)
                                                                                                   ->  Table Scan on date_dim  (cost=0.00..433.76 rows=244 width=8)
                                                                                                         Filter: ((d_year = ANY ('{2001,2002}'::integer[])) AND ((d_year = 2001) OR (d_year = 2002)))
                                                                           ->  Hash  (cost=8310.49..8310.49 rows=11999900 width=34)
                                                                                 ->  Broadcast Motion 3:3  (slice8; segments: 3)  (cost=0.00..8310.49 rows=11999900 width=34)
                                                                                       ->  Table Scan on customer  (cost=0.00..754.40 rows=3999967 width=34)
                                 ->  Result  (cost=0.00..192850.99 rows=3149975 width=50)
                                       Filter: ((("outer".sale_type = 's'::text) AND (date_dim_1.d_year = 2001) AND ((max((max(web_sales.ws_net_paid)))) > 0::numeric)) OR (("outer".sale_type = 's'::text) AND (date_dim_1.d_year = 2002)) OR (("outer".sale_type = 'w'::text) AND (date_dim_1.d_year = 2001) AND ((max((max(web_sales.ws_net_paid)))) > 0::numeric)) OR (("outer".sale_type = 'w'::text) AND (date_dim_1.d_year = 2002)))
                                       ->  Result  (cost=0.00..192406.85 rows=4499963 width=50)
                                             ->  HashAggregate  (cost=0.00..192181.85 rows=4499963 width=42)
                                                   Group Key: customer_1.c_customer_id, customer_1.c_first_name, customer_1.c_last_name, date_dim_1.d_year
                                                   ->  Redistribute Motion 3:3  (slice12; segments: 3)  (cost=0.00..189831.17 rows=4499963 width=42)
                                                         Hash Key: customer_1.c_customer_id, customer_1.c_first_name, customer_1.c_last_name, date_dim_1.d_year
                                                         ->  Result  (cost=0.00..189239.60 rows=4499963 width=42)
                                                               ->  HashAggregate  (cost=0.00..189239.60 rows=4499963 width=42)
                                                                     Group Key: customer_1.c_customer_id, customer_1.c_first_name, customer_1.c_last_name, date_dim_1.d_year
                                                                     ->  Hash Join  (cost=0.00..139880.11 rows=96566337 width=39)
                                                                           Hash Cond: (customer_1.c_customer_sk = web_sales.ws_bill_customer_sk)
                                                                           ->  Table Scan on customer customer_1  (cost=0.00..754.40 rows=3999967 width=34)
                                                                           ->  Hash  (cost=80911.41..80911.41 rows=96566337 width=13)
                                                                                 ->  Redistribute Motion 3:3  (slice11; segments: 3)  (cost=0.00..80911.41 rows=96566337 width=13)
                                                                                       Hash Key: web_sales.ws_bill_customer_sk
                                                                                       ->  Hash Join  (cost=0.00..76982.12 rows=96566337 width=13)
                                                                                             Hash Cond: (web_sales.ws_sold_date_sk = date_dim_1.d_date_sk)
                                                                                             ->  Dynamic Table Scan on web_sales (dynamic scan id: 2)  (cost=0.00..22739.00 rows=240000000 width=13)
                                                                                             ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                                                   ->  Partition Selector for web_sales (dynamic scan id: 2)  (cost=10.00..100.00 rows=34 width=4)
                                                                                                         ->  Broadcast Motion 3:3  (slice10; segments: 3)  (cost=0.00..433.86 rows=732 width=8)
                                                                                                               ->  Table Scan on date_dim date_dim_1  (cost=0.00..433.76 rows=244 width=8)
                                                                                                                     Filter: ((d_year = ANY ('{2001,2002}'::integer[])) AND ((d_year = 2001) OR (d_year = 2002)))
               ->  Redistribute Motion 1:3  (slice6)  (cost=0.00..13503.07 rows=100 width=30)
                     ->  Limit  (cost=0.00..13503.06 rows=34 width=30)
                           ->  Gather Motion 3:1  (slice5; segments: 3)  (cost=0.00..13503.06 rows=100 width=30)
                                 Merge Key: share0_ref5.c_first_name, share0_ref5.c_customer_id, share0_ref5.c_last_name
                                 ->  Limit  (cost=0.00..13503.05 rows=34 width=30)
                                       ->  Sort  (cost=0.00..13503.05 rows=214968 width=30)
                                             Sort Key: share0_ref5.c_first_name, share0_ref5.c_customer_id, share0_ref5.c_last_name
                                             ->  Hash Join  (cost=0.00..12855.33 rows=214968 width=30)
                                                   Hash Cond: ((share0_ref5.c_customer_id)::text = (share0_ref3.c_customer_id)::text)
                                                   Join Filter: (CASE WHEN (share0_ref2.max > 0::numeric) THEN (share0_ref4.max / share0_ref2.max) ELSE NULL::numeric END > CASE WHEN (share0_ref3.max > 0::numeric) THEN (share0_ref5.max / share0_ref3.max) ELSE NULL::numeric END)
                                                   ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=0.00..1979.34 rows=3149975 width=38)
                                                         Hash Key: (share0_ref5.c_customer_id)::text
                                                         ->  Result  (cost=0.00..1604.68 rows=3149975 width=38)
                                                               Filter: ((share0_ref5.sale_type = 's'::text) AND (share0_ref5.d_year = 2002))
                                                               ->  Shared Scan (share slice:id 1:0)  (cost=0.00..1190.14 rows=6299950 width=50)
                                                   ->  Hash  (cost=8298.25..8298.25 rows=682437 width=41)
                                                         ->  Hash Join  (cost=0.00..8298.25 rows=682437 width=41)
                                                               Hash Cond: ((share0_ref4.c_customer_id)::text = (share0_ref3.c_customer_id)::text)
                                                               ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=0.00..1653.79 rows=3149975 width=25)
                                                                     Hash Key: (share0_ref4.c_customer_id)::text
                                                                     ->  Result  (cost=0.00..1407.30 rows=3149975 width=25)
                                                                           Filter: ((share0_ref4.sale_type = 'w'::text) AND (share0_ref4.d_year = 2002))
                                                                           ->  Shared Scan (share slice:id 2:0)  (cost=0.00..992.77 rows=6299950 width=37)
                                                               ->  Hash  (cost=5215.29..5215.29 rows=866586 width=33)
                                                                     ->  Hash Join  (cost=0.00..5215.29 rows=866586 width=33)
                                                                           Hash Cond: ((share0_ref3.c_customer_id)::text = (share0_ref2.c_customer_id)::text)
                                                                           ->  Redistribute Motion 3:3  (slice3; segments: 3)  (cost=0.00..1760.26 rows=1861804 width=25)
                                                                                 Hash Key: share0_ref3.c_customer_id
                                                                                 ->  Result  (cost=0.00..1614.57 rows=1861804 width=25)
                                                                                       Filter: ((share0_ref3.sale_type = 's'::text) AND (share0_ref3.d_year = 2001) AND (share0_ref3.max > 0::numeric))
                                                                                       ->  Shared Scan (share slice:id 3:0)  (cost=0.00..992.77 rows=6299950 width=37)
                                                                           ->  Hash  (cost=1760.26..1760.26 rows=1861804 width=25)
                                                                                 ->  Redistribute Motion 3:3  (slice4; segments: 3)  (cost=0.00..1760.26 rows=1861804 width=25)
                                                                                       Hash Key: (share0_ref2.c_customer_id)::text
                                                                                       ->  Result  (cost=0.00..1614.57 rows=1861804 width=25)
                                                                                             Filter: ((share0_ref2.sale_type = 'w'::text) AND (share0_ref2.d_year = 2001) AND (share0_ref2.max > 0::numeric))
                                                                                             ->  Shared Scan (share slice:id 4:0)  (cost=0.00..992.77 rows=6299950 width=37)
 Planning time: 765.697 ms
 Optimizer: PQO version 3.8.0
(94 rows)

-- end query 1 in stream 0 using template query74.tpl
