-- start query 1 in stream 0 using template query14.tpl
explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100;
                                                                                                                                QUERY PLAN                                                                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice41; segments: 3)  (cost=0.00..571710419.01 rows=100 width=36)
   Merge Key: share2_ref2.channel, share2_ref2.i_brand_id, share2_ref2.i_class_id, share2_ref2.i_category_id
   ->  Sort  (cost=0.00..571710418.99 rows=34 width=36)
         Sort Key: share2_ref2.channel, share2_ref2.i_brand_id, share2_ref2.i_class_id, share2_ref2.i_category_id
         ->  Sequence  (cost=0.00..571710418.96 rows=34 width=36)
               ->  Shared Scan (share slice:id 41:0)  (cost=0.00..1072051.20 rows=3783531 width=1)
                     ->  Materialize  (cost=0.00..1072051.20 rows=3783531 width=1)
                           ->  Hash Join  (cost=0.00..1072047.41 rows=3783531 width=4)
                                 Hash Cond: ((item_3.i_brand_id = item_5.i_brand_id) AND (item_3.i_class_id = item_5.i_class_id) AND (item_3.i_category_id = item_5.i_category_id))
                                 ->  Redistribute Motion 3:3  (slice31; segments: 3)  (cost=0.00..455.64 rows=99749 width=16)
                                       Hash Key: item_3.i_brand_id, item_3.i_class_id, item_3.i_category_id
                                       ->  Table Scan on item item_3  (cost=0.00..447.68 rows=99749 width=16)
                                 ->  Hash  (cost=1071478.64..1071478.64 rows=12555 width=12)
                                       ->  Hash Join  (cost=0.00..1071478.64 rows=12555 width=12)
                                             Hash Cond: ((NOT (item_4.i_brand_id IS DISTINCT FROM item_5.i_brand_id)) AND (NOT (item_4.i_class_id IS DISTINCT FROM item_5.i_class_id)) AND (NOT (item_4.i_category_id IS DISTINCT FROM item_5.i_category_id)))
                                             ->  HashAggregate  (cost=0.00..157044.49 rows=14689 width=12)
                                                   Group Key: item_4.i_brand_id, item_4.i_class_id, item_4.i_category_id
                                                   ->  Redistribute Motion 3:3  (slice34; segments: 3)  (cost=0.00..157039.05 rows=14689 width=12)
                                                         Hash Key: item_4.i_brand_id, item_4.i_class_id, item_4.i_category_id
                                                         ->  HashAggregate  (cost=0.00..157038.49 rows=14689 width=12)
                                                               Group Key: item_4.i_brand_id, item_4.i_class_id, item_4.i_category_id
                                                               ->  Hash Join  (cost=0.00..103893.78 rows=144651485 width=12)
                                                                     Hash Cond: (web_sales_2.ws_item_sk = item_4.i_item_sk)
                                                                     ->  Hash Join  (cost=0.00..71650.65 rows=144651485 width=4)
                                                                           Hash Cond: (web_sales_2.ws_sold_date_sk = date_dim_6.d_date_sk)
                                                                           ->  Dynamic Table Scan on web_sales web_sales_2 (dynamic scan id: 3)  (cost=0.00..22739.00 rows=240000000 width=8)
                                                                           ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                                 ->  Partition Selector for web_sales (dynamic scan id: 3)  (cost=10.00..100.00 rows=34 width=4)
                                                                                       ->  Broadcast Motion 3:3  (slice32; segments: 3)  (cost=0.00..433.84 rows=1096 width=4)
                                                                                             ->  Table Scan on date_dim date_dim_6  (cost=0.00..433.76 rows=366 width=4)
                                                                                                   Filter: ((d_year >= 1999) AND (d_year <= 2001))
                                                                     ->  Hash  (cost=536.35..536.35 rows=299247 width=16)
                                                                           ->  Broadcast Motion 3:3  (slice33; segments: 3)  (cost=0.00..536.35 rows=299247 width=16)
                                                                                 ->  Table Scan on item item_4  (cost=0.00..447.68 rows=99749 width=16)
                                             ->  Hash  (cost=914418.66..914418.66 rows=12555 width=12)
                                                   ->  Hash Join  (cost=0.00..914418.66 rows=12555 width=12)
                                                         Hash Cond: ((NOT (item_5.i_brand_id IS DISTINCT FROM item_6.i_brand_id)) AND (NOT (item_5.i_class_id IS DISTINCT FROM item_6.i_class_id)) AND (NOT (item_5.i_category_id IS DISTINCT FROM item_6.i_category_id)))
                                                         ->  HashAggregate  (cost=0.00..602226.96 rows=14689 width=12)
                                                               Group Key: item_5.i_brand_id, item_5.i_class_id, item_5.i_category_id
                                                               ->  Redistribute Motion 3:3  (slice37; segments: 3)  (cost=0.00..602221.51 rows=14689 width=12)
                                                                     Hash Key: item_5.i_brand_id, item_5.i_class_id, item_5.i_category_id
                                                                     ->  HashAggregate  (cost=0.00..602220.96 rows=14689 width=12)
                                                                           Group Key: item_5.i_brand_id, item_5.i_class_id, item_5.i_category_id
                                                                           ->  Hash Join  (cost=0.00..389759.85 rows=578285846 width=12)
                                                                                 Hash Cond: (store_sales_2.ss_item_sk = item_5.i_item_sk)
                                                                                 ->  Hash Join  (cost=0.00..262882.10 rows=578285846 width=4)
                                                                                       Hash Cond: (store_sales_2.ss_sold_date_sk = date_dim_7.d_date_sk)
                                                                                       ->  Dynamic Table Scan on store_sales store_sales_2 (dynamic scan id: 1)  (cost=0.00..68542.76 rows=959996672 width=8)
                                                                                       ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                                             ->  Partition Selector for store_sales (dynamic scan id: 1)  (cost=10.00..100.00 rows=34 width=4)
                                                                                                   ->  Broadcast Motion 3:3  (slice35; segments: 3)  (cost=0.00..433.84 rows=1096 width=4)
                                                                                                         ->  Table Scan on date_dim date_dim_7  (cost=0.00..433.76 rows=366 width=4)
                                                                                                               Filter: ((d_year >= 1999) AND (d_year <= 2001))
                                                                                 ->  Hash  (cost=536.35..536.35 rows=299247 width=16)
                                                                                       ->  Broadcast Motion 3:3  (slice36; segments: 3)  (cost=0.00..536.35 rows=299247 width=16)
                                                                                             ->  Table Scan on item item_5  (cost=0.00..447.68 rows=99749 width=16)
                                                         ->  Hash  (cost=312175.01..312175.01 rows=14689 width=12)
                                                               ->  HashAggregate  (cost=0.00..312175.01 rows=14689 width=12)
                                                                     Group Key: item_6.i_brand_id, item_6.i_class_id, item_6.i_category_id
                                                                     ->  Redistribute Motion 3:3  (slice40; segments: 3)  (cost=0.00..312169.56 rows=14689 width=12)
                                                                           Hash Key: item_6.i_brand_id, item_6.i_class_id, item_6.i_category_id
                                                                           ->  HashAggregate  (cost=0.00..312169.01 rows=14689 width=12)
                                                                                 Group Key: item_6.i_brand_id, item_6.i_class_id, item_6.i_category_id
                                                                                 ->  Hash Join  (cost=0.00..206750.89 rows=286931537 width=12)
                                                                                       Hash Cond: (catalog_sales_2.cs_item_sk = item_6.i_item_sk)
                                                                                       ->  Hash Join  (cost=0.00..143457.13 rows=286931537 width=4)
                                                                                             Hash Cond: (catalog_sales_2.cs_sold_date_sk = date_dim_8.d_date_sk)
                                                                                             ->  Dynamic Table Scan on catalog_sales catalog_sales_2 (dynamic scan id: 2)  (cost=0.00..46102.37 rows=479993344 width=8)
                                                                                             ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                                                   ->  Partition Selector for catalog_sales (dynamic scan id: 2)  (cost=10.00..100.00 rows=34 width=4)
                                                                                                         ->  Broadcast Motion 3:3  (slice38; segments: 3)  (cost=0.00..433.84 rows=1096 width=4)
                                                                                                               ->  Table Scan on date_dim date_dim_8  (cost=0.00..433.76 rows=366 width=4)
                                                                                                                     Filter: ((d_year >= 1999) AND (d_year <= 2001))
                                                                                       ->  Hash  (cost=536.35..536.35 rows=299247 width=16)
                                                                                             ->  Broadcast Motion 3:3  (slice39; segments: 3)  (cost=0.00..536.35 rows=299247 width=16)
                                                                                                   ->  Table Scan on item item_6  (cost=0.00..447.68 rows=99749 width=16)
               ->  Sequence  (cost=0.00..570638367.76 rows=34 width=36)
                     ->  Shared Scan (share slice:id 41:1)  (cost=0.00..526864.41 rows=1 width=1)
                           ->  Materialize  (cost=0.00..526864.41 rows=1 width=1)
                                 ->  Redistribute Motion 1:3  (slice30)  (cost=0.00..526864.41 rows=1 width=8)
                                       ->  Aggregate  (cost=0.00..526864.41 rows=1 width=8)
                                             ->  Gather Motion 3:1  (slice29; segments: 3)  (cost=0.00..526864.41 rows=1 width=8)
                                                   ->  Aggregate  (cost=0.00..526864.41 rows=1 width=8)
                                                         ->  Append  (cost=0.00..524924.56 rows=866007860 width=10)
                                                               ->  Hash Join  (cost=0.00..289247.49 rows=578285846 width=10)
                                                                     Hash Cond: (store_sales_1.ss_sold_date_sk = date_dim_3.d_date_sk)
                                                                     ->  Dynamic Table Scan on store_sales store_sales_1 (dynamic scan id: 4)  (cost=0.00..68542.76 rows=959996672 width=14)
                                                                     ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                           ->  Partition Selector for store_sales (dynamic scan id: 4)  (cost=10.00..100.00 rows=34 width=4)
                                                                                 ->  Broadcast Motion 3:3  (slice26; segments: 3)  (cost=0.00..433.84 rows=1096 width=4)
                                                                                       ->  Table Scan on date_dim date_dim_3  (cost=0.00..433.76 rows=366 width=4)
                                                                                             Filter: ((d_year >= 1999) AND (d_year <= 2001))
                                                               ->  Hash Join  (cost=0.00..151391.07 rows=191287692 width=9)
                                                                     Hash Cond: (catalog_sales_1.cs_sold_date_sk = date_dim_4.d_date_sk)
                                                                     ->  Dynamic Table Scan on catalog_sales catalog_sales_1 (dynamic scan id: 5)  (cost=0.00..46102.37 rows=479993344 width=13)
                                                                     ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                           ->  Partition Selector for catalog_sales (dynamic scan id: 5)  (cost=10.00..100.00 rows=34 width=4)
                                                                                 ->  Broadcast Motion 3:3  (slice27; segments: 3)  (cost=0.00..433.81 rows=731 width=4)
                                                                                       ->  Table Scan on date_dim date_dim_4  (cost=0.00..433.76 rows=244 width=4)
                                                                                             Filter: ((d_year >= 1998) AND (d_year <= 2000))
                                                               ->  Hash Join  (cost=0.00..75625.92 rows=96434324 width=9)
                                                                     Hash Cond: (web_sales_1.ws_sold_date_sk = date_dim_5.d_date_sk)
                                                                     ->  Dynamic Table Scan on web_sales web_sales_1 (dynamic scan id: 6)  (cost=0.00..22739.00 rows=240000000 width=13)
                                                                     ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                           ->  Partition Selector for web_sales (dynamic scan id: 6)  (cost=10.00..100.00 rows=34 width=4)
                                                                                 ->  Broadcast Motion 3:3  (slice28; segments: 3)  (cost=0.00..433.81 rows=731 width=4)
                                                                                       ->  Table Scan on date_dim date_dim_5  (cost=0.00..433.76 rows=244 width=4)
                                                                                             Filter: ((d_year >= 1998) AND (d_year <= 2000))
                     ->  Redistribute Motion 1:3  (slice25)  (cost=0.00..570111503.35 rows=100 width=36)
                           ->  Limit  (cost=0.00..570111503.34 rows=34 width=36)
                                 ->  Gather Motion 3:1  (slice24; segments: 3)  (cost=0.00..570111503.33 rows=100 width=36)
                                       Merge Key: share2_ref2.channel, share2_ref2.i_brand_id, share2_ref2.i_class_id, share2_ref2.i_category_id
                                       ->  Limit  (cost=0.00..570111503.32 rows=34 width=36)
                                             ->  Sort  (cost=0.00..570111503.32 rows=89807 width=36)
                                                   Sort Key: share2_ref2.channel, share2_ref2.i_brand_id, share2_ref2.i_class_id, share2_ref2.i_category_id
                                                   ->  Sequence  (cost=0.00..570111201.68 rows=89807 width=36)
                                                         ->  Shared Scan (share slice:id 24:2)  (cost=0.00..570108944.89 rows=44066 width=1)
                                                               ->  Materialize  (cost=0.00..570108944.89 rows=44066 width=1)
                                                                     ->  Append  (cost=0.00..570108944.85 rows=44066 width=36)
                                                                           ->  Result  (cost=0.00..314622650.08 rows=14689 width=36)
                                                                                 ->  Nested Loop  (cost=0.00..314622649.56 rows=14689 width=28)
                                                                                       Join Filter: ((pg_catalog.sum((sum(((store_sales.ss_quantity)::numeric * store_sales.ss_list_price))))) > share1_ref2.average_sales)
                                                                                       ->  Broadcast Motion 3:3  (slice11; segments: 3)  (cost=0.00..431.00 rows=1 width=8)
                                                                                             ->  Shared Scan (share slice:id 11:1)  (cost=0.00..431.00 rows=1 width=8)
                                                                                       ->  HashAggregate  (cost=0.00..306383.28 rows=14689 width=28)
                                                                                             Group Key: item.i_brand_id, item.i_class_id, item.i_category_id
                                                                                             ->  Materialize  (cost=0.00..306377.63 rows=14689 width=28)
                                                                                                   ->  Redistribute Motion 3:3  (slice10; segments: 3)  (cost=0.00..306377.22 rows=14689 width=28)
                                                                                                         Hash Key: item.i_brand_id, item.i_class_id, item.i_category_id
                                                                                                         ->  Result  (cost=0.00..306375.93 rows=14689 width=28)
                                                                                                               ->  HashAggregate  (cost=0.00..306375.93 rows=14689 width=28)
                                                                                                                     Group Key: item.i_brand_id, item.i_class_id, item.i_category_id
                                                                                                                     ->  Hash Join  (cost=0.00..295599.03 rows=28565779 width=22)
                                                                                                                           Hash Cond: (store_sales.ss_item_sk = item.i_item_sk)
                                                                                                                           ->  Hash Join  (cost=0.00..287516.22 rows=28565779 width=14)
                                                                                                                                 Hash Cond: (store_sales.ss_item_sk = share0_ref2.i_item_sk)
                                                                                                                                 ->  Hash Join  (cost=0.00..279888.65 rows=28565779 width=14)
                                                                                                                                       Hash Cond: (store_sales.ss_sold_date_sk = date_dim.d_date_sk)
                                                                                                                                       ->  Dynamic Table Scan on store_sales (dynamic scan id: 7)  (cost=0.00..68542.76 rows=959996672 width=18)
                                                                                                                                       ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                                                                                             ->  Partition Selector for store_sales (dynamic scan id: 7)  (cost=10.00..100.00 rows=34 width=4)
                                                                                                                                                   ->  Broadcast Motion 3:3  (slice6; segments: 3)  (cost=0.00..434.56 rows=55 width=4)
                                                                                                                                                         ->  Table Scan on date_dim  (cost=0.00..434.56 rows=19 width=4)
                                                                                                                                                               Filter: ((d_year = 2000) AND (d_moy = 11))
                                                                                                                                 ->  Hash  (cost=962.46..962.46 rows=299247 width=4)
                                                                                                                                       ->  Broadcast Motion 3:3  (slice8; segments: 3)  (cost=0.00..962.46 rows=299247 width=4)
                                                                                                                                             ->  HashAggregate  (cost=0.00..941.04 rows=99749 width=4)
                                                                                                                                                   Group Key: share0_ref2.i_item_sk
                                                                                                                                                   ->  Redistribute Motion 3:3  (slice7; segments: 3)  (cost=0.00..928.80 rows=99749 width=4)
                                                                                                                                                         Hash Key: share0_ref2.i_item_sk
                                                                                                                                                         ->  HashAggregate  (cost=0.00..927.55 rows=99749 width=4)
                                                                                                                                                               Group Key: share0_ref2.i_item_sk
                                                                                                                                                               ->  Shared Scan (share slice:id 7:0)  (cost=0.00..467.47 rows=3783531 width=4)
                                                                                                                           ->  Hash  (cost=536.35..536.35 rows=299247 width=16)
                                                                                                                                 ->  Broadcast Motion 3:3  (slice9; segments: 3)  (cost=0.00..536.35 rows=299247 width=16)
                                                                                                                                       ->  Table Scan on item  (cost=0.00..447.68 rows=99749 width=16)
                                                                           ->  Result  (cost=0.00..169475958.85 rows=14689 width=36)
                                                                                 ->  Nested Loop  (cost=0.00..169475958.32 rows=14689 width=28)
                                                                                       Join Filter: ((pg_catalog.sum((sum(((catalog_sales.cs_quantity)::numeric * catalog_sales.cs_list_price))))) > share1_ref3.average_sales)
                                                                                       ->  Broadcast Motion 3:3  (slice17; segments: 3)  (cost=0.00..431.00 rows=1 width=8)
                                                                                             ->  Shared Scan (share slice:id 17:1)  (cost=0.00..431.00 rows=1 width=8)
                                                                                       ->  HashAggregate  (cost=0.00..164638.47 rows=14689 width=28)
                                                                                             Group Key: item_1.i_brand_id, item_1.i_class_id, item_1.i_category_id
                                                                                             ->  Materialize  (cost=0.00..164632.81 rows=14689 width=28)
                                                                                                   ->  Redistribute Motion 3:3  (slice16; segments: 3)  (cost=0.00..164632.40 rows=14689 width=28)
                                                                                                         Hash Key: item_1.i_brand_id, item_1.i_class_id, item_1.i_category_id
                                                                                                         ->  Result  (cost=0.00..164631.11 rows=14689 width=28)
                                                                                                               ->  HashAggregate  (cost=0.00..164631.11 rows=14689 width=28)
                                                                                                                     Group Key: item_1.i_brand_id, item_1.i_class_id, item_1.i_category_id
                                                                                                                     ->  Hash Join  (cost=0.00..159283.82 rows=14173653 width=21)
                                                                                                                           Hash Cond: (catalog_sales.cs_item_sk = item_1.i_item_sk)
                                                                                                                           ->  Hash Join  (cost=0.00..154991.50 rows=14173653 width=13)
                                                                                                                                 Hash Cond: (catalog_sales.cs_item_sk = share0_ref3.i_item_sk)
                                                                                                                                 ->  Hash Join  (cost=0.00..150751.44 rows=14173653 width=13)
                                                                                                                                       Hash Cond: (catalog_sales.cs_sold_date_sk = date_dim_1.d_date_sk)
                                                                                                                                       ->  Dynamic Table Scan on catalog_sales (dynamic scan id: 8)  (cost=0.00..46102.37 rows=479993344 width=17)
                                                                                                                                       ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                                                                                             ->  Partition Selector for catalog_sales (dynamic scan id: 8)  (cost=10.00..100.00 rows=34 width=4)
                                                                                                                                                   ->  Broadcast Motion 3:3  (slice12; segments: 3)  (cost=0.00..434.56 rows=55 width=4)
                                                                                                                                                         ->  Table Scan on date_dim date_dim_1  (cost=0.00..434.56 rows=19 width=4)
                                                                                                                                                               Filter: ((d_year = 2000) AND (d_moy = 11))
                                                                                                                                 ->  Hash  (cost=962.46..962.46 rows=299247 width=4)
                                                                                                                                       ->  Broadcast Motion 3:3  (slice14; segments: 3)  (cost=0.00..962.46 rows=299247 width=4)
                                                                                                                                             ->  HashAggregate  (cost=0.00..941.04 rows=99749 width=4)
                                                                                                                                                   Group Key: share0_ref3.i_item_sk
                                                                                                                                                   ->  Redistribute Motion 3:3  (slice13; segments: 3)  (cost=0.00..928.80 rows=99749 width=4)
                                                                                                                                                         Hash Key: share0_ref3.i_item_sk
                                                                                                                                                         ->  HashAggregate  (cost=0.00..927.55 rows=99749 width=4)
                                                                                                                                                               Group Key: share0_ref3.i_item_sk
                                                                                                                                                               ->  Shared Scan (share slice:id 13:0)  (cost=0.00..467.47 rows=3783531 width=4)
                                                                                                                           ->  Hash  (cost=536.35..536.35 rows=299247 width=16)
                                                                                                                                 ->  Broadcast Motion 3:3  (slice15; segments: 3)  (cost=0.00..536.35 rows=299247 width=16)
                                                                                                                                       ->  Table Scan on item item_1  (cost=0.00..447.68 rows=99749 width=16)
                                                                           ->  Result  (cost=0.00..86010334.33 rows=14689 width=36)
                                                                                 ->  Nested Loop  (cost=0.00..86010333.80 rows=14689 width=28)
                                                                                       Join Filter: ((pg_catalog.sum((sum(((web_sales.ws_quantity)::numeric * web_sales.ws_list_price))))) > share1_ref4.average_sales)
                                                                                       ->  Broadcast Motion 3:3  (slice23; segments: 3)  (cost=0.00..431.00 rows=1 width=8)
                                                                                             ->  Shared Scan (share slice:id 23:1)  (cost=0.00..431.00 rows=1 width=8)
                                                                                       ->  HashAggregate  (cost=0.00..83129.07 rows=14689 width=28)
                                                                                             Group Key: item_2.i_brand_id, item_2.i_class_id, item_2.i_category_id
                                                                                             ->  Materialize  (cost=0.00..83123.41 rows=14689 width=28)
                                                                                                   ->  Redistribute Motion 3:3  (slice22; segments: 3)  (cost=0.00..83123.00 rows=14689 width=28)
                                                                                                         Hash Key: item_2.i_brand_id, item_2.i_class_id, item_2.i_category_id
                                                                                                         ->  Result  (cost=0.00..83121.71 rows=14689 width=28)
                                                                                                               ->  HashAggregate  (cost=0.00..83121.71 rows=14689 width=28)
                                                                                                                     Group Key: item_2.i_brand_id, item_2.i_class_id, item_2.i_category_id
                                                                                                                     ->  Hash Join  (cost=0.00..80425.91 rows=7145398 width=21)
                                                                                                                           Hash Cond: (web_sales.ws_item_sk = item_2.i_item_sk)
                                                                                                                           ->  Hash Join  (cost=0.00..77927.32 rows=7145398 width=13)
                                                                                                                                 Hash Cond: (web_sales.ws_item_sk = share0_ref4.i_item_sk)
                                                                                                                                 ->  Hash Join  (cost=0.00..75284.21 rows=7145398 width=13)
                                                                                                                                       Hash Cond: (web_sales.ws_sold_date_sk = date_dim_2.d_date_sk)
                                                                                                                                       ->  Dynamic Table Scan on web_sales (dynamic scan id: 9)  (cost=0.00..22739.00 rows=240000000 width=17)
                                                                                                                                       ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                                                                                             ->  Partition Selector for web_sales (dynamic scan id: 9)  (cost=10.00..100.00 rows=34 width=4)
                                                                                                                                                   ->  Broadcast Motion 3:3  (slice18; segments: 3)  (cost=0.00..434.56 rows=55 width=4)
                                                                                                                                                         ->  Table Scan on date_dim date_dim_2  (cost=0.00..434.56 rows=19 width=4)
                                                                                                                                                               Filter: ((d_year = 2000) AND (d_moy = 11))
                                                                                                                                 ->  Hash  (cost=962.46..962.46 rows=299247 width=4)
                                                                                                                                       ->  Broadcast Motion 3:3  (slice20; segments: 3)  (cost=0.00..962.46 rows=299247 width=4)
                                                                                                                                             ->  HashAggregate  (cost=0.00..941.04 rows=99749 width=4)
                                                                                                                                                   Group Key: share0_ref4.i_item_sk
                                                                                                                                                   ->  Redistribute Motion 3:3  (slice19; segments: 3)  (cost=0.00..928.80 rows=99749 width=4)
                                                                                                                                                         Hash Key: share0_ref4.i_item_sk
                                                                                                                                                         ->  HashAggregate  (cost=0.00..927.55 rows=99749 width=4)
                                                                                                                                                               Group Key: share0_ref4.i_item_sk
                                                                                                                                                               ->  Shared Scan (share slice:id 19:0)  (cost=0.00..467.47 rows=3783531 width=4)
                                                                                                                           ->  Hash  (cost=536.35..536.35 rows=299247 width=16)
                                                                                                                                 ->  Broadcast Motion 3:3  (slice21; segments: 3)  (cost=0.00..536.35 rows=299247 width=16)
                                                                                                                                       ->  Table Scan on item item_2  (cost=0.00..447.68 rows=99749 width=16)
                                                         ->  Append  (cost=0.00..2253.56 rows=89807 width=36)
                                                               ->  HashAggregate  (cost=0.00..457.58 rows=44066 width=36)
                                                                     Group Key: share2_ref2.channel, share2_ref2.i_brand_id, share2_ref2.i_class_id, share2_ref2.i_category_id
                                                                     ->  Shared Scan (share slice:id 24:2)  (cost=0.00..434.82 rows=44066 width=36)
                                                               ->  Result  (cost=0.00..474.66 rows=44066 width=36)
                                                                     ->  HashAggregate  (cost=0.00..473.07 rows=44066 width=32)
                                                                           Group Key: share2_ref3.channel, share2_ref3.i_brand_id, share2_ref3.i_class_id
                                                                           ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=0.00..455.94 rows=44066 width=32)
                                                                                 Hash Key: share2_ref3.channel, share2_ref3.i_brand_id, share2_ref3.i_class_id
                                                                                 ->  Result  (cost=0.00..451.53 rows=44066 width=32)
                                                                                       ->  HashAggregate  (cost=0.00..451.53 rows=44066 width=32)
                                                                                             Group Key: share2_ref3.channel, share2_ref3.i_brand_id, share2_ref3.i_class_id
                                                                                             ->  Shared Scan (share slice:id 1:2)  (cost=0.00..434.40 rows=44066 width=32)
                                                               ->  Result  (cost=0.00..445.83 rows=1675 width=36)
                                                                     ->  HashAggregate  (cost=0.00..445.77 rows=1675 width=28)
                                                                           Group Key: share2_ref4.channel, share2_ref4.i_brand_id
                                                                           ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=0.00..445.33 rows=1675 width=28)
                                                                                 Hash Key: share2_ref4.channel, share2_ref4.i_brand_id
                                                                                 ->  Result  (cost=0.00..445.18 rows=1675 width=28)
                                                                                       ->  HashAggregate  (cost=0.00..445.18 rows=1675 width=28)
                                                                                             Group Key: share2_ref4.channel, share2_ref4.i_brand_id
                                                                                             ->  Shared Scan (share slice:id 2:2)  (cost=0.00..433.97 rows=44066 width=28)
                                                               ->  Result  (cost=0.00..439.25 rows=1 width=36)
                                                                     ->  GroupAggregate  (cost=0.00..439.25 rows=1 width=24)
                                                                           Group Key: share2_ref5.channel
                                                                           ->  Sort  (cost=0.00..439.25 rows=1 width=24)
                                                                                 Sort Key: share2_ref5.channel
                                                                                 ->  Redistribute Motion 3:3  (slice3; segments: 3)  (cost=0.00..439.25 rows=1 width=24)
                                                                                       Hash Key: share2_ref5.channel
                                                                                       ->  Result  (cost=0.00..439.25 rows=1 width=24)
                                                                                             ->  HashAggregate  (cost=0.00..439.25 rows=1 width=24)
                                                                                                   Group Key: share2_ref5.channel
                                                                                                   ->  Shared Scan (share slice:id 3:2)  (cost=0.00..433.55 rows=44066 width=24)
                                                               ->  Result  (cost=0.00..433.02 rows=1 width=36)
                                                                     ->  Redistribute Motion 1:3  (slice5)  (cost=0.00..433.02 rows=1 width=16)
                                                                           ->  Aggregate  (cost=0.00..433.02 rows=1 width=16)
                                                                                 ->  Gather Motion 3:1  (slice4; segments: 3)  (cost=0.00..433.02 rows=1 width=16)
                                                                                       ->  Aggregate  (cost=0.00..433.02 rows=1 width=16)
                                                                                             ->  Shared Scan (share slice:id 4:2)  (cost=0.00..432.70 rows=44066 width=16)
 Planning time: 7338.425 ms
 Optimizer: PQO version 3.8.0
(271 rows)

with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
(select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2
       union all
       select cs_quantity quantity
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  * from
 (select 'store' channel, i_brand_id,i_class_id,i_category_id
        ,sum(ss_quantity*ss_list_price) sales, count(*) number_sales
 from store_sales 
     ,item
     ,date_dim
 where ss_item_sk in (select ss_item_sk from cross_items)
   and ss_item_sk = i_item_sk
   and ss_sold_date_sk = d_date_sk
   and d_week_seq = (select d_week_seq
                     from date_dim
                     where d_year = 1998 + 1
                       and d_moy = 12
                       and d_dom = 16)
 group by i_brand_id,i_class_id,i_category_id
 having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)) this_year,
 (select 'store' channel, i_brand_id,i_class_id
        ,i_category_id, sum(ss_quantity*ss_list_price) sales, count(*) number_sales
 from store_sales
     ,item
     ,date_dim
 where ss_item_sk in (select ss_item_sk from cross_items)
   and ss_item_sk = i_item_sk
   and ss_sold_date_sk = d_date_sk
   and d_week_seq = (select d_week_seq
                     from date_dim
                     where d_year = 1998
                       and d_moy = 12
                       and d_dom = 16)
 group by i_brand_id,i_class_id,i_category_id
 having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)) last_year
 where this_year.i_brand_id= last_year.i_brand_id
   and this_year.i_class_id = last_year.i_class_id
   and this_year.i_category_id = last_year.i_category_id
 order by this_year.channel, this_year.i_brand_id, this_year.i_class_id, this_year.i_category_id
 limit 100;
 channel | i_brand_id | i_class_id | i_category_id | sales | number_sales | channel | i_brand_id | i_class_id | i_category_id | sales | number_sales 
---------+------------+------------+---------------+-------+--------------+---------+------------+------------+---------------+-------+--------------
(0 rows)

-- end query 1 in stream 0 using template query14.tpl
