-- start query 1 in stream 0 using template query46.tpl
explain
select  c_last_name
       ,c_first_name
       ,ca_city
       ,bought_city
       ,ss_ticket_number
       ,amt,profit 
 from
   (select ss_ticket_number
          ,ss_customer_sk
          ,ca_city bought_city
          ,sum(ss_coupon_amt) amt
          ,sum(ss_net_profit) profit
    from store_sales,date_dim,store,household_demographics,customer_address 
    where store_sales.ss_sold_date_sk = date_dim.d_date_sk
    and store_sales.ss_store_sk = store.s_store_sk  
    and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
    and store_sales.ss_addr_sk = customer_address.ca_address_sk
    and (household_demographics.hd_dep_count = 3 or
         household_demographics.hd_vehicle_count= -1)
    and date_dim.d_dow in (6,0)
    and date_dim.d_year in (2000,2000+1,2000+2) 
    and store.s_city in ('Pine Grove','Oak Ridge','Hamilton','Salem','Stringtown') 
    group by ss_ticket_number,ss_customer_sk,ss_addr_sk,ca_city) dn,customer,customer_address current_addr
    where ss_customer_sk = c_customer_sk
      and customer.c_current_addr_sk = current_addr.ca_address_sk
      and current_addr.ca_city <> bought_city
  order by c_last_name
          ,c_first_name
          ,ca_city
          ,bought_city
          ,ss_ticket_number
  limit 100;
                                                                                               QUERY PLAN                                                                                                
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.00..368168.75 rows=34 width=55)
   ->  Gather Motion 3:1  (slice7; segments: 3)  (cost=0.00..368168.74 rows=100 width=55)
         Merge Key: customer.c_last_name, customer.c_first_name, customer_address_1.ca_city, customer_address.ca_city, store_sales.ss_ticket_number
         ->  Limit  (cost=0.00..368168.72 rows=34 width=55)
               ->  Sort  (cost=0.00..368168.72 rows=2501718 width=55)
                     Sort Key: customer.c_last_name, customer.c_first_name, customer_address_1.ca_city, customer_address.ca_city, store_sales.ss_ticket_number
                     ->  Hash Join  (cost=0.00..351586.81 rows=2501718 width=55)
                           Hash Cond: (customer.c_current_addr_sk = customer_address_1.ca_address_sk)
                           Join Filter: ((customer_address_1.ca_city)::text <> (customer_address.ca_city)::text)
                           ->  Redistribute Motion 3:3  (slice6; segments: 3)  (cost=0.00..348538.88 rows=2501718 width=50)
                                 Hash Key: customer.c_current_addr_sk
                                 ->  Hash Join  (cost=0.00..348147.36 rows=2501718 width=50)
                                       Hash Cond: (store_sales.ss_customer_sk = customer.c_customer_sk)
                                       ->  Redistribute Motion 3:3  (slice5; segments: 3)  (cost=0.00..342451.58 rows=2501718 width=37)
                                             Hash Key: store_sales.ss_customer_sk
                                             ->  Result  (cost=0.00..342161.86 rows=2501718 width=37)
                                                   ->  HashAggregate  (cost=0.00..342161.86 rows=2501718 width=37)
                                                         Group Key: store_sales.ss_ticket_number, store_sales.ss_customer_sk, store_sales.ss_addr_sk, customer_address.ca_city
                                                         ->  Hash Join  (cost=0.00..340867.64 rows=2501718 width=34)
                                                               Hash Cond: (store_sales.ss_addr_sk = customer_address.ca_address_sk)
                                                               ->  Redistribute Motion 3:3  (slice4; segments: 3)  (cost=0.00..338676.52 rows=2501718 width=25)
                                                                     Hash Key: store_sales.ss_addr_sk
                                                                     ->  Hash Join  (cost=0.00..338480.76 rows=2501718 width=25)
                                                                           Hash Cond: (store_sales.ss_sold_date_sk = date_dim.d_date_sk)
                                                                           ->  Hash Join  (cost=0.00..336247.89 rows=8248498 width=29)
                                                                                 Hash Cond: (store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk)
                                                                                 ->  Hash Join  (cost=0.00..327797.62 rows=37037122 width=33)
                                                                                       Hash Cond: (store_sales.ss_store_sk = store.s_store_sk)
                                                                                       ->  Dynamic Table Scan on store_sales (dynamic scan id: 1)  (cost=0.00..68542.76 rows=959996672 width=37)
                                                                                       ->  Hash  (cost=431.07..431.07 rows=20 width=4)
                                                                                             ->  Broadcast Motion 3:3  (slice1; segments: 3)  (cost=0.00..431.07 rows=20 width=4)
                                                                                                   ->  Table Scan on store  (cost=0.00..431.06 rows=7 width=4)
                                                                                                         Filter: ((s_city)::text = ANY ('{"Pine Grove","Oak Ridge",Hamilton,Salem,Stringtown}'::text[]))
                                                                                 ->  Hash  (cost=431.36..431.36 rows=1605 width=4)
                                                                                       ->  Broadcast Motion 3:3  (slice2; segments: 3)  (cost=0.00..431.36 rows=1605 width=4)
                                                                                             ->  Table Scan on household_demographics  (cost=0.00..431.24 rows=535 width=4)
                                                                                                   Filter: ((hd_dep_count = 3) OR (hd_vehicle_count = (-1)))
                                                                           ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                                 ->  Partition Selector for store_sales (dynamic scan id: 1)  (cost=10.00..100.00 rows=34 width=4)
                                                                                       ->  Broadcast Motion 3:3  (slice3; segments: 3)  (cost=0.00..434.60 rows=552 width=4)
                                                                                             ->  Table Scan on date_dim  (cost=0.00..434.56 rows=184 width=4)
                                                                                                   Filter: ((d_dow = ANY ('{6,0}'::integer[])) AND (d_year = ANY ('{2000,2001,2002}'::integer[])))
                                                               ->  Hash  (cost=581.74..581.74 rows=2000530 width=13)
                                                                     ->  Table Scan on customer_address  (cost=0.00..581.74 rows=2000530 width=13)
                                       ->  Hash  (cost=754.40..754.40 rows=3999967 width=21)
                                             ->  Table Scan on customer  (cost=0.00..754.40 rows=3999967 width=21)
                           ->  Hash  (cost=581.74..581.74 rows=2000530 width=13)
                                 ->  Table Scan on customer_address customer_address_1  (cost=0.00..581.74 rows=2000530 width=13)
 Planning time: 1162.927 ms
 Optimizer: PQO version 3.8.0
(50 rows)

-- end query 1 in stream 0 using template query46.tpl
