-- start query 1 in stream 0 using template query54.tpl
explain
with my_customers as (
 select distinct c_customer_sk
        , c_current_addr_sk
 from   
        ( select cs_sold_date_sk sold_date_sk,
                 cs_bill_customer_sk customer_sk,
                 cs_item_sk item_sk
          from   catalog_sales
          union all
          select ws_sold_date_sk sold_date_sk,
                 ws_bill_customer_sk customer_sk,
                 ws_item_sk item_sk
          from   web_sales
         ) cs_or_ws_sales,
         item,
         date_dim,
         customer
 where   sold_date_sk = d_date_sk
         and item_sk = i_item_sk
         and i_category = 'Jewelry'
         and i_class = 'consignment'
         and c_customer_sk = cs_or_ws_sales.customer_sk
         and d_moy = 3
         and d_year = 1999
 )
 , my_revenue as (
 select c_customer_sk,
        sum(ss_ext_sales_price) as revenue
 from   my_customers,
        store_sales,
        customer_address,
        store,
        date_dim
 where  c_current_addr_sk = ca_address_sk
        and ca_county = s_county
        and ca_state = s_state
        and ss_sold_date_sk = d_date_sk
        and c_customer_sk = ss_customer_sk
        and d_month_seq between (select distinct d_month_seq+1
                                 from   date_dim where d_year = 1999 and d_moy = 3)
                           and  (select distinct d_month_seq+3
                                 from   date_dim where d_year = 1999 and d_moy = 3)
 group by c_customer_sk
 )
 , segments as
 (select cast((revenue/50) as int) as segment
  from   my_revenue
 )
  select  segment, count(*) as num_customers, segment*50 as segment_base
 from segments
 group by segment
 order by segment, num_customers
 limit 100;
                                                                                                                                            QUERY PLAN                                                                                                                                             
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=0.00..1366285598.14 rows=34 width=16)
   Sort Key: (int4(((pg_catalog.sum((sum(store_sales.ss_ext_sales_price)))) / 50::numeric))), (count((count())))
   ->  Limit  (cost=0.00..1366285598.08 rows=34 width=16)
         ->  Gather Motion 3:1  (slice17; segments: 3)  (cost=0.00..1366285598.08 rows=100 width=16)
               Merge Key: (int4(((pg_catalog.sum((sum(store_sales.ss_ext_sales_price)))) / 50::numeric))), (count((count())))
               ->  Limit  (cost=0.00..1366285598.07 rows=34 width=16)
                     ->  Result  (cost=0.00..1366285598.07 rows=334 width=16)
                           ->  Sort  (cost=0.00..1366285598.07 rows=334 width=12)
                                 Sort Key: (int4(((pg_catalog.sum((sum(store_sales.ss_ext_sales_price)))) / 50::numeric))), (count((count())))
                                 ->  HashAggregate  (cost=0.00..1366285597.88 rows=334 width=12)
                                       Group Key: (int4(((pg_catalog.sum((sum(store_sales.ss_ext_sales_price)))) / 50::numeric)))
                                       ->  Redistribute Motion 3:3  (slice16; segments: 3)  (cost=0.00..1366285597.83 rows=334 width=12)
                                             Hash Key: (int4(((pg_catalog.sum((sum(store_sales.ss_ext_sales_price)))) / 50::numeric)))
                                             ->  Result  (cost=0.00..1366285597.82 rows=334 width=12)
                                                   ->  HashAggregate  (cost=0.00..1366285597.82 rows=334 width=12)
                                                         Group Key: int4(((pg_catalog.sum((sum(store_sales.ss_ext_sales_price)))) / 50::numeric))
                                                         ->  Result  (cost=0.00..1366285597.73 rows=703 width=4)
                                                               ->  HashAggregate  (cost=0.00..1366285597.73 rows=703 width=8)
                                                                     Group Key: customer.c_customer_sk
                                                                     ->  Redistribute Motion 3:3  (slice15; segments: 3)  (cost=0.00..1366285597.68 rows=381 width=12)
                                                                           Hash Key: customer.c_customer_sk
                                                                           ->  Result  (cost=0.00..1366285597.66 rows=381 width=12)
                                                                                 ->  HashAggregate  (cost=0.00..1366285597.66 rows=381 width=12)
                                                                                       Group Key: customer.c_customer_sk
                                                                                       ->  Hash Join  (cost=0.00..1366285586.26 rows=91412 width=10)
                                                                                             Hash Cond: (store_sales.ss_sold_date_sk = date_dim_1.d_date_sk)
                                                                                             ->  Hash Join  (cost=0.00..496548.76 rows=91412 width=14)
                                                                                                   Hash Cond: (store_sales.ss_customer_sk = customer.c_customer_sk)
                                                                                                   ->  Dynamic Table Scan on store_sales (dynamic scan id: 3)  (cost=0.00..68542.76 rows=959996672 width=14)
                                                                                                   ->  Hash  (cost=227970.64..227970.64 rows=1143 width=4)
                                                                                                         ->  Broadcast Motion 3:3  (slice7; segments: 3)  (cost=0.00..227970.64 rows=1143 width=4)
                                                                                                               ->  Hash Join  (cost=0.00..227970.55 rows=381 width=4)
                                                                                                                     Hash Cond: (((customer_address.ca_county)::text = (store.s_county)::text) AND ((customer_address.ca_state)::text = (store.s_state)::text))
                                                                                                                     ->  Redistribute Motion 3:3  (slice5; segments: 3)  (cost=0.00..227539.01 rows=703 width=21)
                                                                                                                           Hash Key: customer_address.ca_county, customer_address.ca_state
                                                                                                                           ->  Hash Join  (cost=0.00..227538.96 rows=703 width=21)
                                                                                                                                 Hash Cond: (customer_address.ca_address_sk = customer.c_current_addr_sk)
                                                                                                                                 ->  Table Scan on customer_address  (cost=0.00..581.74 rows=2000530 width=21)
                                                                                                                                 ->  Hash  (cost=226505.56..226505.56 rows=703 width=8)
                                                                                                                                       ->  Redistribute Motion 3:3  (slice4; segments: 3)  (cost=0.00..226505.56 rows=703 width=8)
                                                                                                                                             Hash Key: customer.c_current_addr_sk
                                                                                                                                             ->  HashAggregate  (cost=0.00..226505.54 rows=703 width=8)
                                                                                                                                                   Group Key: customer.c_customer_sk, customer.c_current_addr_sk
                                                                                                                                                   ->  Hash Join  (cost=0.00..226504.04 rows=6171 width=8)
                                                                                                                                                         Hash Cond: (customer.c_customer_sk = catalog_sales.cs_bill_customer_sk)
                                                                                                                                                         ->  Table Scan on customer  (cost=0.00..754.40 rows=3999967 width=8)
                                                                                                                                                         ->  Hash  (cost=224973.40..224973.40 rows=9794 width=4)
                                                                                                                                                               ->  Redistribute Motion 3:3  (slice3; segments: 3)  (cost=0.00..224973.40 rows=9794 width=4)
                                                                                                                                                                     Hash Key: catalog_sales.cs_bill_customer_sk
                                                                                                                                                                     ->  Hash Join  (cost=0.00..224973.28 rows=9794 width=4)
                                                                                                                                                                           Hash Cond: (catalog_sales.cs_sold_date_sk = date_dim.d_date_sk)
                                                                                                                                                                           ->  Hash Join  (cost=0.00..224420.92 rows=658489 width=8)
                                                                                                                                                                                 Hash Cond: (catalog_sales.cs_item_sk = item.i_item_sk)
                                                                                                                                                                                 ->  Append  (cost=0.00..93551.54 rows=719993344 width=12)
                                                                                                                                                                                       ->  Dynamic Table Scan on catalog_sales (dynamic scan id: 1)  (cost=0.00..46102.37 rows=479993344 width=12)
                                                                                                                                                                                       ->  Dynamic Table Scan on web_sales (dynamic scan id: 2)  (cost=0.00..22739.00 rows=240000000 width=12)
                                                                                                                                                                                 ->  Hash  (cost=454.29..454.29 rows=535 width=4)
                                                                                                                                                                                       ->  Broadcast Motion 3:3  (slice1; segments: 3)  (cost=0.00..454.29 rows=535 width=4)
                                                                                                                                                                                             ->  Table Scan on item  (cost=0.00..454.25 rows=179 width=4)
                                                                                                                                                                                                   Filter: (((i_category)::text = 'Jewelry'::text) AND ((i_class)::text = 'consignment'::text))
                                                                                                                                                                           ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                                                                                                                                 ->  Partition Selector for web_sales (dynamic scan id: 2)  (cost=10.00..100.00 rows=34 width=4)
                                                                                                                                                                                       ->  Partition Selector for catalog_sales (dynamic scan id: 1)  (cost=10.00..100.00 rows=34 width=4)
                                                                                                                                                                                             ->  Broadcast Motion 3:3  (slice2; segments: 3)  (cost=0.00..434.56 rows=57 width=4)
                                                                                                                                                                                                   ->  Table Scan on date_dim  (cost=0.00..434.56 rows=19 width=4)
                                                                                                                                                                                                         Filter: ((d_moy = 3) AND (d_year = 1999))
                                                                                                                     ->  Hash  (cost=431.08..431.08 rows=334 width=18)
                                                                                                                           ->  Redistribute Motion 3:3  (slice6; segments: 3)  (cost=0.00..431.08 rows=334 width=18)
                                                                                                                                 Hash Key: (store.s_county)::text, (store.s_state)::text
                                                                                                                                 ->  Table Scan on store  (cost=0.00..431.05 rows=334 width=18)
                                                                                             ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                                                   ->  Partition Selector for store_sales (dynamic scan id: 3)  (cost=10.00..100.00 rows=34 width=4)
                                                                                                         ->  Broadcast Motion 3:3  (slice14; segments: 3)  (cost=0.00..1365789003.40 rows=73049 width=4)
                                                                                                               ->  Nested Loop  (cost=0.00..1365788998.17 rows=24350 width=4)
                                                                                                                     Join Filter: (date_dim_1.d_month_seq <= ((date_dim_3.d_month_seq + 3)))
                                                                                                                     ->  Assert  (cost=0.00..434.60 rows=1 width=4)
                                                                                                                           Assert Cond: ((row_number() OVER (?)) = 1)
                                                                                                                           ->  Broadcast Motion 1:3  (slice13)  (cost=0.00..434.60 rows=169 width=12)
                                                                                                                                 ->  Result  (cost=0.00..434.56 rows=19 width=12)
                                                                                                                                       ->  WindowAgg  (cost=0.00..434.56 rows=19 width=12)
                                                                                                                                             ->  Gather Motion 3:1  (slice12; segments: 3)  (cost=0.00..434.56 rows=57 width=4)
                                                                                                                                                   ->  GroupAggregate  (cost=0.00..434.56 rows=19 width=4)
                                                                                                                                                         Group Key: ((date_dim_3.d_month_seq + 3))
                                                                                                                                                         ->  Sort  (cost=0.00..434.56 rows=19 width=4)
                                                                                                                                                               Sort Key: ((date_dim_3.d_month_seq + 3))
                                                                                                                                                               ->  Redistribute Motion 3:3  (slice11; segments: 3)  (cost=0.00..434.56 rows=19 width=4)
                                                                                                                                                                     Hash Key: ((date_dim_3.d_month_seq + 3))
                                                                                                                                                                     ->  GroupAggregate  (cost=0.00..434.56 rows=19 width=4)
                                                                                                                                                                           Group Key: ((date_dim_3.d_month_seq + 3))
                                                                                                                                                                           ->  Sort  (cost=0.00..434.56 rows=19 width=4)
                                                                                                                                                                                 Sort Key: ((date_dim_3.d_month_seq + 3))
                                                                                                                                                                                 ->  Result  (cost=0.00..434.56 rows=19 width=4)
                                                                                                                                                                                       ->  Table Scan on date_dim date_dim_3  (cost=0.00..434.56 rows=19 width=4)
                                                                                                                                                                                             Filter: ((d_year = 1999) AND (d_moy = 3))
                                                                                                                     ->  Nested Loop  (cost=0.00..1332910.31 rows=24350 width=8)
                                                                                                                           Join Filter: (date_dim_1.d_month_seq >= ((date_dim_2.d_month_seq + 1)))
                                                                                                                           ->  Materialize  (cost=0.00..434.60 rows=1 width=4)
                                                                                                                                 ->  Assert  (cost=0.00..434.60 rows=1 width=4)
                                                                                                                                       Assert Cond: ((row_number() OVER (?)) = 1)
                                                                                                                                       ->  Broadcast Motion 1:3  (slice10)  (cost=0.00..434.60 rows=169 width=12)
                                                                                                                                             ->  Result  (cost=0.00..434.56 rows=19 width=12)
                                                                                                                                                   ->  WindowAgg  (cost=0.00..434.56 rows=19 width=12)
                                                                                                                                                         ->  Gather Motion 3:1  (slice9; segments: 3)  (cost=0.00..434.56 rows=57 width=4)
                                                                                                                                                               ->  GroupAggregate  (cost=0.00..434.56 rows=19 width=4)
                                                                                                                                                                     Group Key: ((date_dim_2.d_month_seq + 1))
                                                                                                                                                                     ->  Sort  (cost=0.00..434.56 rows=19 width=4)
                                                                                                                                                                           Sort Key: ((date_dim_2.d_month_seq + 1))
                                                                                                                                                                           ->  Redistribute Motion 3:3  (slice8; segments: 3)  (cost=0.00..434.56 rows=19 width=4)
                                                                                                                                                                                 Hash Key: ((date_dim_2.d_month_seq + 1))
                                                                                                                                                                                 ->  GroupAggregate  (cost=0.00..434.56 rows=19 width=4)
                                                                                                                                                                                       Group Key: ((date_dim_2.d_month_seq + 1))
                                                                                                                                                                                       ->  Sort  (cost=0.00..434.56 rows=19 width=4)
                                                                                                                                                                                             Sort Key: ((date_dim_2.d_month_seq + 1))
                                                                                                                                                                                             ->  Result  (cost=0.00..434.56 rows=19 width=4)
                                                                                                                                                                                                   ->  Table Scan on date_dim date_dim_2  (cost=0.00..434.56 rows=19 width=4)
                                                                                                                                                                                                         Filter: ((d_year = 1999) AND (d_moy = 3))
                                                                                                                           ->  Table Scan on date_dim date_dim_1  (cost=0.00..432.96 rows=24350 width=8)
 Planning time: 1688.300 ms
 Optimizer: PQO version 3.8.0
(119 rows)

-- end query 1 in stream 0 using template query54.tpl
