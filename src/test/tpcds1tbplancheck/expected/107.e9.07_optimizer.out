-- start query 1 in stream 0 using template query7.tpl
explain
select  i_item_id, 
        avg(ss_quantity) agg1,
        avg(ss_list_price) agg2,
        avg(ss_coupon_amt) agg3,
        avg(ss_sales_price) agg4 
 from store_sales, customer_demographics, date_dim, item, promotion
 where ss_sold_date_sk = d_date_sk and
       ss_item_sk = i_item_sk and
       ss_cdemo_sk = cd_demo_sk and
       ss_promo_sk = p_promo_sk and
       cd_gender = 'F' and 
       cd_marital_status = 'W' and
       cd_education_status = 'Primary' and
       (p_channel_email = 'N' or p_channel_event = 'N') and
       d_year = 1998 
 group by i_item_id
 order by i_item_id
 limit 100;
                                                                                                     QUERY PLAN                                                                                                      
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.00..344381.03 rows=34 width=49)
   ->  Gather Motion 3:1  (slice6; segments: 3)  (cost=0.00..344381.03 rows=100 width=49)
         Merge Key: item.i_item_id
         ->  Limit  (cost=0.00..344381.01 rows=34 width=49)
               ->  GroupAggregate  (cost=0.00..344381.01 rows=42635 width=49)
                     Group Key: item.i_item_id
                     ->  Sort  (cost=0.00..344377.75 rows=42635 width=49)
                           Sort Key: item.i_item_id
                           ->  Redistribute Motion 3:3  (slice5; segments: 3)  (cost=0.00..344195.57 rows=42635 width=49)
                                 Hash Key: item.i_item_id
                                 ->  Result  (cost=0.00..344189.03 rows=42635 width=49)
                                       ->  HashAggregate  (cost=0.00..344189.03 rows=42635 width=49)
                                             Group Key: item.i_item_id
                                             ->  Hash Join  (cost=0.00..342765.48 rows=10220039 width=36)
                                                   Hash Cond: (store_sales.ss_item_sk = item.i_item_sk)
                                                   ->  Hash Join  (cost=0.00..338821.73 rows=10220039 width=23)
                                                         Hash Cond: (store_sales.ss_promo_sk = promotion.p_promo_sk)
                                                         ->  Hash Join  (cost=0.00..335623.25 rows=10220039 width=27)
                                                               Hash Cond: (store_sales.ss_sold_date_sk = date_dim.d_date_sk)
                                                               ->  Hash Join  (cost=0.00..324416.62 rows=50898029 width=31)
                                                                     Hash Cond: (store_sales.ss_cdemo_sk = customer_demographics.cd_demo_sk)
                                                                     ->  Dynamic Table Scan on store_sales (dynamic scan id: 1)  (cost=0.00..68542.76 rows=959996672 width=35)
                                                                     ->  Hash  (cost=527.27..527.27 rows=97564 width=4)
                                                                           ->  Broadcast Motion 3:3  (slice1; segments: 3)  (cost=0.00..527.27 rows=97564 width=4)
                                                                                 ->  Table Scan on customer_demographics  (cost=0.00..520.28 rows=32522 width=4)
                                                                                       Filter: ((cd_gender = 'F'::bpchar) AND (cd_marital_status = 'W'::bpchar) AND ((cd_education_status)::text = 'Primary'::text))
                                                               ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                     ->  Partition Selector for store_sales (dynamic scan id: 1)  (cost=10.00..100.00 rows=34 width=4)
                                                                           ->  Broadcast Motion 3:3  (slice2; segments: 3)  (cost=0.00..433.78 rows=366 width=4)
                                                                                 ->  Table Scan on date_dim  (cost=0.00..433.76 rows=122 width=4)
                                                                                       Filter: (d_year = 1998)
                                                         ->  Hash  (cost=431.19..431.19 rows=1500 width=4)
                                                               ->  Broadcast Motion 3:3  (slice3; segments: 3)  (cost=0.00..431.19 rows=1500 width=4)
                                                                     ->  Table Scan on promotion  (cost=0.00..431.08 rows=500 width=4)
                                                                           Filter: ((p_channel_email = 'N'::bpchar) OR (p_channel_event = 'N'::bpchar))
                                                   ->  Hash  (cost=564.06..564.06 rows=299247 width=21)
                                                         ->  Broadcast Motion 3:3  (slice4; segments: 3)  (cost=0.00..564.06 rows=299247 width=21)
                                                               ->  Table Scan on item  (cost=0.00..447.68 rows=99749 width=21)
 Planning time: 694.426 ms
 Optimizer: PQO version 3.8.0
(40 rows)

-- end query 1 in stream 0 using template query7.tpl
