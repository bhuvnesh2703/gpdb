-- start query 1 in stream 0 using template query24.tpl
explain
with ssales as
(select c_last_name
      ,c_first_name
      ,s_store_name
      ,ca_state
      ,s_state
      ,i_color
      ,i_current_price
      ,i_manager_id
      ,i_units
      ,i_size
      ,sum(ss_sales_price) netpaid
from store_sales
    ,store_returns
    ,store
    ,item
    ,customer
    ,customer_address
where ss_ticket_number = sr_ticket_number
  and ss_item_sk = sr_item_sk
  and ss_customer_sk = c_customer_sk
  and ss_item_sk = i_item_sk
  and ss_store_sk = s_store_sk
  and c_birth_country = upper(ca_country)
  and s_zip = ca_zip
and s_market_id=7
group by c_last_name
        ,c_first_name
        ,s_store_name
        ,ca_state
        ,s_state
        ,i_color
        ,i_current_price
        ,i_manager_id
        ,i_units
        ,i_size)
select c_last_name
      ,c_first_name
      ,s_store_name
      ,sum(netpaid) paid
from ssales
where i_color = 'orchid'
group by c_last_name
        ,c_first_name
        ,s_store_name
having sum(netpaid) > (select 0.05*avg(netpaid)
                                 from ssales)
;
                                                                                                                     QUERY PLAN                                                                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice10; segments: 3)  (cost=0.00..81378302.21 rows=1813144 width=25)
   ->  Sequence  (cost=0.00..81378133.28 rows=604382 width=25)
         ->  Shared Scan (share slice:id 10:0)  (cost=0.00..72029763.55 rows=23948041913 width=1)
               ->  Materialize  (cost=0.00..72029763.55 rows=23948041913 width=1)
                     ->  HashAggregate  (cost=0.00..72005815.51 rows=23948041913 width=57)
                           Group Key: customer.c_last_name, customer.c_first_name, store.s_store_name, customer_address.ca_state, store.s_state, item.i_color, item.i_current_price, item.i_manager_id, item.i_units, item.i_size
                           ->  Redistribute Motion 3:3  (slice9; segments: 3)  (cost=0.00..40973535.68 rows=23948041913 width=57)
                                 Hash Key: customer.c_last_name, customer.c_first_name, store.s_store_name, customer_address.ca_state, store.s_state, item.i_color, item.i_current_price, item.i_manager_id, item.i_units, item.i_size
                                 ->  Result  (cost=0.00..36700965.53 rows=23948041913 width=57)
                                       ->  HashAggregate  (cost=0.00..36700965.53 rows=23948041913 width=57)
                                             Group Key: customer.c_last_name, customer.c_first_name, store.s_store_name, customer_address.ca_state, store.s_state, item.i_color, item.i_current_price, item.i_manager_id, item.i_units, item.i_size
                                             ->  Hash Join  (cost=0.00..5668685.70 rows=23948041913 width=55)
                                                   Hash Cond: (((customer.c_birth_country)::text = upper((customer_address.ca_country)::text)) AND ((store.s_zip)::text = (customer_address.ca_zip)::text))
                                                   ->  Redistribute Motion 3:3  (slice7; segments: 3)  (cost=0.00..1054265.39 rows=5577498 width=67)
                                                         Hash Key: store.s_zip
                                                         ->  Hash Join  (cost=0.00..1053095.73 rows=5577498 width=67)
                                                               Hash Cond: (store_sales.ss_customer_sk = customer.c_customer_sk)
                                                               ->  Redistribute Motion 3:3  (slice6; segments: 3)  (cost=0.00..1044218.57 rows=5577498 width=49)
                                                                     Hash Key: store_sales.ss_customer_sk
                                                                     ->  Hash Join  (cost=0.00..1043363.15 rows=5577498 width=49)
                                                                           Hash Cond: ((store_sales.ss_item_sk = item.i_item_sk) AND (store_returns.sr_item_sk = item.i_item_sk))
                                                                           ->  Hash Join  (cost=0.00..1039984.65 rows=5577498 width=31)
                                                                                 Hash Cond: (store_sales.ss_store_sk = store.s_store_sk)
                                                                                 ->  Hash Join  (cost=0.00..1032829.44 rows=32686858 width=22)
                                                                                       Hash Cond: ((store_sales.ss_ticket_number = store_returns.sr_ticket_number) AND (store_sales.ss_item_sk = store_returns.sr_item_sk))
                                                                                       ->  Sequence  (cost=0.00..68542.76 rows=959996672 width=26)
                                                                                             ->  Partition Selector for store_sales (dynamic scan id: 1)  (cost=10.00..100.00 rows=34 width=4)
                                                                                                   Partitions selected: 80 (out of 80)
                                                                                             ->  Dynamic Table Scan on store_sales (dynamic scan id: 1)  (cost=0.00..68542.76 rows=959996672 width=26)
                                                                                       ->  Hash  (cost=6080.60..6080.60 rows=96000000 width=12)
                                                                                             ->  Sequence  (cost=0.00..6080.60 rows=96000000 width=12)
                                                                                                   ->  Partition Selector for store_returns (dynamic scan id: 2)  (cost=10.00..100.00 rows=34 width=4)
                                                                                                         Partitions selected: 80 (out of 80)
                                                                                                   ->  Dynamic Table Scan on store_returns (dynamic scan id: 2)  (cost=0.00..6080.60 rows=96000000 width=12)
                                                                                 ->  Hash  (cost=431.09..431.09 rows=86 width=17)
                                                                                       ->  Broadcast Motion 3:3  (slice4; segments: 3)  (cost=0.00..431.09 rows=86 width=17)
                                                                                             ->  Table Scan on store  (cost=0.00..431.06 rows=29 width=17)
                                                                                                   Filter: (s_market_id = 7)
                                                                           ->  Hash  (cost=613.94..613.94 rows=299247 width=30)
                                                                                 ->  Broadcast Motion 3:3  (slice5; segments: 3)  (cost=0.00..613.94 rows=299247 width=30)
                                                                                       ->  Table Scan on item  (cost=0.00..447.68 rows=99749 width=30)
                                                               ->  Hash  (cost=754.40..754.40 rows=3999967 width=26)
                                                                     ->  Table Scan on customer  (cost=0.00..754.40 rows=3999967 width=26)
                                                   ->  Hash  (cost=811.34..811.34 rows=2000530 width=23)
                                                         ->  Redistribute Motion 3:3  (slice8; segments: 3)  (cost=0.00..811.34 rows=2000530 width=23)
                                                               Hash Key: customer_address.ca_zip
                                                               ->  Table Scan on customer_address  (cost=0.00..581.74 rows=2000530 width=23)
         ->  Nested Loop  (cost=0.00..9348354.62 rows=604382 width=25)
               Join Filter: ((pg_catalog.sum((sum(share0_ref2.netpaid)))) > ((0.05 * (pg_catalog.avg((avg(share0_ref3.netpaid)))))))
               ->  Broadcast Motion 1:3  (slice3)  (cost=0.00..1565.04 rows=3 width=8)
                     ->  Result  (cost=0.00..1565.04 rows=1 width=8)
                           ->  Aggregate  (cost=0.00..1565.04 rows=1 width=8)
                                 ->  Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..1565.04 rows=1 width=8)
                                       ->  Aggregate  (cost=0.00..1565.04 rows=1 width=8)
                                             ->  Shared Scan (share slice:id 2:0)  (cost=0.00..1514.68 rows=56207435 width=8)
               ->  HashAggregate  (cost=0.00..7004.15 rows=604382 width=25)
                     Group Key: share0_ref2.c_last_name, share0_ref2.c_first_name, share0_ref2.s_store_name
                     ->  Materialize  (cost=0.00..6773.01 rows=604382 width=25)
                           ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=0.00..6757.91 rows=604382 width=25)
                                 Hash Key: share0_ref2.c_last_name, share0_ref2.c_first_name, share0_ref2.s_store_name
                                 ->  Result  (cost=0.00..6710.61 rows=604382 width=25)
                                       ->  HashAggregate  (cost=0.00..6710.61 rows=604382 width=25)
                                             Group Key: share0_ref2.c_last_name, share0_ref2.c_first_name, share0_ref2.s_store_name
                                             ->  Result  (cost=0.00..6479.48 rows=604382 width=25)
                                                   Filter: ((share0_ref2.i_color)::text = 'orchid'::text)
                                                   ->  Shared Scan (share slice:id 1:0)  (cost=0.00..4630.26 rows=56207435 width=31)
 Planning time: 787.914 ms
 Optimizer: PQO version 3.8.0
(68 rows)

with ssales as
(select c_last_name
      ,c_first_name
      ,s_store_name
      ,ca_state
      ,s_state
      ,i_color
      ,i_current_price
      ,i_manager_id
      ,i_units
      ,i_size
      ,sum(ss_sales_price) netpaid
from store_sales
    ,store_returns
    ,store
    ,item
    ,customer
    ,customer_address
where ss_ticket_number = sr_ticket_number
  and ss_item_sk = sr_item_sk
  and ss_customer_sk = c_customer_sk
  and ss_item_sk = i_item_sk
  and ss_store_sk = s_store_sk
  and c_birth_country = upper(ca_country)
  and s_zip = ca_zip
  and s_market_id = 7
group by c_last_name
        ,c_first_name
        ,s_store_name
        ,ca_state
        ,s_state
        ,i_color
        ,i_current_price
        ,i_manager_id
        ,i_units
        ,i_size)
select c_last_name
      ,c_first_name
      ,s_store_name
      ,sum(netpaid) paid
from ssales
where i_color = 'chiffon'
group by c_last_name
        ,c_first_name
        ,s_store_name
having sum(netpaid) > (select 0.05*avg(netpaid)
                           from ssales)
;
 c_last_name | c_first_name | s_store_name | paid 
-------------+--------------+--------------+------
(0 rows)

-- end query 1 in stream 0 using template query24.tpl
