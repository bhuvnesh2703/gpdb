-- start query 1 in stream 0 using template query6.tpl
explain
select  a.ca_state state, count(*) cnt
 from customer_address a
     ,customer c
     ,store_sales s
     ,date_dim d
     ,item i
 where       a.ca_address_sk = c.c_current_addr_sk
 	and c.c_customer_sk = s.ss_customer_sk
 	and s.ss_sold_date_sk = d.d_date_sk
 	and s.ss_item_sk = i.i_item_sk
 	and d.d_month_seq = 
 	     (select distinct (d_month_seq)
 	      from date_dim
               where d_year = 2000
 	        and d_moy = 2 )
 	and i.i_current_price > 1.2 * 
             (select avg(j.i_current_price) 
 	     from item j 
 	     where j.i_category = i.i_category)
 group by a.ca_state
 having count(*) >= 10
 order by cnt 
 limit 100;
                                                                                                                               QUERY PLAN                                                                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.00..268338.54 rows=7 width=11)
   ->  Gather Motion 3:1  (slice11; segments: 3)  (cost=0.00..268338.54 rows=21 width=11)
         Merge Key: (count((count())))
         ->  Sort  (cost=0.00..268338.54 rows=7 width=11)
               Sort Key: (count((count())))
               ->  Result  (cost=0.00..268338.54 rows=7 width=11)
                     Filter: ((count((count()))) >= 10)
                     ->  HashAggregate  (cost=0.00..268338.54 rows=18 width=11)
                           Group Key: customer_address.ca_state
                           ->  Redistribute Motion 3:3  (slice10; segments: 3)  (cost=0.00..268338.54 rows=18 width=11)
                                 Hash Key: customer_address.ca_state
                                 ->  Result  (cost=0.00..268338.54 rows=18 width=11)
                                       ->  HashAggregate  (cost=0.00..268338.54 rows=18 width=11)
                                             Group Key: customer_address.ca_state
                                             ->  Hash Join  (cost=0.00..268318.64 rows=160000 width=3)
                                                   Hash Cond: (customer_address.ca_address_sk = customer.c_current_addr_sk)
                                                   ->  Table Scan on customer_address  (cost=0.00..581.74 rows=2000530 width=7)
                                                   ->  Hash  (cost=267322.43..267322.43 rows=160000 width=4)
                                                         ->  Redistribute Motion 3:3  (slice9; segments: 3)  (cost=0.00..267322.43 rows=160000 width=4)
                                                               Hash Key: customer.c_current_addr_sk
                                                               ->  Hash Join  (cost=0.00..267320.43 rows=160000 width=4)
                                                                     Hash Cond: (customer.c_customer_sk = store_sales.ss_customer_sk)
                                                                     ->  Table Scan on customer  (cost=0.00..754.40 rows=3999967 width=8)
                                                                     ->  Hash  (cost=265759.06..265759.06 rows=160000 width=4)
                                                                           ->  Redistribute Motion 3:3  (slice8; segments: 3)  (cost=0.00..265759.06 rows=160000 width=4)
                                                                                 Hash Key: store_sales.ss_customer_sk
                                                                                 ->  Hash Join  (cost=0.00..265757.06 rows=160000 width=4)
                                                                                       Hash Cond: (store_sales.ss_item_sk = item.i_item_sk)
                                                                                       ->  Redistribute Motion 3:3  (slice5; segments: 3)  (cost=0.00..264726.45 rows=399999 width=8)
                                                                                             Hash Key: store_sales.ss_item_sk
                                                                                             ->  Hash Join  (cost=0.00..264716.44 rows=399999 width=8)
                                                                                                   Hash Cond: (store_sales.ss_sold_date_sk = date_dim.d_date_sk)
                                                                                                   ->  Dynamic Table Scan on store_sales (dynamic scan id: 1)  (cost=0.00..68542.76 rows=959996672 width=12)
                                                                                                   ->  Hash  (cost=100.00..100.00 rows=34 width=4)
                                                                                                         ->  Partition Selector for store_sales (dynamic scan id: 1)  (cost=10.00..100.00 rows=34 width=4)
                                                                                                               ->  Broadcast Motion 3:3  (slice4; segments: 3)  (cost=0.00..872.27 rows=31 width=4)
                                                                                                                     ->  Hash Join  (cost=0.00..872.26 rows=11 width=4)
                                                                                                                           Hash Cond: (date_dim.d_month_seq = date_dim_1.d_month_seq)
                                                                                                                           ->  Table Scan on date_dim  (cost=0.00..432.96 rows=24350 width=8)
                                                                                                                           ->  Hash  (cost=434.59..434.59 rows=1 width=4)
                                                                                                                                 ->  Assert  (cost=0.00..434.59 rows=1 width=4)
                                                                                                                                       Assert Cond: ((row_number() OVER (?)) = 1)
                                                                                                                                       ->  Broadcast Motion 1:3  (slice3)  (cost=0.00..434.59 rows=151 width=12)
                                                                                                                                             ->  Result  (cost=0.00..434.56 rows=17 width=12)
                                                                                                                                                   ->  WindowAgg  (cost=0.00..434.56 rows=17 width=12)
                                                                                                                                                         ->  Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..434.56 rows=51 width=4)
                                                                                                                                                               ->  GroupAggregate  (cost=0.00..434.56 rows=17 width=4)
                                                                                                                                                                     Group Key: date_dim_1.d_month_seq
                                                                                                                                                                     ->  Sort  (cost=0.00..434.56 rows=17 width=4)
                                                                                                                                                                           Sort Key: date_dim_1.d_month_seq
                                                                                                                                                                           ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=0.00..434.56 rows=17 width=4)
                                                                                                                                                                                 Hash Key: date_dim_1.d_month_seq
                                                                                                                                                                                 ->  GroupAggregate  (cost=0.00..434.56 rows=17 width=4)
                                                                                                                                                                                       Group Key: date_dim_1.d_month_seq
                                                                                                                                                                                       ->  Sort  (cost=0.00..434.56 rows=17 width=4)
                                                                                                                                                                                             Sort Key: date_dim_1.d_month_seq
                                                                                                                                                                                             ->  Table Scan on date_dim date_dim_1  (cost=0.00..434.56 rows=17 width=4)
                                                                                                                                                                                                   Filter: ((d_year = 2000) AND (d_moy = 2))
                                                                                       ->  Hash  (cost=949.28..949.28 rows=39900 width=4)
                                                                                             ->  Hash Join  (cost=0.00..949.28 rows=39900 width=4)
                                                                                                   Hash Cond: ((item.i_category)::text = (item_1.i_category)::text)
                                                                                                   Join Filter: (item.i_current_price > (1.2 * (pg_catalog.avg((avg(item_1.i_current_price))))))
                                                                                                   ->  Table Scan on item  (cost=0.00..447.68 rows=99749 width=16)
                                                                                                   ->  Hash  (cost=462.43..462.43 rows=11 width=14)
                                                                                                         ->  Broadcast Motion 3:3  (slice7; segments: 3)  (cost=0.00..462.43 rows=11 width=14)
                                                                                                               ->  Result  (cost=0.00..462.42 rows=4 width=14)
                                                                                                                     ->  HashAggregate  (cost=0.00..462.42 rows=4 width=14)
                                                                                                                           Group Key: item_1.i_category
                                                                                                                           ->  Redistribute Motion 3:3  (slice6; segments: 3)  (cost=0.00..462.42 rows=4 width=14)
                                                                                                                                 Hash Key: item_1.i_category
                                                                                                                                 ->  Result  (cost=0.00..462.42 rows=4 width=14)
                                                                                                                                       ->  HashAggregate  (cost=0.00..462.42 rows=4 width=14)
                                                                                                                                             Group Key: item_1.i_category
                                                                                                                                             ->  Table Scan on item item_1  (cost=0.00..447.68 rows=99749 width=12)
 Planning time: 820.040 ms
 Optimizer: PQO version 3.8.0
(76 rows)

-- end query 1 in stream 0 using template query6.tpl
